(function e(t, n, r) {
    function s(o, u) {
        if (!n[o]) {
            if (!t[o]) {
                var a = typeof require == 'function' && require;
                if (!u && a)
                    return a(o, !0);
                if (i)
                    return i(o, !0);
                var f = new Error('Cannot find module \'' + o + '\'');
                throw f.code = 'MODULE_NOT_FOUND', f;
            }
            var l = n[o] = { exports: {} };
            t[o][0].call(l.exports, function (e) {
                var n = t[o][1][e];
                return s(n ? n : e);
            }, l, l.exports, e, t, n, r);
        }
        return n[o].exports;
    }
    var i = typeof require == 'function' && require;
    for (var o = 0; o < r.length; o++)
        s(r[o]);
    return s;
}({
    1: [
        function (require, module, exports) {
            'use strict';
            var Foo = function () {
                function Foo(name) {
                    this.name = name;
                }
                Foo.prototype.say = function () {
                    var foo = 'Foo';
                    return 'Hello ' + this.name + ' Foo!!!';
                };
                return Foo;
            }();
            Object.defineProperty(exports, '__esModule', { value: true });
            exports.default = Foo;
        },
        {}
    ],
    2: [
        function (require, module, exports) {
            'use strict';
            var assert = require('power-assert');
            var Foo_1 = require('../src/Foo');
            describe('Test1', function () {
                it('true is true', function () {
                    var foo = new Foo_1.default('ken');
                    assert.equal(assert._expr(assert._capt(assert._capt(foo, 'arguments/0/callee/object').say(), 'arguments/0'), {
                        content: 'assert.equal(foo.say(), \'Hello!\')',
                        filepath: 'dist/test/Foo.spec.js',
                        line: 7
                    }), 'Hello!');
                });
            });
            describe('Test2', function () {
                it('true is false', function () {
                    var HOGE = 'hoge';
                    assert.equal('Now', assert._expr(assert._capt(HOGE, 'arguments/1'), {
                        content: 'assert.equal(\'Now\', HOGE)',
                        filepath: 'dist/test/Foo.spec.js',
                        line: 13
                    }));
                });
            });
        },
        {
            '../src/Foo': 1,
            'power-assert': 349
        }
    ],
    3: [
        function (require, module, exports) {
            'use strict';
            require('core-js/shim');
            require('./Foo.spec');
        },
        {
            './Foo.spec': 2,
            'core-js/shim': 303
        }
    ],
    4: [
        function (require, module, exports) {
            var NotAsync = {};
            var asyncExit = /^async[\t ]+(return|throw)/;
            var asyncFunction = /^async[\t ]+function/;
            var atomOrPropertyOrLabel = /^\s*[):;]/;
            var asyncAtEndOfLine = /^async[\t ]*\n/;
            function state(p) {
                if ('state' in p && p.state.constructor && p.state.constructor.name === 'State')
                    return p.state;
                return p;
            }
            function subParse(parser, pos, extensions) {
                var p = new parser.constructor(parser.options, parser.input, pos);
                if (extensions)
                    for (var k in extensions)
                        p[k] = extensions[k];
                var src = state(parser);
                var dest = state(p);
                [
                    'inFunction',
                    'inAsyncFunction',
                    'inAsync',
                    'inGenerator',
                    'inModule'
                ].forEach(function (k) {
                    if (k in src)
                        dest[k] = src[k];
                });
                p.nextToken();
                return p;
            }
            function asyncAwaitPlugin(parser, options) {
                var es7check = function () {
                };
                parser.extend('initialContext', function (base) {
                    return function () {
                        if (this.options.ecmaVersion < 7) {
                            es7check = function (node) {
                                parser.raise(node.start, 'async/await keywords only available when ecmaVersion>=7');
                            };
                        }
                        this.reservedWords = new RegExp(this.reservedWords.toString().replace(/await|async/g, '').replace('|/', '/').replace('/|', '/').replace('||', '|'));
                        this.reservedWordsStrict = new RegExp(this.reservedWordsStrict.toString().replace(/await|async/g, '').replace('|/', '/').replace('/|', '/').replace('||', '|'));
                        this.reservedWordsStrictBind = new RegExp(this.reservedWordsStrictBind.toString().replace(/await|async/g, '').replace('|/', '/').replace('/|', '/').replace('||', '|'));
                        return base.apply(this, arguments);
                    };
                });
                parser.extend('parseStatement', function (base) {
                    return function (declaration, topLevel) {
                        var st = state(this);
                        var start = st.start;
                        var startLoc = st.startLoc;
                        if (st.type.label === 'name') {
                            if (asyncFunction.test(st.input.slice(st.start))) {
                                var wasAsync = st.inAsyncFunction;
                                try {
                                    st.inAsyncFunction = true;
                                    this.next();
                                    var r = this.parseStatement(declaration, topLevel);
                                    r.async = true;
                                    r.start = start;
                                    r.loc && (r.loc.start = startLoc);
                                    return r;
                                } finally {
                                    st.inAsyncFunction = wasAsync;
                                }
                            } else if (typeof options === 'object' && options.asyncExits && asyncExit.test(st.input.slice(st.start))) {
                                this.next();
                                var r = this.parseStatement(declaration, topLevel);
                                r.async = true;
                                r.start = start;
                                r.loc && (r.loc.start = startLoc);
                                return r;
                            }
                        }
                        return base.apply(this, arguments);
                    };
                });
                parser.extend('parseIdent', function (base) {
                    return function (liberal) {
                        var id = base.apply(this, arguments);
                        var st = state(this);
                        if (st.inAsyncFunction && id.name === 'await') {
                            if (arguments.length === 0) {
                                this.raise(id.start, '\'await\' is reserved within async functions');
                            }
                        }
                        return id;
                    };
                });
                parser.extend('parseExprAtom', function (base) {
                    return function (refShorthandDefaultPos) {
                        var st = state(this);
                        var start = st.start;
                        var startLoc = st.startLoc;
                        var rhs, r = base.apply(this, arguments);
                        if (r.type === 'Identifier') {
                            if (r.name === 'async' && !asyncAtEndOfLine.test(st.input.slice(start))) {
                                var isAsync = st.inAsyncFunction;
                                try {
                                    st.inAsyncFunction = true;
                                    var pp = this;
                                    var inBody = false;
                                    var parseHooks = {
                                        parseFunctionBody: function (node, isArrowFunction) {
                                            try {
                                                var wasInBody = inBody;
                                                inBody = true;
                                                return pp.parseFunctionBody.apply(this, arguments);
                                            } finally {
                                                inBody = wasInBody;
                                            }
                                        },
                                        raise: function () {
                                            try {
                                                return pp.raise.apply(this, arguments);
                                            } catch (ex) {
                                                throw inBody ? ex : NotAsync;
                                            }
                                        }
                                    };
                                    rhs = subParse(this, st.start, parseHooks).parseExpression();
                                    if (rhs.type === 'SequenceExpression')
                                        rhs = rhs.expressions[0];
                                    if (rhs.type === 'FunctionExpression' || rhs.type === 'FunctionDeclaration' || rhs.type === 'ArrowFunctionExpression') {
                                        rhs.async = true;
                                        rhs.start = start;
                                        rhs.loc && (rhs.loc.start = startLoc);
                                        st.pos = rhs.end;
                                        this.next();
                                        es7check(rhs);
                                        return rhs;
                                    }
                                } catch (ex) {
                                    if (ex !== NotAsync)
                                        throw ex;
                                } finally {
                                    st.inAsyncFunction = isAsync;
                                }
                            } else if (r.name === 'await') {
                                var n = this.startNodeAt(r.start, r.loc && r.loc.start);
                                if (st.inAsyncFunction) {
                                    rhs = this.parseExprSubscripts();
                                    n.operator = 'await';
                                    n.argument = rhs;
                                    n = this.finishNodeAt(n, 'AwaitExpression', rhs.end, rhs.loc && rhs.loc.end);
                                    es7check(n);
                                    return n;
                                } else if (st.input.slice(r.end).match(atomOrPropertyOrLabel))
                                    return r;
                                if (typeof options === 'object' && options.awaitAnywhere) {
                                    start = st.start;
                                    rhs = subParse(this, start - 4).parseExprSubscripts();
                                    if (rhs.end <= start) {
                                        rhs = subParse(this, start).parseExprSubscripts();
                                        n.operator = 'await';
                                        n.argument = rhs;
                                        n = this.finishNodeAt(n, 'AwaitExpression', rhs.end, rhs.loc && rhs.loc.end);
                                        st.pos = rhs.end;
                                        this.next();
                                        es7check(n);
                                        return n;
                                    }
                                }
                            }
                        }
                        return r;
                    };
                });
                parser.extend('finishNodeAt', function (base) {
                    return function (node, type, pos, loc) {
                        if (node.__asyncValue) {
                            delete node.__asyncValue;
                            node.value.async = true;
                        }
                        return base.apply(this, arguments);
                    };
                });
                parser.extend('finishNode', function (base) {
                    return function (node, type) {
                        if (node.__asyncValue) {
                            delete node.__asyncValue;
                            node.value.async = true;
                        }
                        return base.apply(this, arguments);
                    };
                });
                parser.extend('parsePropertyName', function (base) {
                    return function (prop) {
                        var st = state(this);
                        var key = base.apply(this, arguments);
                        if (key.type === 'Identifier' && key.name === 'async') {
                            if (!st.input.slice(key.end).match(atomOrPropertyOrLabel)) {
                                es7check(prop);
                                key = base.apply(this, arguments);
                                if (key.type === 'Identifier') {
                                    if (key.name === 'constructor')
                                        this.raise(key.start, '\'constructor()\' cannot be be async');
                                    else if (key.name === 'set')
                                        this.raise(key.start, '\'set <member>(value)\' cannot be be async');
                                }
                                prop.__asyncValue = true;
                            }
                        }
                        return key;
                    };
                });
            }
            module.exports = function (acorn) {
                acorn.plugins.asyncawait = asyncAwaitPlugin;
                return acorn;
            };
        },
        {}
    ],
    5: [
        function (require, module, exports) {
            (function (global) {
                (function (f) {
                    if (typeof exports === 'object' && typeof module !== 'undefined') {
                        module.exports = f();
                    } else if (typeof define === 'function' && define.amd) {
                        define([], f);
                    } else {
                        var g;
                        if (typeof window !== 'undefined') {
                            g = window;
                        } else if (typeof global !== 'undefined') {
                            g = global;
                        } else if (typeof self !== 'undefined') {
                            g = self;
                        } else {
                            g = this;
                        }
                        g.acorn = f();
                    }
                }(function () {
                    var define, module, exports;
                    return function e(t, n, r) {
                        function s(o, u) {
                            if (!n[o]) {
                                if (!t[o]) {
                                    var a = typeof require == 'function' && require;
                                    if (!u && a)
                                        return a(o, !0);
                                    if (i)
                                        return i(o, !0);
                                    var f = new Error('Cannot find module \'' + o + '\'');
                                    throw f.code = 'MODULE_NOT_FOUND', f;
                                }
                                var l = n[o] = { exports: {} };
                                t[o][0].call(l.exports, function (e) {
                                    var n = t[o][1][e];
                                    return s(n ? n : e);
                                }, l, l.exports, e, t, n, r);
                            }
                            return n[o].exports;
                        }
                        var i = typeof require == 'function' && require;
                        for (var o = 0; o < r.length; o++)
                            s(r[o]);
                        return s;
                    }({
                        1: [
                            function (_dereq_, module, exports) {
                                'use strict';
                                var _tokentype = _dereq_('./tokentype');
                                var _state = _dereq_('./state');
                                var pp = _state.Parser.prototype;
                                pp.checkPropClash = function (prop, propHash) {
                                    if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand))
                                        return;
                                    var key = prop.key;
                                    var name = undefined;
                                    switch (key.type) {
                                    case 'Identifier':
                                        name = key.name;
                                        break;
                                    case 'Literal':
                                        name = String(key.value);
                                        break;
                                    default:
                                        return;
                                    }
                                    var kind = prop.kind;
                                    if (this.options.ecmaVersion >= 6) {
                                        if (name === '__proto__' && kind === 'init') {
                                            if (propHash.proto)
                                                this.raise(key.start, 'Redefinition of __proto__ property');
                                            propHash.proto = true;
                                        }
                                        return;
                                    }
                                    name = '$' + name;
                                    var other = propHash[name];
                                    if (other) {
                                        var isGetSet = kind !== 'init';
                                        if ((this.strict || isGetSet) && other[kind] || !(isGetSet ^ other.init))
                                            this.raise(key.start, 'Redefinition of property');
                                    } else {
                                        other = propHash[name] = {
                                            init: false,
                                            get: false,
                                            set: false
                                        };
                                    }
                                    other[kind] = true;
                                };
                                pp.parseExpression = function (noIn, refDestructuringErrors) {
                                    var startPos = this.start, startLoc = this.startLoc;
                                    var expr = this.parseMaybeAssign(noIn, refDestructuringErrors);
                                    if (this.type === _tokentype.types.comma) {
                                        var node = this.startNodeAt(startPos, startLoc);
                                        node.expressions = [expr];
                                        while (this.eat(_tokentype.types.comma))
                                            node.expressions.push(this.parseMaybeAssign(noIn, refDestructuringErrors));
                                        return this.finishNode(node, 'SequenceExpression');
                                    }
                                    return expr;
                                };
                                pp.parseMaybeAssign = function (noIn, refDestructuringErrors, afterLeftParse) {
                                    if (this.type == _tokentype.types._yield && this.inGenerator)
                                        return this.parseYield();
                                    var validateDestructuring = false;
                                    if (!refDestructuringErrors) {
                                        refDestructuringErrors = {
                                            shorthandAssign: 0,
                                            trailingComma: 0
                                        };
                                        validateDestructuring = true;
                                    }
                                    var startPos = this.start, startLoc = this.startLoc;
                                    if (this.type == _tokentype.types.parenL || this.type == _tokentype.types.name)
                                        this.potentialArrowAt = this.start;
                                    var left = this.parseMaybeConditional(noIn, refDestructuringErrors);
                                    if (afterLeftParse)
                                        left = afterLeftParse.call(this, left, startPos, startLoc);
                                    if (this.type.isAssign) {
                                        if (validateDestructuring)
                                            this.checkPatternErrors(refDestructuringErrors, true);
                                        var node = this.startNodeAt(startPos, startLoc);
                                        node.operator = this.value;
                                        node.left = this.type === _tokentype.types.eq ? this.toAssignable(left) : left;
                                        refDestructuringErrors.shorthandAssign = 0;
                                        this.checkLVal(left);
                                        this.next();
                                        node.right = this.parseMaybeAssign(noIn);
                                        return this.finishNode(node, 'AssignmentExpression');
                                    } else {
                                        if (validateDestructuring)
                                            this.checkExpressionErrors(refDestructuringErrors, true);
                                    }
                                    return left;
                                };
                                pp.parseMaybeConditional = function (noIn, refDestructuringErrors) {
                                    var startPos = this.start, startLoc = this.startLoc;
                                    var expr = this.parseExprOps(noIn, refDestructuringErrors);
                                    if (this.checkExpressionErrors(refDestructuringErrors))
                                        return expr;
                                    if (this.eat(_tokentype.types.question)) {
                                        var node = this.startNodeAt(startPos, startLoc);
                                        node.test = expr;
                                        node.consequent = this.parseMaybeAssign();
                                        this.expect(_tokentype.types.colon);
                                        node.alternate = this.parseMaybeAssign(noIn);
                                        return this.finishNode(node, 'ConditionalExpression');
                                    }
                                    return expr;
                                };
                                pp.parseExprOps = function (noIn, refDestructuringErrors) {
                                    var startPos = this.start, startLoc = this.startLoc;
                                    var expr = this.parseMaybeUnary(refDestructuringErrors);
                                    if (this.checkExpressionErrors(refDestructuringErrors))
                                        return expr;
                                    return this.parseExprOp(expr, startPos, startLoc, -1, noIn);
                                };
                                pp.parseExprOp = function (left, leftStartPos, leftStartLoc, minPrec, noIn) {
                                    var prec = this.type.binop;
                                    if (prec != null && (!noIn || this.type !== _tokentype.types._in)) {
                                        if (prec > minPrec) {
                                            var node = this.startNodeAt(leftStartPos, leftStartLoc);
                                            node.left = left;
                                            node.operator = this.value;
                                            var op = this.type;
                                            this.next();
                                            var startPos = this.start, startLoc = this.startLoc;
                                            node.right = this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, prec, noIn);
                                            this.finishNode(node, op === _tokentype.types.logicalOR || op === _tokentype.types.logicalAND ? 'LogicalExpression' : 'BinaryExpression');
                                            return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);
                                        }
                                    }
                                    return left;
                                };
                                pp.parseMaybeUnary = function (refDestructuringErrors) {
                                    if (this.type.prefix) {
                                        var node = this.startNode(), update = this.type === _tokentype.types.incDec;
                                        node.operator = this.value;
                                        node.prefix = true;
                                        this.next();
                                        node.argument = this.parseMaybeUnary();
                                        this.checkExpressionErrors(refDestructuringErrors, true);
                                        if (update)
                                            this.checkLVal(node.argument);
                                        else if (this.strict && node.operator === 'delete' && node.argument.type === 'Identifier')
                                            this.raise(node.start, 'Deleting local variable in strict mode');
                                        return this.finishNode(node, update ? 'UpdateExpression' : 'UnaryExpression');
                                    }
                                    var startPos = this.start, startLoc = this.startLoc;
                                    var expr = this.parseExprSubscripts(refDestructuringErrors);
                                    if (this.checkExpressionErrors(refDestructuringErrors))
                                        return expr;
                                    while (this.type.postfix && !this.canInsertSemicolon()) {
                                        var node = this.startNodeAt(startPos, startLoc);
                                        node.operator = this.value;
                                        node.prefix = false;
                                        node.argument = expr;
                                        this.checkLVal(expr);
                                        this.next();
                                        expr = this.finishNode(node, 'UpdateExpression');
                                    }
                                    return expr;
                                };
                                pp.parseExprSubscripts = function (refDestructuringErrors) {
                                    var startPos = this.start, startLoc = this.startLoc;
                                    var expr = this.parseExprAtom(refDestructuringErrors);
                                    var skipArrowSubscripts = expr.type === 'ArrowFunctionExpression' && this.input.slice(this.lastTokStart, this.lastTokEnd) !== ')';
                                    if (this.checkExpressionErrors(refDestructuringErrors) || skipArrowSubscripts)
                                        return expr;
                                    return this.parseSubscripts(expr, startPos, startLoc);
                                };
                                pp.parseSubscripts = function (base, startPos, startLoc, noCalls) {
                                    for (;;) {
                                        if (this.eat(_tokentype.types.dot)) {
                                            var node = this.startNodeAt(startPos, startLoc);
                                            node.object = base;
                                            node.property = this.parseIdent(true);
                                            node.computed = false;
                                            base = this.finishNode(node, 'MemberExpression');
                                        } else if (this.eat(_tokentype.types.bracketL)) {
                                            var node = this.startNodeAt(startPos, startLoc);
                                            node.object = base;
                                            node.property = this.parseExpression();
                                            node.computed = true;
                                            this.expect(_tokentype.types.bracketR);
                                            base = this.finishNode(node, 'MemberExpression');
                                        } else if (!noCalls && this.eat(_tokentype.types.parenL)) {
                                            var node = this.startNodeAt(startPos, startLoc);
                                            node.callee = base;
                                            node.arguments = this.parseExprList(_tokentype.types.parenR, false);
                                            base = this.finishNode(node, 'CallExpression');
                                        } else if (this.type === _tokentype.types.backQuote) {
                                            var node = this.startNodeAt(startPos, startLoc);
                                            node.tag = base;
                                            node.quasi = this.parseTemplate();
                                            base = this.finishNode(node, 'TaggedTemplateExpression');
                                        } else {
                                            return base;
                                        }
                                    }
                                };
                                pp.parseExprAtom = function (refDestructuringErrors) {
                                    var node = undefined, canBeArrow = this.potentialArrowAt == this.start;
                                    switch (this.type) {
                                    case _tokentype.types._super:
                                        if (!this.inFunction)
                                            this.raise(this.start, '\'super\' outside of function or class');
                                    case _tokentype.types._this:
                                        var type = this.type === _tokentype.types._this ? 'ThisExpression' : 'Super';
                                        node = this.startNode();
                                        this.next();
                                        return this.finishNode(node, type);
                                    case _tokentype.types._yield:
                                        if (this.inGenerator)
                                            this.unexpected();
                                    case _tokentype.types.name:
                                        var startPos = this.start, startLoc = this.startLoc;
                                        var id = this.parseIdent(this.type !== _tokentype.types.name);
                                        if (canBeArrow && !this.canInsertSemicolon() && this.eat(_tokentype.types.arrow))
                                            return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id]);
                                        return id;
                                    case _tokentype.types.regexp:
                                        var value = this.value;
                                        node = this.parseLiteral(value.value);
                                        node.regex = {
                                            pattern: value.pattern,
                                            flags: value.flags
                                        };
                                        return node;
                                    case _tokentype.types.num:
                                    case _tokentype.types.string:
                                        return this.parseLiteral(this.value);
                                    case _tokentype.types._null:
                                    case _tokentype.types._true:
                                    case _tokentype.types._false:
                                        node = this.startNode();
                                        node.value = this.type === _tokentype.types._null ? null : this.type === _tokentype.types._true;
                                        node.raw = this.type.keyword;
                                        this.next();
                                        return this.finishNode(node, 'Literal');
                                    case _tokentype.types.parenL:
                                        return this.parseParenAndDistinguishExpression(canBeArrow);
                                    case _tokentype.types.bracketL:
                                        node = this.startNode();
                                        this.next();
                                        if (this.options.ecmaVersion >= 7 && this.type === _tokentype.types._for) {
                                            return this.parseComprehension(node, false);
                                        }
                                        node.elements = this.parseExprList(_tokentype.types.bracketR, true, true, refDestructuringErrors);
                                        return this.finishNode(node, 'ArrayExpression');
                                    case _tokentype.types.braceL:
                                        return this.parseObj(false, refDestructuringErrors);
                                    case _tokentype.types._function:
                                        node = this.startNode();
                                        this.next();
                                        return this.parseFunction(node, false);
                                    case _tokentype.types._class:
                                        return this.parseClass(this.startNode(), false);
                                    case _tokentype.types._new:
                                        return this.parseNew();
                                    case _tokentype.types.backQuote:
                                        return this.parseTemplate();
                                    default:
                                        this.unexpected();
                                    }
                                };
                                pp.parseLiteral = function (value) {
                                    var node = this.startNode();
                                    node.value = value;
                                    node.raw = this.input.slice(this.start, this.end);
                                    this.next();
                                    return this.finishNode(node, 'Literal');
                                };
                                pp.parseParenExpression = function () {
                                    this.expect(_tokentype.types.parenL);
                                    var val = this.parseExpression();
                                    this.expect(_tokentype.types.parenR);
                                    return val;
                                };
                                pp.parseParenAndDistinguishExpression = function (canBeArrow) {
                                    var startPos = this.start, startLoc = this.startLoc, val = undefined;
                                    if (this.options.ecmaVersion >= 6) {
                                        this.next();
                                        if (this.options.ecmaVersion >= 7 && this.type === _tokentype.types._for) {
                                            return this.parseComprehension(this.startNodeAt(startPos, startLoc), true);
                                        }
                                        var innerStartPos = this.start, innerStartLoc = this.startLoc;
                                        var exprList = [], first = true;
                                        var refDestructuringErrors = {
                                                shorthandAssign: 0,
                                                trailingComma: 0
                                            }, spreadStart = undefined, innerParenStart = undefined;
                                        while (this.type !== _tokentype.types.parenR) {
                                            first ? first = false : this.expect(_tokentype.types.comma);
                                            if (this.type === _tokentype.types.ellipsis) {
                                                spreadStart = this.start;
                                                exprList.push(this.parseParenItem(this.parseRest()));
                                                break;
                                            } else {
                                                if (this.type === _tokentype.types.parenL && !innerParenStart) {
                                                    innerParenStart = this.start;
                                                }
                                                exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));
                                            }
                                        }
                                        var innerEndPos = this.start, innerEndLoc = this.startLoc;
                                        this.expect(_tokentype.types.parenR);
                                        if (canBeArrow && !this.canInsertSemicolon() && this.eat(_tokentype.types.arrow)) {
                                            this.checkPatternErrors(refDestructuringErrors, true);
                                            if (innerParenStart)
                                                this.unexpected(innerParenStart);
                                            return this.parseParenArrowList(startPos, startLoc, exprList);
                                        }
                                        if (!exprList.length)
                                            this.unexpected(this.lastTokStart);
                                        if (spreadStart)
                                            this.unexpected(spreadStart);
                                        this.checkExpressionErrors(refDestructuringErrors, true);
                                        if (exprList.length > 1) {
                                            val = this.startNodeAt(innerStartPos, innerStartLoc);
                                            val.expressions = exprList;
                                            this.finishNodeAt(val, 'SequenceExpression', innerEndPos, innerEndLoc);
                                        } else {
                                            val = exprList[0];
                                        }
                                    } else {
                                        val = this.parseParenExpression();
                                    }
                                    if (this.options.preserveParens) {
                                        var par = this.startNodeAt(startPos, startLoc);
                                        par.expression = val;
                                        return this.finishNode(par, 'ParenthesizedExpression');
                                    } else {
                                        return val;
                                    }
                                };
                                pp.parseParenItem = function (item) {
                                    return item;
                                };
                                pp.parseParenArrowList = function (startPos, startLoc, exprList) {
                                    return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList);
                                };
                                var empty = [];
                                pp.parseNew = function () {
                                    var node = this.startNode();
                                    var meta = this.parseIdent(true);
                                    if (this.options.ecmaVersion >= 6 && this.eat(_tokentype.types.dot)) {
                                        node.meta = meta;
                                        node.property = this.parseIdent(true);
                                        if (node.property.name !== 'target')
                                            this.raise(node.property.start, 'The only valid meta property for new is new.target');
                                        if (!this.inFunction)
                                            this.raise(node.start, 'new.target can only be used in functions');
                                        return this.finishNode(node, 'MetaProperty');
                                    }
                                    var startPos = this.start, startLoc = this.startLoc;
                                    node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);
                                    if (this.eat(_tokentype.types.parenL))
                                        node.arguments = this.parseExprList(_tokentype.types.parenR, false);
                                    else
                                        node.arguments = empty;
                                    return this.finishNode(node, 'NewExpression');
                                };
                                pp.parseTemplateElement = function () {
                                    var elem = this.startNode();
                                    elem.value = {
                                        raw: this.input.slice(this.start, this.end).replace(/\r\n?/g, '\n'),
                                        cooked: this.value
                                    };
                                    this.next();
                                    elem.tail = this.type === _tokentype.types.backQuote;
                                    return this.finishNode(elem, 'TemplateElement');
                                };
                                pp.parseTemplate = function () {
                                    var node = this.startNode();
                                    this.next();
                                    node.expressions = [];
                                    var curElt = this.parseTemplateElement();
                                    node.quasis = [curElt];
                                    while (!curElt.tail) {
                                        this.expect(_tokentype.types.dollarBraceL);
                                        node.expressions.push(this.parseExpression());
                                        this.expect(_tokentype.types.braceR);
                                        node.quasis.push(curElt = this.parseTemplateElement());
                                    }
                                    this.next();
                                    return this.finishNode(node, 'TemplateLiteral');
                                };
                                pp.parseObj = function (isPattern, refDestructuringErrors) {
                                    var node = this.startNode(), first = true, propHash = {};
                                    node.properties = [];
                                    this.next();
                                    while (!this.eat(_tokentype.types.braceR)) {
                                        if (!first) {
                                            this.expect(_tokentype.types.comma);
                                            if (this.afterTrailingComma(_tokentype.types.braceR))
                                                break;
                                        } else
                                            first = false;
                                        var prop = this.startNode(), isGenerator = undefined, startPos = undefined, startLoc = undefined;
                                        if (this.options.ecmaVersion >= 6) {
                                            prop.method = false;
                                            prop.shorthand = false;
                                            if (isPattern || refDestructuringErrors) {
                                                startPos = this.start;
                                                startLoc = this.startLoc;
                                            }
                                            if (!isPattern)
                                                isGenerator = this.eat(_tokentype.types.star);
                                        }
                                        this.parsePropertyName(prop);
                                        this.parsePropertyValue(prop, isPattern, isGenerator, startPos, startLoc, refDestructuringErrors);
                                        this.checkPropClash(prop, propHash);
                                        node.properties.push(this.finishNode(prop, 'Property'));
                                    }
                                    return this.finishNode(node, isPattern ? 'ObjectPattern' : 'ObjectExpression');
                                };
                                pp.parsePropertyValue = function (prop, isPattern, isGenerator, startPos, startLoc, refDestructuringErrors) {
                                    if (this.eat(_tokentype.types.colon)) {
                                        prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);
                                        prop.kind = 'init';
                                    } else if (this.options.ecmaVersion >= 6 && this.type === _tokentype.types.parenL) {
                                        if (isPattern)
                                            this.unexpected();
                                        prop.kind = 'init';
                                        prop.method = true;
                                        prop.value = this.parseMethod(isGenerator);
                                    } else if (this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === 'Identifier' && (prop.key.name === 'get' || prop.key.name === 'set') && (this.type != _tokentype.types.comma && this.type != _tokentype.types.braceR)) {
                                        if (isGenerator || isPattern)
                                            this.unexpected();
                                        prop.kind = prop.key.name;
                                        this.parsePropertyName(prop);
                                        prop.value = this.parseMethod(false);
                                        var paramCount = prop.kind === 'get' ? 0 : 1;
                                        if (prop.value.params.length !== paramCount) {
                                            var start = prop.value.start;
                                            if (prop.kind === 'get')
                                                this.raise(start, 'getter should have no params');
                                            else
                                                this.raise(start, 'setter should have exactly one param');
                                        }
                                        if (prop.kind === 'set' && prop.value.params[0].type === 'RestElement')
                                            this.raise(prop.value.params[0].start, 'Setter cannot use rest params');
                                    } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === 'Identifier') {
                                        prop.kind = 'init';
                                        if (isPattern) {
                                            if (this.keywords.test(prop.key.name) || (this.strict ? this.reservedWordsStrictBind : this.reservedWords).test(prop.key.name))
                                                this.raise(prop.key.start, 'Binding ' + prop.key.name);
                                            prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);
                                        } else if (this.type === _tokentype.types.eq && refDestructuringErrors) {
                                            if (!refDestructuringErrors.shorthandAssign)
                                                refDestructuringErrors.shorthandAssign = this.start;
                                            prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);
                                        } else {
                                            prop.value = prop.key;
                                        }
                                        prop.shorthand = true;
                                    } else
                                        this.unexpected();
                                };
                                pp.parsePropertyName = function (prop) {
                                    if (this.options.ecmaVersion >= 6) {
                                        if (this.eat(_tokentype.types.bracketL)) {
                                            prop.computed = true;
                                            prop.key = this.parseMaybeAssign();
                                            this.expect(_tokentype.types.bracketR);
                                            return prop.key;
                                        } else {
                                            prop.computed = false;
                                        }
                                    }
                                    return prop.key = this.type === _tokentype.types.num || this.type === _tokentype.types.string ? this.parseExprAtom() : this.parseIdent(true);
                                };
                                pp.initFunction = function (node) {
                                    node.id = null;
                                    if (this.options.ecmaVersion >= 6) {
                                        node.generator = false;
                                        node.expression = false;
                                    }
                                };
                                pp.parseMethod = function (isGenerator) {
                                    var node = this.startNode();
                                    this.initFunction(node);
                                    this.expect(_tokentype.types.parenL);
                                    node.params = this.parseBindingList(_tokentype.types.parenR, false, false);
                                    if (this.options.ecmaVersion >= 6)
                                        node.generator = isGenerator;
                                    this.parseFunctionBody(node, false);
                                    return this.finishNode(node, 'FunctionExpression');
                                };
                                pp.parseArrowExpression = function (node, params) {
                                    this.initFunction(node);
                                    node.params = this.toAssignableList(params, true);
                                    this.parseFunctionBody(node, true);
                                    return this.finishNode(node, 'ArrowFunctionExpression');
                                };
                                pp.parseFunctionBody = function (node, isArrowFunction) {
                                    var isExpression = isArrowFunction && this.type !== _tokentype.types.braceL;
                                    if (isExpression) {
                                        node.body = this.parseMaybeAssign();
                                        node.expression = true;
                                    } else {
                                        var oldInFunc = this.inFunction, oldInGen = this.inGenerator, oldLabels = this.labels;
                                        this.inFunction = true;
                                        this.inGenerator = node.generator;
                                        this.labels = [];
                                        node.body = this.parseBlock(true);
                                        node.expression = false;
                                        this.inFunction = oldInFunc;
                                        this.inGenerator = oldInGen;
                                        this.labels = oldLabels;
                                    }
                                    if (this.strict || !isExpression && node.body.body.length && this.isUseStrict(node.body.body[0])) {
                                        var oldStrict = this.strict;
                                        this.strict = true;
                                        if (node.id)
                                            this.checkLVal(node.id, true);
                                        this.checkParams(node);
                                        this.strict = oldStrict;
                                    } else if (isArrowFunction) {
                                        this.checkParams(node);
                                    }
                                };
                                pp.checkParams = function (node) {
                                    var nameHash = {};
                                    for (var i = 0; i < node.params.length; i++) {
                                        this.checkLVal(node.params[i], true, nameHash);
                                    }
                                };
                                pp.parseExprList = function (close, allowTrailingComma, allowEmpty, refDestructuringErrors) {
                                    var elts = [], first = true;
                                    while (!this.eat(close)) {
                                        if (!first) {
                                            this.expect(_tokentype.types.comma);
                                            if (this.type === close && refDestructuringErrors && !refDestructuringErrors.trailingComma) {
                                                refDestructuringErrors.trailingComma = this.lastTokStart;
                                            }
                                            if (allowTrailingComma && this.afterTrailingComma(close))
                                                break;
                                        } else
                                            first = false;
                                        var elt = undefined;
                                        if (allowEmpty && this.type === _tokentype.types.comma)
                                            elt = null;
                                        else if (this.type === _tokentype.types.ellipsis)
                                            elt = this.parseSpread(refDestructuringErrors);
                                        else
                                            elt = this.parseMaybeAssign(false, refDestructuringErrors);
                                        elts.push(elt);
                                    }
                                    return elts;
                                };
                                pp.parseIdent = function (liberal) {
                                    var node = this.startNode();
                                    if (liberal && this.options.allowReserved == 'never')
                                        liberal = false;
                                    if (this.type === _tokentype.types.name) {
                                        if (!liberal && (this.strict ? this.reservedWordsStrict : this.reservedWords).test(this.value) && (this.options.ecmaVersion >= 6 || this.input.slice(this.start, this.end).indexOf('\\') == -1))
                                            this.raise(this.start, 'The keyword \'' + this.value + '\' is reserved');
                                        node.name = this.value;
                                    } else if (liberal && this.type.keyword) {
                                        node.name = this.type.keyword;
                                    } else {
                                        this.unexpected();
                                    }
                                    this.next();
                                    return this.finishNode(node, 'Identifier');
                                };
                                pp.parseYield = function () {
                                    var node = this.startNode();
                                    this.next();
                                    if (this.type == _tokentype.types.semi || this.canInsertSemicolon() || this.type != _tokentype.types.star && !this.type.startsExpr) {
                                        node.delegate = false;
                                        node.argument = null;
                                    } else {
                                        node.delegate = this.eat(_tokentype.types.star);
                                        node.argument = this.parseMaybeAssign();
                                    }
                                    return this.finishNode(node, 'YieldExpression');
                                };
                                pp.parseComprehension = function (node, isGenerator) {
                                    node.blocks = [];
                                    while (this.type === _tokentype.types._for) {
                                        var block = this.startNode();
                                        this.next();
                                        this.expect(_tokentype.types.parenL);
                                        block.left = this.parseBindingAtom();
                                        this.checkLVal(block.left, true);
                                        this.expectContextual('of');
                                        block.right = this.parseExpression();
                                        this.expect(_tokentype.types.parenR);
                                        node.blocks.push(this.finishNode(block, 'ComprehensionBlock'));
                                    }
                                    node.filter = this.eat(_tokentype.types._if) ? this.parseParenExpression() : null;
                                    node.body = this.parseExpression();
                                    this.expect(isGenerator ? _tokentype.types.parenR : _tokentype.types.bracketR);
                                    node.generator = isGenerator;
                                    return this.finishNode(node, 'ComprehensionExpression');
                                };
                            },
                            {
                                './state': 10,
                                './tokentype': 14
                            }
                        ],
                        2: [
                            function (_dereq_, module, exports) {
                                'use strict';
                                exports.__esModule = true;
                                exports.isIdentifierStart = isIdentifierStart;
                                exports.isIdentifierChar = isIdentifierChar;
                                var reservedWords = {
                                    3: 'abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile',
                                    5: 'class enum extends super const export import',
                                    6: 'enum',
                                    strict: 'implements interface let package private protected public static yield',
                                    strictBind: 'eval arguments'
                                };
                                exports.reservedWords = reservedWords;
                                var ecma5AndLessKeywords = 'break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this';
                                var keywords = {
                                    5: ecma5AndLessKeywords,
                                    6: ecma5AndLessKeywords + ' let const class extends export import yield super'
                                };
                                exports.keywords = keywords;
                                var nonASCIIidentifierStartChars = 'ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ\u2118-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ\u309B-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ';
                                var nonASCIIidentifierChars = '‌‍\xB7̀-ͯ\u0387҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛ࣤ-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ଁ-ଃ଼ା-ୄେୈୋ-୍ୖୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఃా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ഁ-ഃാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ංඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ູົຼ່-ໍ໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟\u1369-\u1371ᜒ-᜔ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠐-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏ᦰ-ᧀᧈᧉ᧐-\u19DAᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭ᳲ-᳴᳸᳹᷀-᷵᷼-᷿‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꘠-꘩꙯ꙴ-꙽ꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧꢀꢁꢴ-꣄꣐-꣙꣠-꣱꤀-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︭︳︴﹍-﹏０-９＿';
                                var nonASCIIidentifierStart = new RegExp('[' + nonASCIIidentifierStartChars + ']');
                                var nonASCIIidentifier = new RegExp('[' + nonASCIIidentifierStartChars + nonASCIIidentifierChars + ']');
                                nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
                                var astralIdentifierStartCodes = [
                                    0,
                                    11,
                                    2,
                                    25,
                                    2,
                                    18,
                                    2,
                                    1,
                                    2,
                                    14,
                                    3,
                                    13,
                                    35,
                                    122,
                                    70,
                                    52,
                                    268,
                                    28,
                                    4,
                                    48,
                                    48,
                                    31,
                                    17,
                                    26,
                                    6,
                                    37,
                                    11,
                                    29,
                                    3,
                                    35,
                                    5,
                                    7,
                                    2,
                                    4,
                                    43,
                                    157,
                                    99,
                                    39,
                                    9,
                                    51,
                                    157,
                                    310,
                                    10,
                                    21,
                                    11,
                                    7,
                                    153,
                                    5,
                                    3,
                                    0,
                                    2,
                                    43,
                                    2,
                                    1,
                                    4,
                                    0,
                                    3,
                                    22,
                                    11,
                                    22,
                                    10,
                                    30,
                                    98,
                                    21,
                                    11,
                                    25,
                                    71,
                                    55,
                                    7,
                                    1,
                                    65,
                                    0,
                                    16,
                                    3,
                                    2,
                                    2,
                                    2,
                                    26,
                                    45,
                                    28,
                                    4,
                                    28,
                                    36,
                                    7,
                                    2,
                                    27,
                                    28,
                                    53,
                                    11,
                                    21,
                                    11,
                                    18,
                                    14,
                                    17,
                                    111,
                                    72,
                                    955,
                                    52,
                                    76,
                                    44,
                                    33,
                                    24,
                                    27,
                                    35,
                                    42,
                                    34,
                                    4,
                                    0,
                                    13,
                                    47,
                                    15,
                                    3,
                                    22,
                                    0,
                                    38,
                                    17,
                                    2,
                                    24,
                                    133,
                                    46,
                                    39,
                                    7,
                                    3,
                                    1,
                                    3,
                                    21,
                                    2,
                                    6,
                                    2,
                                    1,
                                    2,
                                    4,
                                    4,
                                    0,
                                    32,
                                    4,
                                    287,
                                    47,
                                    21,
                                    1,
                                    2,
                                    0,
                                    185,
                                    46,
                                    82,
                                    47,
                                    21,
                                    0,
                                    60,
                                    42,
                                    502,
                                    63,
                                    32,
                                    0,
                                    449,
                                    56,
                                    1288,
                                    920,
                                    104,
                                    110,
                                    2962,
                                    1070,
                                    13266,
                                    568,
                                    8,
                                    30,
                                    114,
                                    29,
                                    19,
                                    47,
                                    17,
                                    3,
                                    32,
                                    20,
                                    6,
                                    18,
                                    881,
                                    68,
                                    12,
                                    0,
                                    67,
                                    12,
                                    16481,
                                    1,
                                    3071,
                                    106,
                                    6,
                                    12,
                                    4,
                                    8,
                                    8,
                                    9,
                                    5991,
                                    84,
                                    2,
                                    70,
                                    2,
                                    1,
                                    3,
                                    0,
                                    3,
                                    1,
                                    3,
                                    3,
                                    2,
                                    11,
                                    2,
                                    0,
                                    2,
                                    6,
                                    2,
                                    64,
                                    2,
                                    3,
                                    3,
                                    7,
                                    2,
                                    6,
                                    2,
                                    27,
                                    2,
                                    3,
                                    2,
                                    4,
                                    2,
                                    0,
                                    4,
                                    6,
                                    2,
                                    339,
                                    3,
                                    24,
                                    2,
                                    24,
                                    2,
                                    30,
                                    2,
                                    24,
                                    2,
                                    30,
                                    2,
                                    24,
                                    2,
                                    30,
                                    2,
                                    24,
                                    2,
                                    30,
                                    2,
                                    24,
                                    2,
                                    7,
                                    4149,
                                    196,
                                    1340,
                                    3,
                                    2,
                                    26,
                                    2,
                                    1,
                                    2,
                                    0,
                                    3,
                                    0,
                                    2,
                                    9,
                                    2,
                                    3,
                                    2,
                                    0,
                                    2,
                                    0,
                                    7,
                                    0,
                                    5,
                                    0,
                                    2,
                                    0,
                                    2,
                                    0,
                                    2,
                                    2,
                                    2,
                                    1,
                                    2,
                                    0,
                                    3,
                                    0,
                                    2,
                                    0,
                                    2,
                                    0,
                                    2,
                                    0,
                                    2,
                                    0,
                                    2,
                                    1,
                                    2,
                                    0,
                                    3,
                                    3,
                                    2,
                                    6,
                                    2,
                                    3,
                                    2,
                                    3,
                                    2,
                                    0,
                                    2,
                                    9,
                                    2,
                                    16,
                                    6,
                                    2,
                                    2,
                                    4,
                                    2,
                                    16,
                                    4421,
                                    42710,
                                    42,
                                    4148,
                                    12,
                                    221,
                                    16355,
                                    541
                                ];
                                var astralIdentifierCodes = [
                                    509,
                                    0,
                                    227,
                                    0,
                                    150,
                                    4,
                                    294,
                                    9,
                                    1368,
                                    2,
                                    2,
                                    1,
                                    6,
                                    3,
                                    41,
                                    2,
                                    5,
                                    0,
                                    166,
                                    1,
                                    1306,
                                    2,
                                    54,
                                    14,
                                    32,
                                    9,
                                    16,
                                    3,
                                    46,
                                    10,
                                    54,
                                    9,
                                    7,
                                    2,
                                    37,
                                    13,
                                    2,
                                    9,
                                    52,
                                    0,
                                    13,
                                    2,
                                    49,
                                    13,
                                    16,
                                    9,
                                    83,
                                    11,
                                    168,
                                    11,
                                    6,
                                    9,
                                    8,
                                    2,
                                    57,
                                    0,
                                    2,
                                    6,
                                    3,
                                    1,
                                    3,
                                    2,
                                    10,
                                    0,
                                    11,
                                    1,
                                    3,
                                    6,
                                    4,
                                    4,
                                    316,
                                    19,
                                    13,
                                    9,
                                    214,
                                    6,
                                    3,
                                    8,
                                    112,
                                    16,
                                    16,
                                    9,
                                    82,
                                    12,
                                    9,
                                    9,
                                    535,
                                    9,
                                    20855,
                                    9,
                                    135,
                                    4,
                                    60,
                                    6,
                                    26,
                                    9,
                                    1016,
                                    45,
                                    17,
                                    3,
                                    19723,
                                    1,
                                    5319,
                                    4,
                                    4,
                                    5,
                                    9,
                                    7,
                                    3,
                                    6,
                                    31,
                                    3,
                                    149,
                                    2,
                                    1418,
                                    49,
                                    4305,
                                    6,
                                    792618,
                                    239
                                ];
                                function isInAstralSet(code, set) {
                                    var pos = 65536;
                                    for (var i = 0; i < set.length; i += 2) {
                                        pos += set[i];
                                        if (pos > code)
                                            return false;
                                        pos += set[i + 1];
                                        if (pos >= code)
                                            return true;
                                    }
                                }
                                function isIdentifierStart(code, astral) {
                                    if (code < 65)
                                        return code === 36;
                                    if (code < 91)
                                        return true;
                                    if (code < 97)
                                        return code === 95;
                                    if (code < 123)
                                        return true;
                                    if (code <= 65535)
                                        return code >= 170 && nonASCIIidentifierStart.test(String.fromCharCode(code));
                                    if (astral === false)
                                        return false;
                                    return isInAstralSet(code, astralIdentifierStartCodes);
                                }
                                function isIdentifierChar(code, astral) {
                                    if (code < 48)
                                        return code === 36;
                                    if (code < 58)
                                        return true;
                                    if (code < 65)
                                        return false;
                                    if (code < 91)
                                        return true;
                                    if (code < 97)
                                        return code === 95;
                                    if (code < 123)
                                        return true;
                                    if (code <= 65535)
                                        return code >= 170 && nonASCIIidentifier.test(String.fromCharCode(code));
                                    if (astral === false)
                                        return false;
                                    return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);
                                }
                            },
                            {}
                        ],
                        3: [
                            function (_dereq_, module, exports) {
                                'use strict';
                                exports.__esModule = true;
                                exports.parse = parse;
                                exports.parseExpressionAt = parseExpressionAt;
                                exports.tokenizer = tokenizer;
                                var _state = _dereq_('./state');
                                _dereq_('./parseutil');
                                _dereq_('./statement');
                                _dereq_('./lval');
                                _dereq_('./expression');
                                _dereq_('./location');
                                exports.Parser = _state.Parser;
                                exports.plugins = _state.plugins;
                                var _options = _dereq_('./options');
                                exports.defaultOptions = _options.defaultOptions;
                                var _locutil = _dereq_('./locutil');
                                exports.Position = _locutil.Position;
                                exports.SourceLocation = _locutil.SourceLocation;
                                exports.getLineInfo = _locutil.getLineInfo;
                                var _node = _dereq_('./node');
                                exports.Node = _node.Node;
                                var _tokentype = _dereq_('./tokentype');
                                exports.TokenType = _tokentype.TokenType;
                                exports.tokTypes = _tokentype.types;
                                var _tokencontext = _dereq_('./tokencontext');
                                exports.TokContext = _tokencontext.TokContext;
                                exports.tokContexts = _tokencontext.types;
                                var _identifier = _dereq_('./identifier');
                                exports.isIdentifierChar = _identifier.isIdentifierChar;
                                exports.isIdentifierStart = _identifier.isIdentifierStart;
                                var _tokenize = _dereq_('./tokenize');
                                exports.Token = _tokenize.Token;
                                var _whitespace = _dereq_('./whitespace');
                                exports.isNewLine = _whitespace.isNewLine;
                                exports.lineBreak = _whitespace.lineBreak;
                                exports.lineBreakG = _whitespace.lineBreakG;
                                var version = '2.7.0';
                                exports.version = version;
                                function parse(input, options) {
                                    return new _state.Parser(options, input).parse();
                                }
                                function parseExpressionAt(input, pos, options) {
                                    var p = new _state.Parser(options, input, pos);
                                    p.nextToken();
                                    return p.parseExpression();
                                }
                                function tokenizer(input, options) {
                                    return new _state.Parser(options, input);
                                }
                            },
                            {
                                './expression': 1,
                                './identifier': 2,
                                './location': 4,
                                './locutil': 5,
                                './lval': 6,
                                './node': 7,
                                './options': 8,
                                './parseutil': 9,
                                './state': 10,
                                './statement': 11,
                                './tokencontext': 12,
                                './tokenize': 13,
                                './tokentype': 14,
                                './whitespace': 16
                            }
                        ],
                        4: [
                            function (_dereq_, module, exports) {
                                'use strict';
                                var _state = _dereq_('./state');
                                var _locutil = _dereq_('./locutil');
                                var pp = _state.Parser.prototype;
                                pp.raise = function (pos, message) {
                                    var loc = _locutil.getLineInfo(this.input, pos);
                                    message += ' (' + loc.line + ':' + loc.column + ')';
                                    var err = new SyntaxError(message);
                                    err.pos = pos;
                                    err.loc = loc;
                                    err.raisedAt = this.pos;
                                    throw err;
                                };
                                pp.curPosition = function () {
                                    if (this.options.locations) {
                                        return new _locutil.Position(this.curLine, this.pos - this.lineStart);
                                    }
                                };
                            },
                            {
                                './locutil': 5,
                                './state': 10
                            }
                        ],
                        5: [
                            function (_dereq_, module, exports) {
                                'use strict';
                                exports.__esModule = true;
                                exports.getLineInfo = getLineInfo;
                                function _classCallCheck(instance, Constructor) {
                                    if (!(instance instanceof Constructor)) {
                                        throw new TypeError('Cannot call a class as a function');
                                    }
                                }
                                var _whitespace = _dereq_('./whitespace');
                                var Position = function () {
                                    function Position(line, col) {
                                        _classCallCheck(this, Position);
                                        this.line = line;
                                        this.column = col;
                                    }
                                    Position.prototype.offset = function offset(n) {
                                        return new Position(this.line, this.column + n);
                                    };
                                    return Position;
                                }();
                                exports.Position = Position;
                                var SourceLocation = function SourceLocation(p, start, end) {
                                    _classCallCheck(this, SourceLocation);
                                    this.start = start;
                                    this.end = end;
                                    if (p.sourceFile !== null)
                                        this.source = p.sourceFile;
                                };
                                exports.SourceLocation = SourceLocation;
                                function getLineInfo(input, offset) {
                                    for (var line = 1, cur = 0;;) {
                                        _whitespace.lineBreakG.lastIndex = cur;
                                        var match = _whitespace.lineBreakG.exec(input);
                                        if (match && match.index < offset) {
                                            ++line;
                                            cur = match.index + match[0].length;
                                        } else {
                                            return new Position(line, offset - cur);
                                        }
                                    }
                                }
                            },
                            { './whitespace': 16 }
                        ],
                        6: [
                            function (_dereq_, module, exports) {
                                'use strict';
                                var _tokentype = _dereq_('./tokentype');
                                var _state = _dereq_('./state');
                                var _util = _dereq_('./util');
                                var pp = _state.Parser.prototype;
                                pp.toAssignable = function (node, isBinding) {
                                    if (this.options.ecmaVersion >= 6 && node) {
                                        switch (node.type) {
                                        case 'Identifier':
                                        case 'ObjectPattern':
                                        case 'ArrayPattern':
                                            break;
                                        case 'ObjectExpression':
                                            node.type = 'ObjectPattern';
                                            for (var i = 0; i < node.properties.length; i++) {
                                                var prop = node.properties[i];
                                                if (prop.kind !== 'init')
                                                    this.raise(prop.key.start, 'Object pattern can\'t contain getter or setter');
                                                this.toAssignable(prop.value, isBinding);
                                            }
                                            break;
                                        case 'ArrayExpression':
                                            node.type = 'ArrayPattern';
                                            this.toAssignableList(node.elements, isBinding);
                                            break;
                                        case 'AssignmentExpression':
                                            if (node.operator === '=') {
                                                node.type = 'AssignmentPattern';
                                                delete node.operator;
                                            } else {
                                                this.raise(node.left.end, 'Only \'=\' operator can be used for specifying default value.');
                                                break;
                                            }
                                        case 'AssignmentPattern':
                                            if (node.right.type === 'YieldExpression')
                                                this.raise(node.right.start, 'Yield expression cannot be a default value');
                                            break;
                                        case 'ParenthesizedExpression':
                                            node.expression = this.toAssignable(node.expression, isBinding);
                                            break;
                                        case 'MemberExpression':
                                            if (!isBinding)
                                                break;
                                        default:
                                            this.raise(node.start, 'Assigning to rvalue');
                                        }
                                    }
                                    return node;
                                };
                                pp.toAssignableList = function (exprList, isBinding) {
                                    var end = exprList.length;
                                    if (end) {
                                        var last = exprList[end - 1];
                                        if (last && last.type == 'RestElement') {
                                            --end;
                                        } else if (last && last.type == 'SpreadElement') {
                                            last.type = 'RestElement';
                                            var arg = last.argument;
                                            this.toAssignable(arg, isBinding);
                                            if (arg.type !== 'Identifier' && arg.type !== 'MemberExpression' && arg.type !== 'ArrayPattern')
                                                this.unexpected(arg.start);
                                            --end;
                                        }
                                        if (isBinding && last.type === 'RestElement' && last.argument.type !== 'Identifier')
                                            this.unexpected(last.argument.start);
                                    }
                                    for (var i = 0; i < end; i++) {
                                        var elt = exprList[i];
                                        if (elt)
                                            this.toAssignable(elt, isBinding);
                                    }
                                    return exprList;
                                };
                                pp.parseSpread = function (refDestructuringErrors) {
                                    var node = this.startNode();
                                    this.next();
                                    node.argument = this.parseMaybeAssign(refDestructuringErrors);
                                    return this.finishNode(node, 'SpreadElement');
                                };
                                pp.parseRest = function (allowNonIdent) {
                                    var node = this.startNode();
                                    this.next();
                                    if (allowNonIdent)
                                        node.argument = this.type === _tokentype.types.name ? this.parseIdent() : this.unexpected();
                                    else
                                        node.argument = this.type === _tokentype.types.name || this.type === _tokentype.types.bracketL ? this.parseBindingAtom() : this.unexpected();
                                    return this.finishNode(node, 'RestElement');
                                };
                                pp.parseBindingAtom = function () {
                                    if (this.options.ecmaVersion < 6)
                                        return this.parseIdent();
                                    switch (this.type) {
                                    case _tokentype.types.name:
                                        return this.parseIdent();
                                    case _tokentype.types.bracketL:
                                        var node = this.startNode();
                                        this.next();
                                        node.elements = this.parseBindingList(_tokentype.types.bracketR, true, true);
                                        return this.finishNode(node, 'ArrayPattern');
                                    case _tokentype.types.braceL:
                                        return this.parseObj(true);
                                    default:
                                        this.unexpected();
                                    }
                                };
                                pp.parseBindingList = function (close, allowEmpty, allowTrailingComma, allowNonIdent) {
                                    var elts = [], first = true;
                                    while (!this.eat(close)) {
                                        if (first)
                                            first = false;
                                        else
                                            this.expect(_tokentype.types.comma);
                                        if (allowEmpty && this.type === _tokentype.types.comma) {
                                            elts.push(null);
                                        } else if (allowTrailingComma && this.afterTrailingComma(close)) {
                                            break;
                                        } else if (this.type === _tokentype.types.ellipsis) {
                                            var rest = this.parseRest(allowNonIdent);
                                            this.parseBindingListItem(rest);
                                            elts.push(rest);
                                            this.expect(close);
                                            break;
                                        } else {
                                            var elem = this.parseMaybeDefault(this.start, this.startLoc);
                                            this.parseBindingListItem(elem);
                                            elts.push(elem);
                                        }
                                    }
                                    return elts;
                                };
                                pp.parseBindingListItem = function (param) {
                                    return param;
                                };
                                pp.parseMaybeDefault = function (startPos, startLoc, left) {
                                    left = left || this.parseBindingAtom();
                                    if (this.options.ecmaVersion < 6 || !this.eat(_tokentype.types.eq))
                                        return left;
                                    var node = this.startNodeAt(startPos, startLoc);
                                    node.left = left;
                                    node.right = this.parseMaybeAssign();
                                    return this.finishNode(node, 'AssignmentPattern');
                                };
                                pp.checkLVal = function (expr, isBinding, checkClashes) {
                                    switch (expr.type) {
                                    case 'Identifier':
                                        if (this.strict && this.reservedWordsStrictBind.test(expr.name))
                                            this.raise(expr.start, (isBinding ? 'Binding ' : 'Assigning to ') + expr.name + ' in strict mode');
                                        if (checkClashes) {
                                            if (_util.has(checkClashes, expr.name))
                                                this.raise(expr.start, 'Argument name clash');
                                            checkClashes[expr.name] = true;
                                        }
                                        break;
                                    case 'MemberExpression':
                                        if (isBinding)
                                            this.raise(expr.start, (isBinding ? 'Binding' : 'Assigning to') + ' member expression');
                                        break;
                                    case 'ObjectPattern':
                                        for (var i = 0; i < expr.properties.length; i++) {
                                            this.checkLVal(expr.properties[i].value, isBinding, checkClashes);
                                        }
                                        break;
                                    case 'ArrayPattern':
                                        for (var i = 0; i < expr.elements.length; i++) {
                                            var elem = expr.elements[i];
                                            if (elem)
                                                this.checkLVal(elem, isBinding, checkClashes);
                                        }
                                        break;
                                    case 'AssignmentPattern':
                                        this.checkLVal(expr.left, isBinding, checkClashes);
                                        break;
                                    case 'RestElement':
                                        this.checkLVal(expr.argument, isBinding, checkClashes);
                                        break;
                                    case 'ParenthesizedExpression':
                                        this.checkLVal(expr.expression, isBinding, checkClashes);
                                        break;
                                    default:
                                        this.raise(expr.start, (isBinding ? 'Binding' : 'Assigning to') + ' rvalue');
                                    }
                                };
                            },
                            {
                                './state': 10,
                                './tokentype': 14,
                                './util': 15
                            }
                        ],
                        7: [
                            function (_dereq_, module, exports) {
                                'use strict';
                                exports.__esModule = true;
                                function _classCallCheck(instance, Constructor) {
                                    if (!(instance instanceof Constructor)) {
                                        throw new TypeError('Cannot call a class as a function');
                                    }
                                }
                                var _state = _dereq_('./state');
                                var _locutil = _dereq_('./locutil');
                                var Node = function Node(parser, pos, loc) {
                                    _classCallCheck(this, Node);
                                    this.type = '';
                                    this.start = pos;
                                    this.end = 0;
                                    if (parser.options.locations)
                                        this.loc = new _locutil.SourceLocation(parser, loc);
                                    if (parser.options.directSourceFile)
                                        this.sourceFile = parser.options.directSourceFile;
                                    if (parser.options.ranges)
                                        this.range = [
                                            pos,
                                            0
                                        ];
                                };
                                exports.Node = Node;
                                var pp = _state.Parser.prototype;
                                pp.startNode = function () {
                                    return new Node(this, this.start, this.startLoc);
                                };
                                pp.startNodeAt = function (pos, loc) {
                                    return new Node(this, pos, loc);
                                };
                                function finishNodeAt(node, type, pos, loc) {
                                    node.type = type;
                                    node.end = pos;
                                    if (this.options.locations)
                                        node.loc.end = loc;
                                    if (this.options.ranges)
                                        node.range[1] = pos;
                                    return node;
                                }
                                pp.finishNode = function (node, type) {
                                    return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc);
                                };
                                pp.finishNodeAt = function (node, type, pos, loc) {
                                    return finishNodeAt.call(this, node, type, pos, loc);
                                };
                            },
                            {
                                './locutil': 5,
                                './state': 10
                            }
                        ],
                        8: [
                            function (_dereq_, module, exports) {
                                'use strict';
                                exports.__esModule = true;
                                exports.getOptions = getOptions;
                                var _util = _dereq_('./util');
                                var _locutil = _dereq_('./locutil');
                                var defaultOptions = {
                                    ecmaVersion: 5,
                                    sourceType: 'script',
                                    onInsertedSemicolon: null,
                                    onTrailingComma: null,
                                    allowReserved: null,
                                    allowReturnOutsideFunction: false,
                                    allowImportExportEverywhere: false,
                                    allowHashBang: false,
                                    locations: false,
                                    onToken: null,
                                    onComment: null,
                                    ranges: false,
                                    program: null,
                                    sourceFile: null,
                                    directSourceFile: null,
                                    preserveParens: false,
                                    plugins: {}
                                };
                                exports.defaultOptions = defaultOptions;
                                function getOptions(opts) {
                                    var options = {};
                                    for (var opt in defaultOptions) {
                                        options[opt] = opts && _util.has(opts, opt) ? opts[opt] : defaultOptions[opt];
                                    }
                                    if (options.allowReserved == null)
                                        options.allowReserved = options.ecmaVersion < 5;
                                    if (_util.isArray(options.onToken)) {
                                        (function () {
                                            var tokens = options.onToken;
                                            options.onToken = function (token) {
                                                return tokens.push(token);
                                            };
                                        }());
                                    }
                                    if (_util.isArray(options.onComment))
                                        options.onComment = pushComment(options, options.onComment);
                                    return options;
                                }
                                function pushComment(options, array) {
                                    return function (block, text, start, end, startLoc, endLoc) {
                                        var comment = {
                                            type: block ? 'Block' : 'Line',
                                            value: text,
                                            start: start,
                                            end: end
                                        };
                                        if (options.locations)
                                            comment.loc = new _locutil.SourceLocation(this, startLoc, endLoc);
                                        if (options.ranges)
                                            comment.range = [
                                                start,
                                                end
                                            ];
                                        array.push(comment);
                                    };
                                }
                            },
                            {
                                './locutil': 5,
                                './util': 15
                            }
                        ],
                        9: [
                            function (_dereq_, module, exports) {
                                'use strict';
                                var _tokentype = _dereq_('./tokentype');
                                var _state = _dereq_('./state');
                                var _whitespace = _dereq_('./whitespace');
                                var pp = _state.Parser.prototype;
                                pp.isUseStrict = function (stmt) {
                                    return this.options.ecmaVersion >= 5 && stmt.type === 'ExpressionStatement' && stmt.expression.type === 'Literal' && stmt.expression.raw.slice(1, -1) === 'use strict';
                                };
                                pp.eat = function (type) {
                                    if (this.type === type) {
                                        this.next();
                                        return true;
                                    } else {
                                        return false;
                                    }
                                };
                                pp.isContextual = function (name) {
                                    return this.type === _tokentype.types.name && this.value === name;
                                };
                                pp.eatContextual = function (name) {
                                    return this.value === name && this.eat(_tokentype.types.name);
                                };
                                pp.expectContextual = function (name) {
                                    if (!this.eatContextual(name))
                                        this.unexpected();
                                };
                                pp.canInsertSemicolon = function () {
                                    return this.type === _tokentype.types.eof || this.type === _tokentype.types.braceR || _whitespace.lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
                                };
                                pp.insertSemicolon = function () {
                                    if (this.canInsertSemicolon()) {
                                        if (this.options.onInsertedSemicolon)
                                            this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc);
                                        return true;
                                    }
                                };
                                pp.semicolon = function () {
                                    if (!this.eat(_tokentype.types.semi) && !this.insertSemicolon())
                                        this.unexpected();
                                };
                                pp.afterTrailingComma = function (tokType) {
                                    if (this.type == tokType) {
                                        if (this.options.onTrailingComma)
                                            this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc);
                                        this.next();
                                        return true;
                                    }
                                };
                                pp.expect = function (type) {
                                    this.eat(type) || this.unexpected();
                                };
                                pp.unexpected = function (pos) {
                                    this.raise(pos != null ? pos : this.start, 'Unexpected token');
                                };
                                pp.checkPatternErrors = function (refDestructuringErrors, andThrow) {
                                    var pos = refDestructuringErrors && refDestructuringErrors.trailingComma;
                                    if (!andThrow)
                                        return !!pos;
                                    if (pos)
                                        this.raise(pos, 'Trailing comma is not permitted in destructuring patterns');
                                };
                                pp.checkExpressionErrors = function (refDestructuringErrors, andThrow) {
                                    var pos = refDestructuringErrors && refDestructuringErrors.shorthandAssign;
                                    if (!andThrow)
                                        return !!pos;
                                    if (pos)
                                        this.raise(pos, 'Shorthand property assignments are valid only in destructuring patterns');
                                };
                            },
                            {
                                './state': 10,
                                './tokentype': 14,
                                './whitespace': 16
                            }
                        ],
                        10: [
                            function (_dereq_, module, exports) {
                                'use strict';
                                exports.__esModule = true;
                                function _classCallCheck(instance, Constructor) {
                                    if (!(instance instanceof Constructor)) {
                                        throw new TypeError('Cannot call a class as a function');
                                    }
                                }
                                var _identifier = _dereq_('./identifier');
                                var _tokentype = _dereq_('./tokentype');
                                var _whitespace = _dereq_('./whitespace');
                                var _options = _dereq_('./options');
                                var plugins = {};
                                exports.plugins = plugins;
                                function keywordRegexp(words) {
                                    return new RegExp('^(' + words.replace(/ /g, '|') + ')$');
                                }
                                var Parser = function () {
                                    function Parser(options, input, startPos) {
                                        _classCallCheck(this, Parser);
                                        this.options = options = _options.getOptions(options);
                                        this.sourceFile = options.sourceFile;
                                        this.keywords = keywordRegexp(_identifier.keywords[options.ecmaVersion >= 6 ? 6 : 5]);
                                        var reserved = options.allowReserved ? '' : _identifier.reservedWords[options.ecmaVersion] + (options.sourceType == 'module' ? ' await' : '');
                                        this.reservedWords = keywordRegexp(reserved);
                                        var reservedStrict = (reserved ? reserved + ' ' : '') + _identifier.reservedWords.strict;
                                        this.reservedWordsStrict = keywordRegexp(reservedStrict);
                                        this.reservedWordsStrictBind = keywordRegexp(reservedStrict + ' ' + _identifier.reservedWords.strictBind);
                                        this.input = String(input);
                                        this.containsEsc = false;
                                        this.loadPlugins(options.plugins);
                                        if (startPos) {
                                            this.pos = startPos;
                                            this.lineStart = Math.max(0, this.input.lastIndexOf('\n', startPos));
                                            this.curLine = this.input.slice(0, this.lineStart).split(_whitespace.lineBreak).length;
                                        } else {
                                            this.pos = this.lineStart = 0;
                                            this.curLine = 1;
                                        }
                                        this.type = _tokentype.types.eof;
                                        this.value = null;
                                        this.start = this.end = this.pos;
                                        this.startLoc = this.endLoc = this.curPosition();
                                        this.lastTokEndLoc = this.lastTokStartLoc = null;
                                        this.lastTokStart = this.lastTokEnd = this.pos;
                                        this.context = this.initialContext();
                                        this.exprAllowed = true;
                                        this.strict = this.inModule = options.sourceType === 'module';
                                        this.potentialArrowAt = -1;
                                        this.inFunction = this.inGenerator = false;
                                        this.labels = [];
                                        if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === '#!')
                                            this.skipLineComment(2);
                                    }
                                    Parser.prototype.isKeyword = function isKeyword(word) {
                                        return this.keywords.test(word);
                                    };
                                    Parser.prototype.isReservedWord = function isReservedWord(word) {
                                        return this.reservedWords.test(word);
                                    };
                                    Parser.prototype.extend = function extend(name, f) {
                                        this[name] = f(this[name]);
                                    };
                                    Parser.prototype.loadPlugins = function loadPlugins(pluginConfigs) {
                                        for (var _name in pluginConfigs) {
                                            var plugin = plugins[_name];
                                            if (!plugin)
                                                throw new Error('Plugin \'' + _name + '\' not found');
                                            plugin(this, pluginConfigs[_name]);
                                        }
                                    };
                                    Parser.prototype.parse = function parse() {
                                        var node = this.options.program || this.startNode();
                                        this.nextToken();
                                        return this.parseTopLevel(node);
                                    };
                                    return Parser;
                                }();
                                exports.Parser = Parser;
                            },
                            {
                                './identifier': 2,
                                './options': 8,
                                './tokentype': 14,
                                './whitespace': 16
                            }
                        ],
                        11: [
                            function (_dereq_, module, exports) {
                                'use strict';
                                var _tokentype = _dereq_('./tokentype');
                                var _state = _dereq_('./state');
                                var _whitespace = _dereq_('./whitespace');
                                var pp = _state.Parser.prototype;
                                pp.parseTopLevel = function (node) {
                                    var first = true;
                                    if (!node.body)
                                        node.body = [];
                                    while (this.type !== _tokentype.types.eof) {
                                        var stmt = this.parseStatement(true, true);
                                        node.body.push(stmt);
                                        if (first) {
                                            if (this.isUseStrict(stmt))
                                                this.setStrict(true);
                                            first = false;
                                        }
                                    }
                                    this.next();
                                    if (this.options.ecmaVersion >= 6) {
                                        node.sourceType = this.options.sourceType;
                                    }
                                    return this.finishNode(node, 'Program');
                                };
                                var loopLabel = { kind: 'loop' }, switchLabel = { kind: 'switch' };
                                pp.parseStatement = function (declaration, topLevel) {
                                    var starttype = this.type, node = this.startNode();
                                    switch (starttype) {
                                    case _tokentype.types._break:
                                    case _tokentype.types._continue:
                                        return this.parseBreakContinueStatement(node, starttype.keyword);
                                    case _tokentype.types._debugger:
                                        return this.parseDebuggerStatement(node);
                                    case _tokentype.types._do:
                                        return this.parseDoStatement(node);
                                    case _tokentype.types._for:
                                        return this.parseForStatement(node);
                                    case _tokentype.types._function:
                                        if (!declaration && this.options.ecmaVersion >= 6)
                                            this.unexpected();
                                        return this.parseFunctionStatement(node);
                                    case _tokentype.types._class:
                                        if (!declaration)
                                            this.unexpected();
                                        return this.parseClass(node, true);
                                    case _tokentype.types._if:
                                        return this.parseIfStatement(node);
                                    case _tokentype.types._return:
                                        return this.parseReturnStatement(node);
                                    case _tokentype.types._switch:
                                        return this.parseSwitchStatement(node);
                                    case _tokentype.types._throw:
                                        return this.parseThrowStatement(node);
                                    case _tokentype.types._try:
                                        return this.parseTryStatement(node);
                                    case _tokentype.types._let:
                                    case _tokentype.types._const:
                                        if (!declaration)
                                            this.unexpected();
                                    case _tokentype.types._var:
                                        return this.parseVarStatement(node, starttype);
                                    case _tokentype.types._while:
                                        return this.parseWhileStatement(node);
                                    case _tokentype.types._with:
                                        return this.parseWithStatement(node);
                                    case _tokentype.types.braceL:
                                        return this.parseBlock();
                                    case _tokentype.types.semi:
                                        return this.parseEmptyStatement(node);
                                    case _tokentype.types._export:
                                    case _tokentype.types._import:
                                        if (!this.options.allowImportExportEverywhere) {
                                            if (!topLevel)
                                                this.raise(this.start, '\'import\' and \'export\' may only appear at the top level');
                                            if (!this.inModule)
                                                this.raise(this.start, '\'import\' and \'export\' may appear only with \'sourceType: module\'');
                                        }
                                        return starttype === _tokentype.types._import ? this.parseImport(node) : this.parseExport(node);
                                    default:
                                        var maybeName = this.value, expr = this.parseExpression();
                                        if (starttype === _tokentype.types.name && expr.type === 'Identifier' && this.eat(_tokentype.types.colon))
                                            return this.parseLabeledStatement(node, maybeName, expr);
                                        else
                                            return this.parseExpressionStatement(node, expr);
                                    }
                                };
                                pp.parseBreakContinueStatement = function (node, keyword) {
                                    var isBreak = keyword == 'break';
                                    this.next();
                                    if (this.eat(_tokentype.types.semi) || this.insertSemicolon())
                                        node.label = null;
                                    else if (this.type !== _tokentype.types.name)
                                        this.unexpected();
                                    else {
                                        node.label = this.parseIdent();
                                        this.semicolon();
                                    }
                                    for (var i = 0; i < this.labels.length; ++i) {
                                        var lab = this.labels[i];
                                        if (node.label == null || lab.name === node.label.name) {
                                            if (lab.kind != null && (isBreak || lab.kind === 'loop'))
                                                break;
                                            if (node.label && isBreak)
                                                break;
                                        }
                                    }
                                    if (i === this.labels.length)
                                        this.raise(node.start, 'Unsyntactic ' + keyword);
                                    return this.finishNode(node, isBreak ? 'BreakStatement' : 'ContinueStatement');
                                };
                                pp.parseDebuggerStatement = function (node) {
                                    this.next();
                                    this.semicolon();
                                    return this.finishNode(node, 'DebuggerStatement');
                                };
                                pp.parseDoStatement = function (node) {
                                    this.next();
                                    this.labels.push(loopLabel);
                                    node.body = this.parseStatement(false);
                                    this.labels.pop();
                                    this.expect(_tokentype.types._while);
                                    node.test = this.parseParenExpression();
                                    if (this.options.ecmaVersion >= 6)
                                        this.eat(_tokentype.types.semi);
                                    else
                                        this.semicolon();
                                    return this.finishNode(node, 'DoWhileStatement');
                                };
                                pp.parseForStatement = function (node) {
                                    this.next();
                                    this.labels.push(loopLabel);
                                    this.expect(_tokentype.types.parenL);
                                    if (this.type === _tokentype.types.semi)
                                        return this.parseFor(node, null);
                                    if (this.type === _tokentype.types._var || this.type === _tokentype.types._let || this.type === _tokentype.types._const) {
                                        var _init = this.startNode(), varKind = this.type;
                                        this.next();
                                        this.parseVar(_init, true, varKind);
                                        this.finishNode(_init, 'VariableDeclaration');
                                        if ((this.type === _tokentype.types._in || this.options.ecmaVersion >= 6 && this.isContextual('of')) && _init.declarations.length === 1 && !(varKind !== _tokentype.types._var && _init.declarations[0].init))
                                            return this.parseForIn(node, _init);
                                        return this.parseFor(node, _init);
                                    }
                                    var refDestructuringErrors = {
                                        shorthandAssign: 0,
                                        trailingComma: 0
                                    };
                                    var init = this.parseExpression(true, refDestructuringErrors);
                                    if (this.type === _tokentype.types._in || this.options.ecmaVersion >= 6 && this.isContextual('of')) {
                                        this.checkPatternErrors(refDestructuringErrors, true);
                                        this.toAssignable(init);
                                        this.checkLVal(init);
                                        return this.parseForIn(node, init);
                                    } else {
                                        this.checkExpressionErrors(refDestructuringErrors, true);
                                    }
                                    return this.parseFor(node, init);
                                };
                                pp.parseFunctionStatement = function (node) {
                                    this.next();
                                    return this.parseFunction(node, true);
                                };
                                pp.parseIfStatement = function (node) {
                                    this.next();
                                    node.test = this.parseParenExpression();
                                    node.consequent = this.parseStatement(false);
                                    node.alternate = this.eat(_tokentype.types._else) ? this.parseStatement(false) : null;
                                    return this.finishNode(node, 'IfStatement');
                                };
                                pp.parseReturnStatement = function (node) {
                                    if (!this.inFunction && !this.options.allowReturnOutsideFunction)
                                        this.raise(this.start, '\'return\' outside of function');
                                    this.next();
                                    if (this.eat(_tokentype.types.semi) || this.insertSemicolon())
                                        node.argument = null;
                                    else {
                                        node.argument = this.parseExpression();
                                        this.semicolon();
                                    }
                                    return this.finishNode(node, 'ReturnStatement');
                                };
                                pp.parseSwitchStatement = function (node) {
                                    this.next();
                                    node.discriminant = this.parseParenExpression();
                                    node.cases = [];
                                    this.expect(_tokentype.types.braceL);
                                    this.labels.push(switchLabel);
                                    for (var cur, sawDefault = false; this.type != _tokentype.types.braceR;) {
                                        if (this.type === _tokentype.types._case || this.type === _tokentype.types._default) {
                                            var isCase = this.type === _tokentype.types._case;
                                            if (cur)
                                                this.finishNode(cur, 'SwitchCase');
                                            node.cases.push(cur = this.startNode());
                                            cur.consequent = [];
                                            this.next();
                                            if (isCase) {
                                                cur.test = this.parseExpression();
                                            } else {
                                                if (sawDefault)
                                                    this.raise(this.lastTokStart, 'Multiple default clauses');
                                                sawDefault = true;
                                                cur.test = null;
                                            }
                                            this.expect(_tokentype.types.colon);
                                        } else {
                                            if (!cur)
                                                this.unexpected();
                                            cur.consequent.push(this.parseStatement(true));
                                        }
                                    }
                                    if (cur)
                                        this.finishNode(cur, 'SwitchCase');
                                    this.next();
                                    this.labels.pop();
                                    return this.finishNode(node, 'SwitchStatement');
                                };
                                pp.parseThrowStatement = function (node) {
                                    this.next();
                                    if (_whitespace.lineBreak.test(this.input.slice(this.lastTokEnd, this.start)))
                                        this.raise(this.lastTokEnd, 'Illegal newline after throw');
                                    node.argument = this.parseExpression();
                                    this.semicolon();
                                    return this.finishNode(node, 'ThrowStatement');
                                };
                                var empty = [];
                                pp.parseTryStatement = function (node) {
                                    this.next();
                                    node.block = this.parseBlock();
                                    node.handler = null;
                                    if (this.type === _tokentype.types._catch) {
                                        var clause = this.startNode();
                                        this.next();
                                        this.expect(_tokentype.types.parenL);
                                        clause.param = this.parseBindingAtom();
                                        this.checkLVal(clause.param, true);
                                        this.expect(_tokentype.types.parenR);
                                        clause.body = this.parseBlock();
                                        node.handler = this.finishNode(clause, 'CatchClause');
                                    }
                                    node.finalizer = this.eat(_tokentype.types._finally) ? this.parseBlock() : null;
                                    if (!node.handler && !node.finalizer)
                                        this.raise(node.start, 'Missing catch or finally clause');
                                    return this.finishNode(node, 'TryStatement');
                                };
                                pp.parseVarStatement = function (node, kind) {
                                    this.next();
                                    this.parseVar(node, false, kind);
                                    this.semicolon();
                                    return this.finishNode(node, 'VariableDeclaration');
                                };
                                pp.parseWhileStatement = function (node) {
                                    this.next();
                                    node.test = this.parseParenExpression();
                                    this.labels.push(loopLabel);
                                    node.body = this.parseStatement(false);
                                    this.labels.pop();
                                    return this.finishNode(node, 'WhileStatement');
                                };
                                pp.parseWithStatement = function (node) {
                                    if (this.strict)
                                        this.raise(this.start, '\'with\' in strict mode');
                                    this.next();
                                    node.object = this.parseParenExpression();
                                    node.body = this.parseStatement(false);
                                    return this.finishNode(node, 'WithStatement');
                                };
                                pp.parseEmptyStatement = function (node) {
                                    this.next();
                                    return this.finishNode(node, 'EmptyStatement');
                                };
                                pp.parseLabeledStatement = function (node, maybeName, expr) {
                                    for (var i = 0; i < this.labels.length; ++i) {
                                        if (this.labels[i].name === maybeName)
                                            this.raise(expr.start, 'Label \'' + maybeName + '\' is already declared');
                                    }
                                    var kind = this.type.isLoop ? 'loop' : this.type === _tokentype.types._switch ? 'switch' : null;
                                    for (var i = this.labels.length - 1; i >= 0; i--) {
                                        var label = this.labels[i];
                                        if (label.statementStart == node.start) {
                                            label.statementStart = this.start;
                                            label.kind = kind;
                                        } else
                                            break;
                                    }
                                    this.labels.push({
                                        name: maybeName,
                                        kind: kind,
                                        statementStart: this.start
                                    });
                                    node.body = this.parseStatement(true);
                                    this.labels.pop();
                                    node.label = expr;
                                    return this.finishNode(node, 'LabeledStatement');
                                };
                                pp.parseExpressionStatement = function (node, expr) {
                                    node.expression = expr;
                                    this.semicolon();
                                    return this.finishNode(node, 'ExpressionStatement');
                                };
                                pp.parseBlock = function (allowStrict) {
                                    var node = this.startNode(), first = true, oldStrict = undefined;
                                    node.body = [];
                                    this.expect(_tokentype.types.braceL);
                                    while (!this.eat(_tokentype.types.braceR)) {
                                        var stmt = this.parseStatement(true);
                                        node.body.push(stmt);
                                        if (first && allowStrict && this.isUseStrict(stmt)) {
                                            oldStrict = this.strict;
                                            this.setStrict(this.strict = true);
                                        }
                                        first = false;
                                    }
                                    if (oldStrict === false)
                                        this.setStrict(false);
                                    return this.finishNode(node, 'BlockStatement');
                                };
                                pp.parseFor = function (node, init) {
                                    node.init = init;
                                    this.expect(_tokentype.types.semi);
                                    node.test = this.type === _tokentype.types.semi ? null : this.parseExpression();
                                    this.expect(_tokentype.types.semi);
                                    node.update = this.type === _tokentype.types.parenR ? null : this.parseExpression();
                                    this.expect(_tokentype.types.parenR);
                                    node.body = this.parseStatement(false);
                                    this.labels.pop();
                                    return this.finishNode(node, 'ForStatement');
                                };
                                pp.parseForIn = function (node, init) {
                                    var type = this.type === _tokentype.types._in ? 'ForInStatement' : 'ForOfStatement';
                                    this.next();
                                    node.left = init;
                                    node.right = this.parseExpression();
                                    this.expect(_tokentype.types.parenR);
                                    node.body = this.parseStatement(false);
                                    this.labels.pop();
                                    return this.finishNode(node, type);
                                };
                                pp.parseVar = function (node, isFor, kind) {
                                    node.declarations = [];
                                    node.kind = kind.keyword;
                                    for (;;) {
                                        var decl = this.startNode();
                                        this.parseVarId(decl);
                                        if (this.eat(_tokentype.types.eq)) {
                                            decl.init = this.parseMaybeAssign(isFor);
                                        } else if (kind === _tokentype.types._const && !(this.type === _tokentype.types._in || this.options.ecmaVersion >= 6 && this.isContextual('of'))) {
                                            this.unexpected();
                                        } else if (decl.id.type != 'Identifier' && !(isFor && (this.type === _tokentype.types._in || this.isContextual('of')))) {
                                            this.raise(this.lastTokEnd, 'Complex binding patterns require an initialization value');
                                        } else {
                                            decl.init = null;
                                        }
                                        node.declarations.push(this.finishNode(decl, 'VariableDeclarator'));
                                        if (!this.eat(_tokentype.types.comma))
                                            break;
                                    }
                                    return node;
                                };
                                pp.parseVarId = function (decl) {
                                    decl.id = this.parseBindingAtom();
                                    this.checkLVal(decl.id, true);
                                };
                                pp.parseFunction = function (node, isStatement, allowExpressionBody) {
                                    this.initFunction(node);
                                    if (this.options.ecmaVersion >= 6)
                                        node.generator = this.eat(_tokentype.types.star);
                                    if (isStatement || this.type === _tokentype.types.name)
                                        node.id = this.parseIdent();
                                    this.parseFunctionParams(node);
                                    this.parseFunctionBody(node, allowExpressionBody);
                                    return this.finishNode(node, isStatement ? 'FunctionDeclaration' : 'FunctionExpression');
                                };
                                pp.parseFunctionParams = function (node) {
                                    this.expect(_tokentype.types.parenL);
                                    node.params = this.parseBindingList(_tokentype.types.parenR, false, false, true);
                                };
                                pp.parseClass = function (node, isStatement) {
                                    this.next();
                                    this.parseClassId(node, isStatement);
                                    this.parseClassSuper(node);
                                    var classBody = this.startNode();
                                    var hadConstructor = false;
                                    classBody.body = [];
                                    this.expect(_tokentype.types.braceL);
                                    while (!this.eat(_tokentype.types.braceR)) {
                                        if (this.eat(_tokentype.types.semi))
                                            continue;
                                        var method = this.startNode();
                                        var isGenerator = this.eat(_tokentype.types.star);
                                        var isMaybeStatic = this.type === _tokentype.types.name && this.value === 'static';
                                        this.parsePropertyName(method);
                                        method['static'] = isMaybeStatic && this.type !== _tokentype.types.parenL;
                                        if (method['static']) {
                                            if (isGenerator)
                                                this.unexpected();
                                            isGenerator = this.eat(_tokentype.types.star);
                                            this.parsePropertyName(method);
                                        }
                                        method.kind = 'method';
                                        var isGetSet = false;
                                        if (!method.computed) {
                                            var key = method.key;
                                            if (!isGenerator && key.type === 'Identifier' && this.type !== _tokentype.types.parenL && (key.name === 'get' || key.name === 'set')) {
                                                isGetSet = true;
                                                method.kind = key.name;
                                                key = this.parsePropertyName(method);
                                            }
                                            if (!method['static'] && (key.type === 'Identifier' && key.name === 'constructor' || key.type === 'Literal' && key.value === 'constructor')) {
                                                if (hadConstructor)
                                                    this.raise(key.start, 'Duplicate constructor in the same class');
                                                if (isGetSet)
                                                    this.raise(key.start, 'Constructor can\'t have get/set modifier');
                                                if (isGenerator)
                                                    this.raise(key.start, 'Constructor can\'t be a generator');
                                                method.kind = 'constructor';
                                                hadConstructor = true;
                                            }
                                        }
                                        this.parseClassMethod(classBody, method, isGenerator);
                                        if (isGetSet) {
                                            var paramCount = method.kind === 'get' ? 0 : 1;
                                            if (method.value.params.length !== paramCount) {
                                                var start = method.value.start;
                                                if (method.kind === 'get')
                                                    this.raise(start, 'getter should have no params');
                                                else
                                                    this.raise(start, 'setter should have exactly one param');
                                            }
                                            if (method.kind === 'set' && method.value.params[0].type === 'RestElement')
                                                this.raise(method.value.params[0].start, 'Setter cannot use rest params');
                                        }
                                    }
                                    node.body = this.finishNode(classBody, 'ClassBody');
                                    return this.finishNode(node, isStatement ? 'ClassDeclaration' : 'ClassExpression');
                                };
                                pp.parseClassMethod = function (classBody, method, isGenerator) {
                                    method.value = this.parseMethod(isGenerator);
                                    classBody.body.push(this.finishNode(method, 'MethodDefinition'));
                                };
                                pp.parseClassId = function (node, isStatement) {
                                    node.id = this.type === _tokentype.types.name ? this.parseIdent() : isStatement ? this.unexpected() : null;
                                };
                                pp.parseClassSuper = function (node) {
                                    node.superClass = this.eat(_tokentype.types._extends) ? this.parseExprSubscripts() : null;
                                };
                                pp.parseExport = function (node) {
                                    this.next();
                                    if (this.eat(_tokentype.types.star)) {
                                        this.expectContextual('from');
                                        node.source = this.type === _tokentype.types.string ? this.parseExprAtom() : this.unexpected();
                                        this.semicolon();
                                        return this.finishNode(node, 'ExportAllDeclaration');
                                    }
                                    if (this.eat(_tokentype.types._default)) {
                                        var expr = this.parseMaybeAssign();
                                        var needsSemi = true;
                                        if (expr.type == 'FunctionExpression' || expr.type == 'ClassExpression') {
                                            needsSemi = false;
                                            if (expr.id) {
                                                expr.type = expr.type == 'FunctionExpression' ? 'FunctionDeclaration' : 'ClassDeclaration';
                                            }
                                        }
                                        node.declaration = expr;
                                        if (needsSemi)
                                            this.semicolon();
                                        return this.finishNode(node, 'ExportDefaultDeclaration');
                                    }
                                    if (this.shouldParseExportStatement()) {
                                        node.declaration = this.parseStatement(true);
                                        node.specifiers = [];
                                        node.source = null;
                                    } else {
                                        node.declaration = null;
                                        node.specifiers = this.parseExportSpecifiers();
                                        if (this.eatContextual('from')) {
                                            node.source = this.type === _tokentype.types.string ? this.parseExprAtom() : this.unexpected();
                                        } else {
                                            for (var i = 0; i < node.specifiers.length; i++) {
                                                if (this.keywords.test(node.specifiers[i].local.name) || this.reservedWords.test(node.specifiers[i].local.name)) {
                                                    this.unexpected(node.specifiers[i].local.start);
                                                }
                                            }
                                            node.source = null;
                                        }
                                        this.semicolon();
                                    }
                                    return this.finishNode(node, 'ExportNamedDeclaration');
                                };
                                pp.shouldParseExportStatement = function () {
                                    return this.type.keyword;
                                };
                                pp.parseExportSpecifiers = function () {
                                    var nodes = [], first = true;
                                    this.expect(_tokentype.types.braceL);
                                    while (!this.eat(_tokentype.types.braceR)) {
                                        if (!first) {
                                            this.expect(_tokentype.types.comma);
                                            if (this.afterTrailingComma(_tokentype.types.braceR))
                                                break;
                                        } else
                                            first = false;
                                        var node = this.startNode();
                                        node.local = this.parseIdent(this.type === _tokentype.types._default);
                                        node.exported = this.eatContextual('as') ? this.parseIdent(true) : node.local;
                                        nodes.push(this.finishNode(node, 'ExportSpecifier'));
                                    }
                                    return nodes;
                                };
                                pp.parseImport = function (node) {
                                    this.next();
                                    if (this.type === _tokentype.types.string) {
                                        node.specifiers = empty;
                                        node.source = this.parseExprAtom();
                                    } else {
                                        node.specifiers = this.parseImportSpecifiers();
                                        this.expectContextual('from');
                                        node.source = this.type === _tokentype.types.string ? this.parseExprAtom() : this.unexpected();
                                    }
                                    this.semicolon();
                                    return this.finishNode(node, 'ImportDeclaration');
                                };
                                pp.parseImportSpecifiers = function () {
                                    var nodes = [], first = true;
                                    if (this.type === _tokentype.types.name) {
                                        var node = this.startNode();
                                        node.local = this.parseIdent();
                                        this.checkLVal(node.local, true);
                                        nodes.push(this.finishNode(node, 'ImportDefaultSpecifier'));
                                        if (!this.eat(_tokentype.types.comma))
                                            return nodes;
                                    }
                                    if (this.type === _tokentype.types.star) {
                                        var node = this.startNode();
                                        this.next();
                                        this.expectContextual('as');
                                        node.local = this.parseIdent();
                                        this.checkLVal(node.local, true);
                                        nodes.push(this.finishNode(node, 'ImportNamespaceSpecifier'));
                                        return nodes;
                                    }
                                    this.expect(_tokentype.types.braceL);
                                    while (!this.eat(_tokentype.types.braceR)) {
                                        if (!first) {
                                            this.expect(_tokentype.types.comma);
                                            if (this.afterTrailingComma(_tokentype.types.braceR))
                                                break;
                                        } else
                                            first = false;
                                        var node = this.startNode();
                                        node.imported = this.parseIdent(true);
                                        if (this.eatContextual('as')) {
                                            node.local = this.parseIdent();
                                        } else {
                                            node.local = node.imported;
                                            if (this.isKeyword(node.local.name))
                                                this.unexpected(node.local.start);
                                            if (this.reservedWordsStrict.test(node.local.name))
                                                this.raise(node.local.start, 'The keyword \'' + node.local.name + '\' is reserved');
                                        }
                                        this.checkLVal(node.local, true);
                                        nodes.push(this.finishNode(node, 'ImportSpecifier'));
                                    }
                                    return nodes;
                                };
                            },
                            {
                                './state': 10,
                                './tokentype': 14,
                                './whitespace': 16
                            }
                        ],
                        12: [
                            function (_dereq_, module, exports) {
                                'use strict';
                                exports.__esModule = true;
                                function _classCallCheck(instance, Constructor) {
                                    if (!(instance instanceof Constructor)) {
                                        throw new TypeError('Cannot call a class as a function');
                                    }
                                }
                                var _state = _dereq_('./state');
                                var _tokentype = _dereq_('./tokentype');
                                var _whitespace = _dereq_('./whitespace');
                                var TokContext = function TokContext(token, isExpr, preserveSpace, override) {
                                    _classCallCheck(this, TokContext);
                                    this.token = token;
                                    this.isExpr = !!isExpr;
                                    this.preserveSpace = !!preserveSpace;
                                    this.override = override;
                                };
                                exports.TokContext = TokContext;
                                var types = {
                                    b_stat: new TokContext('{', false),
                                    b_expr: new TokContext('{', true),
                                    b_tmpl: new TokContext('${', true),
                                    p_stat: new TokContext('(', false),
                                    p_expr: new TokContext('(', true),
                                    q_tmpl: new TokContext('`', true, true, function (p) {
                                        return p.readTmplToken();
                                    }),
                                    f_expr: new TokContext('function', true)
                                };
                                exports.types = types;
                                var pp = _state.Parser.prototype;
                                pp.initialContext = function () {
                                    return [types.b_stat];
                                };
                                pp.braceIsBlock = function (prevType) {
                                    if (prevType === _tokentype.types.colon) {
                                        var _parent = this.curContext();
                                        if (_parent === types.b_stat || _parent === types.b_expr)
                                            return !_parent.isExpr;
                                    }
                                    if (prevType === _tokentype.types._return)
                                        return _whitespace.lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
                                    if (prevType === _tokentype.types._else || prevType === _tokentype.types.semi || prevType === _tokentype.types.eof || prevType === _tokentype.types.parenR)
                                        return true;
                                    if (prevType == _tokentype.types.braceL)
                                        return this.curContext() === types.b_stat;
                                    return !this.exprAllowed;
                                };
                                pp.updateContext = function (prevType) {
                                    var update = undefined, type = this.type;
                                    if (type.keyword && prevType == _tokentype.types.dot)
                                        this.exprAllowed = false;
                                    else if (update = type.updateContext)
                                        update.call(this, prevType);
                                    else
                                        this.exprAllowed = type.beforeExpr;
                                };
                                _tokentype.types.parenR.updateContext = _tokentype.types.braceR.updateContext = function () {
                                    if (this.context.length == 1) {
                                        this.exprAllowed = true;
                                        return;
                                    }
                                    var out = this.context.pop();
                                    if (out === types.b_stat && this.curContext() === types.f_expr) {
                                        this.context.pop();
                                        this.exprAllowed = false;
                                    } else if (out === types.b_tmpl) {
                                        this.exprAllowed = true;
                                    } else {
                                        this.exprAllowed = !out.isExpr;
                                    }
                                };
                                _tokentype.types.braceL.updateContext = function (prevType) {
                                    this.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr);
                                    this.exprAllowed = true;
                                };
                                _tokentype.types.dollarBraceL.updateContext = function () {
                                    this.context.push(types.b_tmpl);
                                    this.exprAllowed = true;
                                };
                                _tokentype.types.parenL.updateContext = function (prevType) {
                                    var statementParens = prevType === _tokentype.types._if || prevType === _tokentype.types._for || prevType === _tokentype.types._with || prevType === _tokentype.types._while;
                                    this.context.push(statementParens ? types.p_stat : types.p_expr);
                                    this.exprAllowed = true;
                                };
                                _tokentype.types.incDec.updateContext = function () {
                                };
                                _tokentype.types._function.updateContext = function () {
                                    if (this.curContext() !== types.b_stat)
                                        this.context.push(types.f_expr);
                                    this.exprAllowed = false;
                                };
                                _tokentype.types.backQuote.updateContext = function () {
                                    if (this.curContext() === types.q_tmpl)
                                        this.context.pop();
                                    else
                                        this.context.push(types.q_tmpl);
                                    this.exprAllowed = false;
                                };
                            },
                            {
                                './state': 10,
                                './tokentype': 14,
                                './whitespace': 16
                            }
                        ],
                        13: [
                            function (_dereq_, module, exports) {
                                'use strict';
                                exports.__esModule = true;
                                function _classCallCheck(instance, Constructor) {
                                    if (!(instance instanceof Constructor)) {
                                        throw new TypeError('Cannot call a class as a function');
                                    }
                                }
                                var _identifier = _dereq_('./identifier');
                                var _tokentype = _dereq_('./tokentype');
                                var _state = _dereq_('./state');
                                var _locutil = _dereq_('./locutil');
                                var _whitespace = _dereq_('./whitespace');
                                var Token = function Token(p) {
                                    _classCallCheck(this, Token);
                                    this.type = p.type;
                                    this.value = p.value;
                                    this.start = p.start;
                                    this.end = p.end;
                                    if (p.options.locations)
                                        this.loc = new _locutil.SourceLocation(p, p.startLoc, p.endLoc);
                                    if (p.options.ranges)
                                        this.range = [
                                            p.start,
                                            p.end
                                        ];
                                };
                                exports.Token = Token;
                                var pp = _state.Parser.prototype;
                                var isRhino = typeof Packages == 'object' && Object.prototype.toString.call(Packages) == '[object JavaPackage]';
                                pp.next = function () {
                                    if (this.options.onToken)
                                        this.options.onToken(new Token(this));
                                    this.lastTokEnd = this.end;
                                    this.lastTokStart = this.start;
                                    this.lastTokEndLoc = this.endLoc;
                                    this.lastTokStartLoc = this.startLoc;
                                    this.nextToken();
                                };
                                pp.getToken = function () {
                                    this.next();
                                    return new Token(this);
                                };
                                if (typeof Symbol !== 'undefined')
                                    pp[Symbol.iterator] = function () {
                                        var self = this;
                                        return {
                                            next: function next() {
                                                var token = self.getToken();
                                                return {
                                                    done: token.type === _tokentype.types.eof,
                                                    value: token
                                                };
                                            }
                                        };
                                    };
                                pp.setStrict = function (strict) {
                                    this.strict = strict;
                                    if (this.type !== _tokentype.types.num && this.type !== _tokentype.types.string)
                                        return;
                                    this.pos = this.start;
                                    if (this.options.locations) {
                                        while (this.pos < this.lineStart) {
                                            this.lineStart = this.input.lastIndexOf('\n', this.lineStart - 2) + 1;
                                            --this.curLine;
                                        }
                                    }
                                    this.nextToken();
                                };
                                pp.curContext = function () {
                                    return this.context[this.context.length - 1];
                                };
                                pp.nextToken = function () {
                                    var curContext = this.curContext();
                                    if (!curContext || !curContext.preserveSpace)
                                        this.skipSpace();
                                    this.start = this.pos;
                                    if (this.options.locations)
                                        this.startLoc = this.curPosition();
                                    if (this.pos >= this.input.length)
                                        return this.finishToken(_tokentype.types.eof);
                                    if (curContext.override)
                                        return curContext.override(this);
                                    else
                                        this.readToken(this.fullCharCodeAtPos());
                                };
                                pp.readToken = function (code) {
                                    if (_identifier.isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92)
                                        return this.readWord();
                                    return this.getTokenFromCode(code);
                                };
                                pp.fullCharCodeAtPos = function () {
                                    var code = this.input.charCodeAt(this.pos);
                                    if (code <= 55295 || code >= 57344)
                                        return code;
                                    var next = this.input.charCodeAt(this.pos + 1);
                                    return (code << 10) + next - 56613888;
                                };
                                pp.skipBlockComment = function () {
                                    var startLoc = this.options.onComment && this.curPosition();
                                    var start = this.pos, end = this.input.indexOf('*/', this.pos += 2);
                                    if (end === -1)
                                        this.raise(this.pos - 2, 'Unterminated comment');
                                    this.pos = end + 2;
                                    if (this.options.locations) {
                                        _whitespace.lineBreakG.lastIndex = start;
                                        var match = undefined;
                                        while ((match = _whitespace.lineBreakG.exec(this.input)) && match.index < this.pos) {
                                            ++this.curLine;
                                            this.lineStart = match.index + match[0].length;
                                        }
                                    }
                                    if (this.options.onComment)
                                        this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos, startLoc, this.curPosition());
                                };
                                pp.skipLineComment = function (startSkip) {
                                    var start = this.pos;
                                    var startLoc = this.options.onComment && this.curPosition();
                                    var ch = this.input.charCodeAt(this.pos += startSkip);
                                    while (this.pos < this.input.length && ch !== 10 && ch !== 13 && ch !== 8232 && ch !== 8233) {
                                        ++this.pos;
                                        ch = this.input.charCodeAt(this.pos);
                                    }
                                    if (this.options.onComment)
                                        this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos, startLoc, this.curPosition());
                                };
                                pp.skipSpace = function () {
                                    loop:
                                        while (this.pos < this.input.length) {
                                            var ch = this.input.charCodeAt(this.pos);
                                            switch (ch) {
                                            case 32:
                                            case 160:
                                                ++this.pos;
                                                break;
                                            case 13:
                                                if (this.input.charCodeAt(this.pos + 1) === 10) {
                                                    ++this.pos;
                                                }
                                            case 10:
                                            case 8232:
                                            case 8233:
                                                ++this.pos;
                                                if (this.options.locations) {
                                                    ++this.curLine;
                                                    this.lineStart = this.pos;
                                                }
                                                break;
                                            case 47:
                                                switch (this.input.charCodeAt(this.pos + 1)) {
                                                case 42:
                                                    this.skipBlockComment();
                                                    break;
                                                case 47:
                                                    this.skipLineComment(2);
                                                    break;
                                                default:
                                                    break loop;
                                                }
                                                break;
                                            default:
                                                if (ch > 8 && ch < 14 || ch >= 5760 && _whitespace.nonASCIIwhitespace.test(String.fromCharCode(ch))) {
                                                    ++this.pos;
                                                } else {
                                                    break loop;
                                                }
                                            }
                                        }
                                };
                                pp.finishToken = function (type, val) {
                                    this.end = this.pos;
                                    if (this.options.locations)
                                        this.endLoc = this.curPosition();
                                    var prevType = this.type;
                                    this.type = type;
                                    this.value = val;
                                    this.updateContext(prevType);
                                };
                                pp.readToken_dot = function () {
                                    var next = this.input.charCodeAt(this.pos + 1);
                                    if (next >= 48 && next <= 57)
                                        return this.readNumber(true);
                                    var next2 = this.input.charCodeAt(this.pos + 2);
                                    if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) {
                                        this.pos += 3;
                                        return this.finishToken(_tokentype.types.ellipsis);
                                    } else {
                                        ++this.pos;
                                        return this.finishToken(_tokentype.types.dot);
                                    }
                                };
                                pp.readToken_slash = function () {
                                    var next = this.input.charCodeAt(this.pos + 1);
                                    if (this.exprAllowed) {
                                        ++this.pos;
                                        return this.readRegexp();
                                    }
                                    if (next === 61)
                                        return this.finishOp(_tokentype.types.assign, 2);
                                    return this.finishOp(_tokentype.types.slash, 1);
                                };
                                pp.readToken_mult_modulo = function (code) {
                                    var next = this.input.charCodeAt(this.pos + 1);
                                    if (next === 61)
                                        return this.finishOp(_tokentype.types.assign, 2);
                                    return this.finishOp(code === 42 ? _tokentype.types.star : _tokentype.types.modulo, 1);
                                };
                                pp.readToken_pipe_amp = function (code) {
                                    var next = this.input.charCodeAt(this.pos + 1);
                                    if (next === code)
                                        return this.finishOp(code === 124 ? _tokentype.types.logicalOR : _tokentype.types.logicalAND, 2);
                                    if (next === 61)
                                        return this.finishOp(_tokentype.types.assign, 2);
                                    return this.finishOp(code === 124 ? _tokentype.types.bitwiseOR : _tokentype.types.bitwiseAND, 1);
                                };
                                pp.readToken_caret = function () {
                                    var next = this.input.charCodeAt(this.pos + 1);
                                    if (next === 61)
                                        return this.finishOp(_tokentype.types.assign, 2);
                                    return this.finishOp(_tokentype.types.bitwiseXOR, 1);
                                };
                                pp.readToken_plus_min = function (code) {
                                    var next = this.input.charCodeAt(this.pos + 1);
                                    if (next === code) {
                                        if (next == 45 && this.input.charCodeAt(this.pos + 2) == 62 && _whitespace.lineBreak.test(this.input.slice(this.lastTokEnd, this.pos))) {
                                            this.skipLineComment(3);
                                            this.skipSpace();
                                            return this.nextToken();
                                        }
                                        return this.finishOp(_tokentype.types.incDec, 2);
                                    }
                                    if (next === 61)
                                        return this.finishOp(_tokentype.types.assign, 2);
                                    return this.finishOp(_tokentype.types.plusMin, 1);
                                };
                                pp.readToken_lt_gt = function (code) {
                                    var next = this.input.charCodeAt(this.pos + 1);
                                    var size = 1;
                                    if (next === code) {
                                        size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;
                                        if (this.input.charCodeAt(this.pos + size) === 61)
                                            return this.finishOp(_tokentype.types.assign, size + 1);
                                        return this.finishOp(_tokentype.types.bitShift, size);
                                    }
                                    if (next == 33 && code == 60 && this.input.charCodeAt(this.pos + 2) == 45 && this.input.charCodeAt(this.pos + 3) == 45) {
                                        if (this.inModule)
                                            this.unexpected();
                                        this.skipLineComment(4);
                                        this.skipSpace();
                                        return this.nextToken();
                                    }
                                    if (next === 61)
                                        size = this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2;
                                    return this.finishOp(_tokentype.types.relational, size);
                                };
                                pp.readToken_eq_excl = function (code) {
                                    var next = this.input.charCodeAt(this.pos + 1);
                                    if (next === 61)
                                        return this.finishOp(_tokentype.types.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2);
                                    if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) {
                                        this.pos += 2;
                                        return this.finishToken(_tokentype.types.arrow);
                                    }
                                    return this.finishOp(code === 61 ? _tokentype.types.eq : _tokentype.types.prefix, 1);
                                };
                                pp.getTokenFromCode = function (code) {
                                    switch (code) {
                                    case 46:
                                        return this.readToken_dot();
                                    case 40:
                                        ++this.pos;
                                        return this.finishToken(_tokentype.types.parenL);
                                    case 41:
                                        ++this.pos;
                                        return this.finishToken(_tokentype.types.parenR);
                                    case 59:
                                        ++this.pos;
                                        return this.finishToken(_tokentype.types.semi);
                                    case 44:
                                        ++this.pos;
                                        return this.finishToken(_tokentype.types.comma);
                                    case 91:
                                        ++this.pos;
                                        return this.finishToken(_tokentype.types.bracketL);
                                    case 93:
                                        ++this.pos;
                                        return this.finishToken(_tokentype.types.bracketR);
                                    case 123:
                                        ++this.pos;
                                        return this.finishToken(_tokentype.types.braceL);
                                    case 125:
                                        ++this.pos;
                                        return this.finishToken(_tokentype.types.braceR);
                                    case 58:
                                        ++this.pos;
                                        return this.finishToken(_tokentype.types.colon);
                                    case 63:
                                        ++this.pos;
                                        return this.finishToken(_tokentype.types.question);
                                    case 96:
                                        if (this.options.ecmaVersion < 6)
                                            break;
                                        ++this.pos;
                                        return this.finishToken(_tokentype.types.backQuote);
                                    case 48:
                                        var next = this.input.charCodeAt(this.pos + 1);
                                        if (next === 120 || next === 88)
                                            return this.readRadixNumber(16);
                                        if (this.options.ecmaVersion >= 6) {
                                            if (next === 111 || next === 79)
                                                return this.readRadixNumber(8);
                                            if (next === 98 || next === 66)
                                                return this.readRadixNumber(2);
                                        }
                                    case 49:
                                    case 50:
                                    case 51:
                                    case 52:
                                    case 53:
                                    case 54:
                                    case 55:
                                    case 56:
                                    case 57:
                                        return this.readNumber(false);
                                    case 34:
                                    case 39:
                                        return this.readString(code);
                                    case 47:
                                        return this.readToken_slash();
                                    case 37:
                                    case 42:
                                        return this.readToken_mult_modulo(code);
                                    case 124:
                                    case 38:
                                        return this.readToken_pipe_amp(code);
                                    case 94:
                                        return this.readToken_caret();
                                    case 43:
                                    case 45:
                                        return this.readToken_plus_min(code);
                                    case 60:
                                    case 62:
                                        return this.readToken_lt_gt(code);
                                    case 61:
                                    case 33:
                                        return this.readToken_eq_excl(code);
                                    case 126:
                                        return this.finishOp(_tokentype.types.prefix, 1);
                                    }
                                    this.raise(this.pos, 'Unexpected character \'' + codePointToString(code) + '\'');
                                };
                                pp.finishOp = function (type, size) {
                                    var str = this.input.slice(this.pos, this.pos + size);
                                    this.pos += size;
                                    return this.finishToken(type, str);
                                };
                                function tryCreateRegexp(src, flags, throwErrorAt, parser) {
                                    try {
                                        return new RegExp(src, flags);
                                    } catch (e) {
                                        if (throwErrorAt !== undefined) {
                                            if (e instanceof SyntaxError)
                                                parser.raise(throwErrorAt, 'Error parsing regular expression: ' + e.message);
                                            throw e;
                                        }
                                    }
                                }
                                var regexpUnicodeSupport = !!tryCreateRegexp('\uFFFF', 'u');
                                pp.readRegexp = function () {
                                    var _this = this;
                                    var escaped = undefined, inClass = undefined, start = this.pos;
                                    for (;;) {
                                        if (this.pos >= this.input.length)
                                            this.raise(start, 'Unterminated regular expression');
                                        var ch = this.input.charAt(this.pos);
                                        if (_whitespace.lineBreak.test(ch))
                                            this.raise(start, 'Unterminated regular expression');
                                        if (!escaped) {
                                            if (ch === '[')
                                                inClass = true;
                                            else if (ch === ']' && inClass)
                                                inClass = false;
                                            else if (ch === '/' && !inClass)
                                                break;
                                            escaped = ch === '\\';
                                        } else
                                            escaped = false;
                                        ++this.pos;
                                    }
                                    var content = this.input.slice(start, this.pos);
                                    ++this.pos;
                                    var mods = this.readWord1();
                                    var tmp = content;
                                    if (mods) {
                                        var validFlags = /^[gim]*$/;
                                        if (this.options.ecmaVersion >= 6)
                                            validFlags = /^[gimuy]*$/;
                                        if (!validFlags.test(mods))
                                            this.raise(start, 'Invalid regular expression flag');
                                        if (mods.indexOf('u') >= 0 && !regexpUnicodeSupport) {
                                            tmp = tmp.replace(/\\u\{([0-9a-fA-F]+)\}/g, function (_match, code, offset) {
                                                code = Number('0x' + code);
                                                if (code > 1114111)
                                                    _this.raise(start + offset + 3, 'Code point out of bounds');
                                                return 'x';
                                            });
                                            tmp = tmp.replace(/\\u([a-fA-F0-9]{4})|[\uD800-\uDBFF][\uDC00-\uDFFF]/g, 'x');
                                        }
                                    }
                                    var value = null;
                                    if (!isRhino) {
                                        tryCreateRegexp(tmp, undefined, start, this);
                                        value = tryCreateRegexp(content, mods);
                                    }
                                    return this.finishToken(_tokentype.types.regexp, {
                                        pattern: content,
                                        flags: mods,
                                        value: value
                                    });
                                };
                                pp.readInt = function (radix, len) {
                                    var start = this.pos, total = 0;
                                    for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {
                                        var code = this.input.charCodeAt(this.pos), val = undefined;
                                        if (code >= 97)
                                            val = code - 97 + 10;
                                        else if (code >= 65)
                                            val = code - 65 + 10;
                                        else if (code >= 48 && code <= 57)
                                            val = code - 48;
                                        else
                                            val = Infinity;
                                        if (val >= radix)
                                            break;
                                        ++this.pos;
                                        total = total * radix + val;
                                    }
                                    if (this.pos === start || len != null && this.pos - start !== len)
                                        return null;
                                    return total;
                                };
                                pp.readRadixNumber = function (radix) {
                                    this.pos += 2;
                                    var val = this.readInt(radix);
                                    if (val == null)
                                        this.raise(this.start + 2, 'Expected number in radix ' + radix);
                                    if (_identifier.isIdentifierStart(this.fullCharCodeAtPos()))
                                        this.raise(this.pos, 'Identifier directly after number');
                                    return this.finishToken(_tokentype.types.num, val);
                                };
                                pp.readNumber = function (startsWithDot) {
                                    var start = this.pos, isFloat = false, octal = this.input.charCodeAt(this.pos) === 48;
                                    if (!startsWithDot && this.readInt(10) === null)
                                        this.raise(start, 'Invalid number');
                                    var next = this.input.charCodeAt(this.pos);
                                    if (next === 46) {
                                        ++this.pos;
                                        this.readInt(10);
                                        isFloat = true;
                                        next = this.input.charCodeAt(this.pos);
                                    }
                                    if (next === 69 || next === 101) {
                                        next = this.input.charCodeAt(++this.pos);
                                        if (next === 43 || next === 45)
                                            ++this.pos;
                                        if (this.readInt(10) === null)
                                            this.raise(start, 'Invalid number');
                                        isFloat = true;
                                    }
                                    if (_identifier.isIdentifierStart(this.fullCharCodeAtPos()))
                                        this.raise(this.pos, 'Identifier directly after number');
                                    var str = this.input.slice(start, this.pos), val = undefined;
                                    if (isFloat)
                                        val = parseFloat(str);
                                    else if (!octal || str.length === 1)
                                        val = parseInt(str, 10);
                                    else if (/[89]/.test(str) || this.strict)
                                        this.raise(start, 'Invalid number');
                                    else
                                        val = parseInt(str, 8);
                                    return this.finishToken(_tokentype.types.num, val);
                                };
                                pp.readCodePoint = function () {
                                    var ch = this.input.charCodeAt(this.pos), code = undefined;
                                    if (ch === 123) {
                                        if (this.options.ecmaVersion < 6)
                                            this.unexpected();
                                        var codePos = ++this.pos;
                                        code = this.readHexChar(this.input.indexOf('}', this.pos) - this.pos);
                                        ++this.pos;
                                        if (code > 1114111)
                                            this.raise(codePos, 'Code point out of bounds');
                                    } else {
                                        code = this.readHexChar(4);
                                    }
                                    return code;
                                };
                                function codePointToString(code) {
                                    if (code <= 65535)
                                        return String.fromCharCode(code);
                                    code -= 65536;
                                    return String.fromCharCode((code >> 10) + 55296, (code & 1023) + 56320);
                                }
                                pp.readString = function (quote) {
                                    var out = '', chunkStart = ++this.pos;
                                    for (;;) {
                                        if (this.pos >= this.input.length)
                                            this.raise(this.start, 'Unterminated string constant');
                                        var ch = this.input.charCodeAt(this.pos);
                                        if (ch === quote)
                                            break;
                                        if (ch === 92) {
                                            out += this.input.slice(chunkStart, this.pos);
                                            out += this.readEscapedChar(false);
                                            chunkStart = this.pos;
                                        } else {
                                            if (_whitespace.isNewLine(ch))
                                                this.raise(this.start, 'Unterminated string constant');
                                            ++this.pos;
                                        }
                                    }
                                    out += this.input.slice(chunkStart, this.pos++);
                                    return this.finishToken(_tokentype.types.string, out);
                                };
                                pp.readTmplToken = function () {
                                    var out = '', chunkStart = this.pos;
                                    for (;;) {
                                        if (this.pos >= this.input.length)
                                            this.raise(this.start, 'Unterminated template');
                                        var ch = this.input.charCodeAt(this.pos);
                                        if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123) {
                                            if (this.pos === this.start && this.type === _tokentype.types.template) {
                                                if (ch === 36) {
                                                    this.pos += 2;
                                                    return this.finishToken(_tokentype.types.dollarBraceL);
                                                } else {
                                                    ++this.pos;
                                                    return this.finishToken(_tokentype.types.backQuote);
                                                }
                                            }
                                            out += this.input.slice(chunkStart, this.pos);
                                            return this.finishToken(_tokentype.types.template, out);
                                        }
                                        if (ch === 92) {
                                            out += this.input.slice(chunkStart, this.pos);
                                            out += this.readEscapedChar(true);
                                            chunkStart = this.pos;
                                        } else if (_whitespace.isNewLine(ch)) {
                                            out += this.input.slice(chunkStart, this.pos);
                                            ++this.pos;
                                            switch (ch) {
                                            case 13:
                                                if (this.input.charCodeAt(this.pos) === 10)
                                                    ++this.pos;
                                            case 10:
                                                out += '\n';
                                                break;
                                            default:
                                                out += String.fromCharCode(ch);
                                                break;
                                            }
                                            if (this.options.locations) {
                                                ++this.curLine;
                                                this.lineStart = this.pos;
                                            }
                                            chunkStart = this.pos;
                                        } else {
                                            ++this.pos;
                                        }
                                    }
                                };
                                pp.readEscapedChar = function (inTemplate) {
                                    var ch = this.input.charCodeAt(++this.pos);
                                    ++this.pos;
                                    switch (ch) {
                                    case 110:
                                        return '\n';
                                    case 114:
                                        return '\r';
                                    case 120:
                                        return String.fromCharCode(this.readHexChar(2));
                                    case 117:
                                        return codePointToString(this.readCodePoint());
                                    case 116:
                                        return '\t';
                                    case 98:
                                        return '\b';
                                    case 118:
                                        return '\x0B';
                                    case 102:
                                        return '\f';
                                    case 13:
                                        if (this.input.charCodeAt(this.pos) === 10)
                                            ++this.pos;
                                    case 10:
                                        if (this.options.locations) {
                                            this.lineStart = this.pos;
                                            ++this.curLine;
                                        }
                                        return '';
                                    default:
                                        if (ch >= 48 && ch <= 55) {
                                            var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];
                                            var octal = parseInt(octalStr, 8);
                                            if (octal > 255) {
                                                octalStr = octalStr.slice(0, -1);
                                                octal = parseInt(octalStr, 8);
                                            }
                                            if (octalStr !== '0' && (this.strict || inTemplate)) {
                                                this.raise(this.pos - 2, 'Octal literal in strict mode');
                                            }
                                            this.pos += octalStr.length - 1;
                                            return String.fromCharCode(octal);
                                        }
                                        return String.fromCharCode(ch);
                                    }
                                };
                                pp.readHexChar = function (len) {
                                    var codePos = this.pos;
                                    var n = this.readInt(16, len);
                                    if (n === null)
                                        this.raise(codePos, 'Bad character escape sequence');
                                    return n;
                                };
                                pp.readWord1 = function () {
                                    this.containsEsc = false;
                                    var word = '', first = true, chunkStart = this.pos;
                                    var astral = this.options.ecmaVersion >= 6;
                                    while (this.pos < this.input.length) {
                                        var ch = this.fullCharCodeAtPos();
                                        if (_identifier.isIdentifierChar(ch, astral)) {
                                            this.pos += ch <= 65535 ? 1 : 2;
                                        } else if (ch === 92) {
                                            this.containsEsc = true;
                                            word += this.input.slice(chunkStart, this.pos);
                                            var escStart = this.pos;
                                            if (this.input.charCodeAt(++this.pos) != 117)
                                                this.raise(this.pos, 'Expecting Unicode escape sequence \\uXXXX');
                                            ++this.pos;
                                            var esc = this.readCodePoint();
                                            if (!(first ? _identifier.isIdentifierStart : _identifier.isIdentifierChar)(esc, astral))
                                                this.raise(escStart, 'Invalid Unicode escape');
                                            word += codePointToString(esc);
                                            chunkStart = this.pos;
                                        } else {
                                            break;
                                        }
                                        first = false;
                                    }
                                    return word + this.input.slice(chunkStart, this.pos);
                                };
                                pp.readWord = function () {
                                    var word = this.readWord1();
                                    var type = _tokentype.types.name;
                                    if ((this.options.ecmaVersion >= 6 || !this.containsEsc) && this.keywords.test(word))
                                        type = _tokentype.keywords[word];
                                    return this.finishToken(type, word);
                                };
                            },
                            {
                                './identifier': 2,
                                './locutil': 5,
                                './state': 10,
                                './tokentype': 14,
                                './whitespace': 16
                            }
                        ],
                        14: [
                            function (_dereq_, module, exports) {
                                'use strict';
                                exports.__esModule = true;
                                function _classCallCheck(instance, Constructor) {
                                    if (!(instance instanceof Constructor)) {
                                        throw new TypeError('Cannot call a class as a function');
                                    }
                                }
                                var TokenType = function TokenType(label) {
                                    var conf = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
                                    _classCallCheck(this, TokenType);
                                    this.label = label;
                                    this.keyword = conf.keyword;
                                    this.beforeExpr = !!conf.beforeExpr;
                                    this.startsExpr = !!conf.startsExpr;
                                    this.isLoop = !!conf.isLoop;
                                    this.isAssign = !!conf.isAssign;
                                    this.prefix = !!conf.prefix;
                                    this.postfix = !!conf.postfix;
                                    this.binop = conf.binop || null;
                                    this.updateContext = null;
                                };
                                exports.TokenType = TokenType;
                                function binop(name, prec) {
                                    return new TokenType(name, {
                                        beforeExpr: true,
                                        binop: prec
                                    });
                                }
                                var beforeExpr = { beforeExpr: true }, startsExpr = { startsExpr: true };
                                var types = {
                                    num: new TokenType('num', startsExpr),
                                    regexp: new TokenType('regexp', startsExpr),
                                    string: new TokenType('string', startsExpr),
                                    name: new TokenType('name', startsExpr),
                                    eof: new TokenType('eof'),
                                    bracketL: new TokenType('[', {
                                        beforeExpr: true,
                                        startsExpr: true
                                    }),
                                    bracketR: new TokenType(']'),
                                    braceL: new TokenType('{', {
                                        beforeExpr: true,
                                        startsExpr: true
                                    }),
                                    braceR: new TokenType('}'),
                                    parenL: new TokenType('(', {
                                        beforeExpr: true,
                                        startsExpr: true
                                    }),
                                    parenR: new TokenType(')'),
                                    comma: new TokenType(',', beforeExpr),
                                    semi: new TokenType(';', beforeExpr),
                                    colon: new TokenType(':', beforeExpr),
                                    dot: new TokenType('.'),
                                    question: new TokenType('?', beforeExpr),
                                    arrow: new TokenType('=>', beforeExpr),
                                    template: new TokenType('template'),
                                    ellipsis: new TokenType('...', beforeExpr),
                                    backQuote: new TokenType('`', startsExpr),
                                    dollarBraceL: new TokenType('${', {
                                        beforeExpr: true,
                                        startsExpr: true
                                    }),
                                    eq: new TokenType('=', {
                                        beforeExpr: true,
                                        isAssign: true
                                    }),
                                    assign: new TokenType('_=', {
                                        beforeExpr: true,
                                        isAssign: true
                                    }),
                                    incDec: new TokenType('++/--', {
                                        prefix: true,
                                        postfix: true,
                                        startsExpr: true
                                    }),
                                    prefix: new TokenType('prefix', {
                                        beforeExpr: true,
                                        prefix: true,
                                        startsExpr: true
                                    }),
                                    logicalOR: binop('||', 1),
                                    logicalAND: binop('&&', 2),
                                    bitwiseOR: binop('|', 3),
                                    bitwiseXOR: binop('^', 4),
                                    bitwiseAND: binop('&', 5),
                                    equality: binop('==/!=', 6),
                                    relational: binop('</>', 7),
                                    bitShift: binop('<</>>', 8),
                                    plusMin: new TokenType('+/-', {
                                        beforeExpr: true,
                                        binop: 9,
                                        prefix: true,
                                        startsExpr: true
                                    }),
                                    modulo: binop('%', 10),
                                    star: binop('*', 10),
                                    slash: binop('/', 10)
                                };
                                exports.types = types;
                                var keywords = {};
                                exports.keywords = keywords;
                                function kw(name) {
                                    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
                                    options.keyword = name;
                                    keywords[name] = types['_' + name] = new TokenType(name, options);
                                }
                                kw('break');
                                kw('case', beforeExpr);
                                kw('catch');
                                kw('continue');
                                kw('debugger');
                                kw('default', beforeExpr);
                                kw('do', {
                                    isLoop: true,
                                    beforeExpr: true
                                });
                                kw('else', beforeExpr);
                                kw('finally');
                                kw('for', { isLoop: true });
                                kw('function', startsExpr);
                                kw('if');
                                kw('return', beforeExpr);
                                kw('switch');
                                kw('throw', beforeExpr);
                                kw('try');
                                kw('var');
                                kw('let');
                                kw('const');
                                kw('while', { isLoop: true });
                                kw('with');
                                kw('new', {
                                    beforeExpr: true,
                                    startsExpr: true
                                });
                                kw('this', startsExpr);
                                kw('super', startsExpr);
                                kw('class');
                                kw('extends', beforeExpr);
                                kw('export');
                                kw('import');
                                kw('yield', {
                                    beforeExpr: true,
                                    startsExpr: true
                                });
                                kw('null', startsExpr);
                                kw('true', startsExpr);
                                kw('false', startsExpr);
                                kw('in', {
                                    beforeExpr: true,
                                    binop: 7
                                });
                                kw('instanceof', {
                                    beforeExpr: true,
                                    binop: 7
                                });
                                kw('typeof', {
                                    beforeExpr: true,
                                    prefix: true,
                                    startsExpr: true
                                });
                                kw('void', {
                                    beforeExpr: true,
                                    prefix: true,
                                    startsExpr: true
                                });
                                kw('delete', {
                                    beforeExpr: true,
                                    prefix: true,
                                    startsExpr: true
                                });
                            },
                            {}
                        ],
                        15: [
                            function (_dereq_, module, exports) {
                                'use strict';
                                exports.__esModule = true;
                                exports.isArray = isArray;
                                exports.has = has;
                                function isArray(obj) {
                                    return Object.prototype.toString.call(obj) === '[object Array]';
                                }
                                function has(obj, propName) {
                                    return Object.prototype.hasOwnProperty.call(obj, propName);
                                }
                            },
                            {}
                        ],
                        16: [
                            function (_dereq_, module, exports) {
                                'use strict';
                                exports.__esModule = true;
                                exports.isNewLine = isNewLine;
                                var lineBreak = /\r\n?|\n|\u2028|\u2029/;
                                exports.lineBreak = lineBreak;
                                var lineBreakG = new RegExp(lineBreak.source, 'g');
                                exports.lineBreakG = lineBreakG;
                                function isNewLine(code) {
                                    return code === 10 || code === 13 || code === 8232 || code == 8233;
                                }
                                var nonASCIIwhitespace = /[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/;
                                exports.nonASCIIwhitespace = nonASCIIwhitespace;
                            },
                            {}
                        ]
                    }, {}, [3])(3);
                }));
            }.call(this, typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : {}));
        },
        {}
    ],
    6: [
        function (require, module, exports) {
            module.exports = function (arr, fn, self) {
                if (arr.filter)
                    return arr.filter(fn, self);
                if (void 0 === arr || null === arr)
                    throw new TypeError();
                if ('function' != typeof fn)
                    throw new TypeError();
                var ret = [];
                for (var i = 0; i < arr.length; i++) {
                    if (!hasOwn.call(arr, i))
                        continue;
                    var val = arr[i];
                    if (fn.call(self, val, i, arr))
                        ret.push(val);
                }
                return ret;
            };
            var hasOwn = Object.prototype.hasOwnProperty;
        },
        {}
    ],
    7: [
        function (require, module, exports) {
            'use strict';
            module.exports = function forEach(ary, callback, thisArg) {
                if (ary.forEach) {
                    ary.forEach(callback, thisArg);
                    return;
                }
                for (var i = 0; i < ary.length; i += 1) {
                    callback.call(thisArg, ary[i], i, ary);
                }
            };
        },
        {}
    ],
    8: [
        function (require, module, exports) {
            module.exports = function (xs, f) {
                if (xs.map)
                    return xs.map(f);
                var res = [];
                for (var i = 0; i < xs.length; i++) {
                    var x = xs[i];
                    if (hasOwn.call(xs, i))
                        res.push(f(x, i, xs));
                }
                return res;
            };
            var hasOwn = Object.prototype.hasOwnProperty;
        },
        {}
    ],
    9: [
        function (require, module, exports) {
            'use strict';
            var slice = Array.prototype.slice;
            module.exports = function reduceRight(ary, callback) {
                if (ary.reduceRight) {
                    return ary.reduceRight.apply(ary, slice.apply(arguments).slice(1));
                }
                if ('function' !== typeof callback) {
                    throw new TypeError(callback + ' is not a function');
                }
                var t = Object(ary), len = t.length >>> 0, k = len - 1, value;
                if (arguments.length >= 3) {
                    value = arguments[2];
                } else {
                    while (k >= 0 && !(k in t)) {
                        k--;
                    }
                    if (k < 0) {
                        throw new TypeError('Reduce of empty array with no initial value');
                    }
                    value = t[k--];
                }
                for (; k >= 0; k--) {
                    if (k in t) {
                        value = callback(value, t[k], k, t);
                    }
                }
                return value;
            };
        },
        {}
    ],
    10: [
        function (require, module, exports) {
            var hasOwn = Object.prototype.hasOwnProperty;
            module.exports = function (xs, f, acc) {
                var hasAcc = arguments.length >= 3;
                if (hasAcc && xs.reduce)
                    return xs.reduce(f, acc);
                if (xs.reduce)
                    return xs.reduce(f);
                for (var i = 0; i < xs.length; i++) {
                    if (!hasOwn.call(xs, i))
                        continue;
                    if (!hasAcc) {
                        acc = xs[i];
                        hasAcc = true;
                        continue;
                    }
                    acc = f(acc, xs[i], i);
                }
                return acc;
            };
        },
        {}
    ],
    11: [
        function (require, module, exports) {
            'use strict';
            module.exports = function some(ary, callback, thisArg) {
                if (ary.some) {
                    return ary.some(callback, thisArg);
                }
                for (var i = 0; i < ary.length; i += 1) {
                    if (callback.call(thisArg, ary[i], i, ary)) {
                        return true;
                    }
                }
                return false;
            };
        },
        {}
    ],
    12: [
        function (require, module, exports) {
            var util = require('util/');
            var pSlice = Array.prototype.slice;
            var hasOwn = Object.prototype.hasOwnProperty;
            var assert = module.exports = ok;
            assert.AssertionError = function AssertionError(options) {
                this.name = 'AssertionError';
                this.actual = options.actual;
                this.expected = options.expected;
                this.operator = options.operator;
                if (options.message) {
                    this.message = options.message;
                    this.generatedMessage = false;
                } else {
                    this.message = getMessage(this);
                    this.generatedMessage = true;
                }
                var stackStartFunction = options.stackStartFunction || fail;
                if (Error.captureStackTrace) {
                    Error.captureStackTrace(this, stackStartFunction);
                } else {
                    var err = new Error();
                    if (err.stack) {
                        var out = err.stack;
                        var fn_name = stackStartFunction.name;
                        var idx = out.indexOf('\n' + fn_name);
                        if (idx >= 0) {
                            var next_line = out.indexOf('\n', idx + 1);
                            out = out.substring(next_line + 1);
                        }
                        this.stack = out;
                    }
                }
            };
            util.inherits(assert.AssertionError, Error);
            function replacer(key, value) {
                if (util.isUndefined(value)) {
                    return '' + value;
                }
                if (util.isNumber(value) && !isFinite(value)) {
                    return value.toString();
                }
                if (util.isFunction(value) || util.isRegExp(value)) {
                    return value.toString();
                }
                return value;
            }
            function truncate(s, n) {
                if (util.isString(s)) {
                    return s.length < n ? s : s.slice(0, n);
                } else {
                    return s;
                }
            }
            function getMessage(self) {
                return truncate(JSON.stringify(self.actual, replacer), 128) + ' ' + self.operator + ' ' + truncate(JSON.stringify(self.expected, replacer), 128);
            }
            function fail(actual, expected, message, operator, stackStartFunction) {
                throw new assert.AssertionError({
                    message: message,
                    actual: actual,
                    expected: expected,
                    operator: operator,
                    stackStartFunction: stackStartFunction
                });
            }
            assert.fail = fail;
            function ok(value, message) {
                if (!value)
                    fail(value, true, message, '==', assert.ok);
            }
            assert.ok = ok;
            assert.equal = function equal(actual, expected, message) {
                if (actual != expected)
                    fail(actual, expected, message, '==', assert.equal);
            };
            assert.notEqual = function notEqual(actual, expected, message) {
                if (actual == expected) {
                    fail(actual, expected, message, '!=', assert.notEqual);
                }
            };
            assert.deepEqual = function deepEqual(actual, expected, message) {
                if (!_deepEqual(actual, expected)) {
                    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
                }
            };
            function _deepEqual(actual, expected) {
                if (actual === expected) {
                    return true;
                } else if (util.isBuffer(actual) && util.isBuffer(expected)) {
                    if (actual.length != expected.length)
                        return false;
                    for (var i = 0; i < actual.length; i++) {
                        if (actual[i] !== expected[i])
                            return false;
                    }
                    return true;
                } else if (util.isDate(actual) && util.isDate(expected)) {
                    return actual.getTime() === expected.getTime();
                } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
                    return actual.source === expected.source && actual.global === expected.global && actual.multiline === expected.multiline && actual.lastIndex === expected.lastIndex && actual.ignoreCase === expected.ignoreCase;
                } else if (!util.isObject(actual) && !util.isObject(expected)) {
                    return actual == expected;
                } else {
                    return objEquiv(actual, expected);
                }
            }
            function isArguments(object) {
                return Object.prototype.toString.call(object) == '[object Arguments]';
            }
            function objEquiv(a, b) {
                if (util.isNullOrUndefined(a) || util.isNullOrUndefined(b))
                    return false;
                if (a.prototype !== b.prototype)
                    return false;
                if (util.isPrimitive(a) || util.isPrimitive(b)) {
                    return a === b;
                }
                var aIsArgs = isArguments(a), bIsArgs = isArguments(b);
                if (aIsArgs && !bIsArgs || !aIsArgs && bIsArgs)
                    return false;
                if (aIsArgs) {
                    a = pSlice.call(a);
                    b = pSlice.call(b);
                    return _deepEqual(a, b);
                }
                var ka = objectKeys(a), kb = objectKeys(b), key, i;
                if (ka.length != kb.length)
                    return false;
                ka.sort();
                kb.sort();
                for (i = ka.length - 1; i >= 0; i--) {
                    if (ka[i] != kb[i])
                        return false;
                }
                for (i = ka.length - 1; i >= 0; i--) {
                    key = ka[i];
                    if (!_deepEqual(a[key], b[key]))
                        return false;
                }
                return true;
            }
            assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
                if (_deepEqual(actual, expected)) {
                    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
                }
            };
            assert.strictEqual = function strictEqual(actual, expected, message) {
                if (actual !== expected) {
                    fail(actual, expected, message, '===', assert.strictEqual);
                }
            };
            assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
                if (actual === expected) {
                    fail(actual, expected, message, '!==', assert.notStrictEqual);
                }
            };
            function expectedException(actual, expected) {
                if (!actual || !expected) {
                    return false;
                }
                if (Object.prototype.toString.call(expected) == '[object RegExp]') {
                    return expected.test(actual);
                } else if (actual instanceof expected) {
                    return true;
                } else if (expected.call({}, actual) === true) {
                    return true;
                }
                return false;
            }
            function _throws(shouldThrow, block, expected, message) {
                var actual;
                if (util.isString(expected)) {
                    message = expected;
                    expected = null;
                }
                try {
                    block();
                } catch (e) {
                    actual = e;
                }
                message = (expected && expected.name ? ' (' + expected.name + ').' : '.') + (message ? ' ' + message : '.');
                if (shouldThrow && !actual) {
                    fail(actual, expected, 'Missing expected exception' + message);
                }
                if (!shouldThrow && expectedException(actual, expected)) {
                    fail(actual, expected, 'Got unwanted exception' + message);
                }
                if (shouldThrow && actual && expected && !expectedException(actual, expected) || !shouldThrow && actual) {
                    throw actual;
                }
            }
            assert.throws = function (block, error, message) {
                _throws.apply(this, [true].concat(pSlice.call(arguments)));
            };
            assert.doesNotThrow = function (block, message) {
                _throws.apply(this, [false].concat(pSlice.call(arguments)));
            };
            assert.ifError = function (err) {
                if (err) {
                    throw err;
                }
            };
            var objectKeys = Object.keys || function (obj) {
                var keys = [];
                for (var key in obj) {
                    if (hasOwn.call(obj, key))
                        keys.push(key);
                }
                return keys;
            };
        },
        { 'util/': 356 }
    ],
    13: [
        function (require, module, exports) {
            module.exports = function (it) {
                if (typeof it != 'function')
                    throw TypeError(it + ' is not a function!');
                return it;
            };
        },
        {}
    ],
    14: [
        function (require, module, exports) {
            var cof = require('./_cof');
            module.exports = function (it, msg) {
                if (typeof it != 'number' && cof(it) != 'Number')
                    throw TypeError(msg);
                return +it;
            };
        },
        { './_cof': 28 }
    ],
    15: [
        function (require, module, exports) {
            var UNSCOPABLES = require('./_wks')('unscopables'), ArrayProto = Array.prototype;
            if (ArrayProto[UNSCOPABLES] == undefined)
                require('./_hide')(ArrayProto, UNSCOPABLES, {});
            module.exports = function (key) {
                ArrayProto[UNSCOPABLES][key] = true;
            };
        },
        {
            './_hide': 50,
            './_wks': 126
        }
    ],
    16: [
        function (require, module, exports) {
            module.exports = function (it, Constructor, name, forbiddenField) {
                if (!(it instanceof Constructor) || forbiddenField !== undefined && forbiddenField in it) {
                    throw TypeError(name + ': incorrect invocation!');
                }
                return it;
            };
        },
        {}
    ],
    17: [
        function (require, module, exports) {
            var isObject = require('./_is-object');
            module.exports = function (it) {
                if (!isObject(it))
                    throw TypeError(it + ' is not an object!');
                return it;
            };
        },
        { './_is-object': 59 }
    ],
    18: [
        function (require, module, exports) {
            'use strict';
            var toObject = require('./_to-object'), toIndex = require('./_to-index'), toLength = require('./_to-length');
            module.exports = [].copyWithin || function copyWithin(target, start) {
                var O = toObject(this), len = toLength(O.length), to = toIndex(target, len), from = toIndex(start, len), end = arguments.length > 2 ? arguments[2] : undefined, count = Math.min((end === undefined ? len : toIndex(end, len)) - from, len - to), inc = 1;
                if (from < to && to < from + count) {
                    inc = -1;
                    from += count - 1;
                    to += count - 1;
                }
                while (count-- > 0) {
                    if (from in O)
                        O[to] = O[from];
                    else
                        delete O[to];
                    to += inc;
                    from += inc;
                }
                return O;
            };
        },
        {
            './_to-index': 114,
            './_to-length': 117,
            './_to-object': 118
        }
    ],
    19: [
        function (require, module, exports) {
            'use strict';
            var toObject = require('./_to-object'), toIndex = require('./_to-index'), toLength = require('./_to-length');
            module.exports = function fill(value) {
                var O = toObject(this), length = toLength(O.length), aLen = arguments.length, index = toIndex(aLen > 1 ? arguments[1] : undefined, length), end = aLen > 2 ? arguments[2] : undefined, endPos = end === undefined ? length : toIndex(end, length);
                while (endPos > index)
                    O[index++] = value;
                return O;
            };
        },
        {
            './_to-index': 114,
            './_to-length': 117,
            './_to-object': 118
        }
    ],
    20: [
        function (require, module, exports) {
            var forOf = require('./_for-of');
            module.exports = function (iter, ITERATOR) {
                var result = [];
                forOf(iter, false, result.push, result, ITERATOR);
                return result;
            };
        },
        { './_for-of': 47 }
    ],
    21: [
        function (require, module, exports) {
            var toIObject = require('./_to-iobject'), toLength = require('./_to-length'), toIndex = require('./_to-index');
            module.exports = function (IS_INCLUDES) {
                return function ($this, el, fromIndex) {
                    var O = toIObject($this), length = toLength(O.length), index = toIndex(fromIndex, length), value;
                    if (IS_INCLUDES && el != el)
                        while (length > index) {
                            value = O[index++];
                            if (value != value)
                                return true;
                        }
                    else
                        for (; length > index; index++)
                            if (IS_INCLUDES || index in O) {
                                if (O[index] === el)
                                    return IS_INCLUDES || index || 0;
                            }
                    return !IS_INCLUDES && -1;
                };
            };
        },
        {
            './_to-index': 114,
            './_to-iobject': 116,
            './_to-length': 117
        }
    ],
    22: [
        function (require, module, exports) {
            var ctx = require('./_ctx'), IObject = require('./_iobject'), toObject = require('./_to-object'), toLength = require('./_to-length'), asc = require('./_array-species-create');
            module.exports = function (TYPE, $create) {
                var IS_MAP = TYPE == 1, IS_FILTER = TYPE == 2, IS_SOME = TYPE == 3, IS_EVERY = TYPE == 4, IS_FIND_INDEX = TYPE == 6, NO_HOLES = TYPE == 5 || IS_FIND_INDEX, create = $create || asc;
                return function ($this, callbackfn, that) {
                    var O = toObject($this), self = IObject(O), f = ctx(callbackfn, that, 3), length = toLength(self.length), index = 0, result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined, val, res;
                    for (; length > index; index++)
                        if (NO_HOLES || index in self) {
                            val = self[index];
                            res = f(val, index, O);
                            if (TYPE) {
                                if (IS_MAP)
                                    result[index] = res;
                                else if (res)
                                    switch (TYPE) {
                                    case 3:
                                        return true;
                                    case 5:
                                        return val;
                                    case 6:
                                        return index;
                                    case 2:
                                        result.push(val);
                                    }
                                else if (IS_EVERY)
                                    return false;
                            }
                        }
                    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
                };
            };
        },
        {
            './_array-species-create': 25,
            './_ctx': 35,
            './_iobject': 55,
            './_to-length': 117,
            './_to-object': 118
        }
    ],
    23: [
        function (require, module, exports) {
            var aFunction = require('./_a-function'), toObject = require('./_to-object'), IObject = require('./_iobject'), toLength = require('./_to-length');
            module.exports = function (that, callbackfn, aLen, memo, isRight) {
                aFunction(callbackfn);
                var O = toObject(that), self = IObject(O), length = toLength(O.length), index = isRight ? length - 1 : 0, i = isRight ? -1 : 1;
                if (aLen < 2)
                    for (;;) {
                        if (index in self) {
                            memo = self[index];
                            index += i;
                            break;
                        }
                        index += i;
                        if (isRight ? index < 0 : length <= index) {
                            throw TypeError('Reduce of empty array with no initial value');
                        }
                    }
                for (; isRight ? index >= 0 : length > index; index += i)
                    if (index in self) {
                        memo = callbackfn(memo, self[index], index, O);
                    }
                return memo;
            };
        },
        {
            './_a-function': 13,
            './_iobject': 55,
            './_to-length': 117,
            './_to-object': 118
        }
    ],
    24: [
        function (require, module, exports) {
            var isObject = require('./_is-object'), isArray = require('./_is-array'), SPECIES = require('./_wks')('species');
            module.exports = function (original) {
                var C;
                if (isArray(original)) {
                    C = original.constructor;
                    if (typeof C == 'function' && (C === Array || isArray(C.prototype)))
                        C = undefined;
                    if (isObject(C)) {
                        C = C[SPECIES];
                        if (C === null)
                            C = undefined;
                    }
                }
                return C === undefined ? Array : C;
            };
        },
        {
            './_is-array': 57,
            './_is-object': 59,
            './_wks': 126
        }
    ],
    25: [
        function (require, module, exports) {
            var speciesConstructor = require('./_array-species-constructor');
            module.exports = function (original, length) {
                return new (speciesConstructor(original))(length);
            };
        },
        { './_array-species-constructor': 24 }
    ],
    26: [
        function (require, module, exports) {
            'use strict';
            var aFunction = require('./_a-function'), isObject = require('./_is-object'), invoke = require('./_invoke'), arraySlice = [].slice, factories = {};
            var construct = function (F, len, args) {
                if (!(len in factories)) {
                    for (var n = [], i = 0; i < len; i++)
                        n[i] = 'a[' + i + ']';
                    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
                }
                return factories[len](F, args);
            };
            module.exports = Function.bind || function bind(that) {
                var fn = aFunction(this), partArgs = arraySlice.call(arguments, 1);
                var bound = function () {
                    var args = partArgs.concat(arraySlice.call(arguments));
                    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
                };
                if (isObject(fn.prototype))
                    bound.prototype = fn.prototype;
                return bound;
            };
        },
        {
            './_a-function': 13,
            './_invoke': 54,
            './_is-object': 59
        }
    ],
    27: [
        function (require, module, exports) {
            var cof = require('./_cof'), TAG = require('./_wks')('toStringTag'), ARG = cof(function () {
                    return arguments;
                }()) == 'Arguments';
            var tryGet = function (it, key) {
                try {
                    return it[key];
                } catch (e) {
                }
            };
            module.exports = function (it) {
                var O, T, B;
                return it === undefined ? 'Undefined' : it === null ? 'Null' : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T : ARG ? cof(O) : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
            };
        },
        {
            './_cof': 28,
            './_wks': 126
        }
    ],
    28: [
        function (require, module, exports) {
            var toString = {}.toString;
            module.exports = function (it) {
                return toString.call(it).slice(8, -1);
            };
        },
        {}
    ],
    29: [
        function (require, module, exports) {
            'use strict';
            var dP = require('./_object-dp').f, create = require('./_object-create'), hide = require('./_hide'), redefineAll = require('./_redefine-all'), ctx = require('./_ctx'), anInstance = require('./_an-instance'), defined = require('./_defined'), forOf = require('./_for-of'), $iterDefine = require('./_iter-define'), step = require('./_iter-step'), setSpecies = require('./_set-species'), DESCRIPTORS = require('./_descriptors'), fastKey = require('./_meta').fastKey, SIZE = DESCRIPTORS ? '_s' : 'size';
            var getEntry = function (that, key) {
                var index = fastKey(key), entry;
                if (index !== 'F')
                    return that._i[index];
                for (entry = that._f; entry; entry = entry.n) {
                    if (entry.k == key)
                        return entry;
                }
            };
            module.exports = {
                getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
                    var C = wrapper(function (that, iterable) {
                        anInstance(that, C, NAME, '_i');
                        that._i = create(null);
                        that._f = undefined;
                        that._l = undefined;
                        that[SIZE] = 0;
                        if (iterable != undefined)
                            forOf(iterable, IS_MAP, that[ADDER], that);
                    });
                    redefineAll(C.prototype, {
                        clear: function clear() {
                            for (var that = this, data = that._i, entry = that._f; entry; entry = entry.n) {
                                entry.r = true;
                                if (entry.p)
                                    entry.p = entry.p.n = undefined;
                                delete data[entry.i];
                            }
                            that._f = that._l = undefined;
                            that[SIZE] = 0;
                        },
                        'delete': function (key) {
                            var that = this, entry = getEntry(that, key);
                            if (entry) {
                                var next = entry.n, prev = entry.p;
                                delete that._i[entry.i];
                                entry.r = true;
                                if (prev)
                                    prev.n = next;
                                if (next)
                                    next.p = prev;
                                if (that._f == entry)
                                    that._f = next;
                                if (that._l == entry)
                                    that._l = prev;
                                that[SIZE]--;
                            }
                            return !!entry;
                        },
                        forEach: function forEach(callbackfn) {
                            anInstance(this, C, 'forEach');
                            var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3), entry;
                            while (entry = entry ? entry.n : this._f) {
                                f(entry.v, entry.k, this);
                                while (entry && entry.r)
                                    entry = entry.p;
                            }
                        },
                        has: function has(key) {
                            return !!getEntry(this, key);
                        }
                    });
                    if (DESCRIPTORS)
                        dP(C.prototype, 'size', {
                            get: function () {
                                return defined(this[SIZE]);
                            }
                        });
                    return C;
                },
                def: function (that, key, value) {
                    var entry = getEntry(that, key), prev, index;
                    if (entry) {
                        entry.v = value;
                    } else {
                        that._l = entry = {
                            i: index = fastKey(key, true),
                            k: key,
                            v: value,
                            p: prev = that._l,
                            n: undefined,
                            r: false
                        };
                        if (!that._f)
                            that._f = entry;
                        if (prev)
                            prev.n = entry;
                        that[SIZE]++;
                        if (index !== 'F')
                            that._i[index] = entry;
                    }
                    return that;
                },
                getEntry: getEntry,
                setStrong: function (C, NAME, IS_MAP) {
                    $iterDefine(C, NAME, function (iterated, kind) {
                        this._t = iterated;
                        this._k = kind;
                        this._l = undefined;
                    }, function () {
                        var that = this, kind = that._k, entry = that._l;
                        while (entry && entry.r)
                            entry = entry.p;
                        if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
                            that._t = undefined;
                            return step(1);
                        }
                        if (kind == 'keys')
                            return step(0, entry.k);
                        if (kind == 'values')
                            return step(0, entry.v);
                        return step(0, [
                            entry.k,
                            entry.v
                        ]);
                    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);
                    setSpecies(NAME);
                }
            };
        },
        {
            './_an-instance': 16,
            './_ctx': 35,
            './_defined': 37,
            './_descriptors': 38,
            './_for-of': 47,
            './_hide': 50,
            './_iter-define': 63,
            './_iter-step': 65,
            './_meta': 72,
            './_object-create': 76,
            './_object-dp': 77,
            './_redefine-all': 96,
            './_set-species': 100
        }
    ],
    30: [
        function (require, module, exports) {
            var classof = require('./_classof'), from = require('./_array-from-iterable');
            module.exports = function (NAME) {
                return function toJSON() {
                    if (classof(this) != NAME)
                        throw TypeError(NAME + '#toJSON isn\'t generic');
                    return from(this);
                };
            };
        },
        {
            './_array-from-iterable': 20,
            './_classof': 27
        }
    ],
    31: [
        function (require, module, exports) {
            'use strict';
            var redefineAll = require('./_redefine-all'), getWeak = require('./_meta').getWeak, anObject = require('./_an-object'), isObject = require('./_is-object'), anInstance = require('./_an-instance'), forOf = require('./_for-of'), createArrayMethod = require('./_array-methods'), $has = require('./_has'), arrayFind = createArrayMethod(5), arrayFindIndex = createArrayMethod(6), id = 0;
            var uncaughtFrozenStore = function (that) {
                return that._l || (that._l = new UncaughtFrozenStore());
            };
            var UncaughtFrozenStore = function () {
                this.a = [];
            };
            var findUncaughtFrozen = function (store, key) {
                return arrayFind(store.a, function (it) {
                    return it[0] === key;
                });
            };
            UncaughtFrozenStore.prototype = {
                get: function (key) {
                    var entry = findUncaughtFrozen(this, key);
                    if (entry)
                        return entry[1];
                },
                has: function (key) {
                    return !!findUncaughtFrozen(this, key);
                },
                set: function (key, value) {
                    var entry = findUncaughtFrozen(this, key);
                    if (entry)
                        entry[1] = value;
                    else
                        this.a.push([
                            key,
                            value
                        ]);
                },
                'delete': function (key) {
                    var index = arrayFindIndex(this.a, function (it) {
                        return it[0] === key;
                    });
                    if (~index)
                        this.a.splice(index, 1);
                    return !!~index;
                }
            };
            module.exports = {
                getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
                    var C = wrapper(function (that, iterable) {
                        anInstance(that, C, NAME, '_i');
                        that._i = id++;
                        that._l = undefined;
                        if (iterable != undefined)
                            forOf(iterable, IS_MAP, that[ADDER], that);
                    });
                    redefineAll(C.prototype, {
                        'delete': function (key) {
                            if (!isObject(key))
                                return false;
                            var data = getWeak(key);
                            if (data === true)
                                return uncaughtFrozenStore(this)['delete'](key);
                            return data && $has(data, this._i) && delete data[this._i];
                        },
                        has: function has(key) {
                            if (!isObject(key))
                                return false;
                            var data = getWeak(key);
                            if (data === true)
                                return uncaughtFrozenStore(this).has(key);
                            return data && $has(data, this._i);
                        }
                    });
                    return C;
                },
                def: function (that, key, value) {
                    var data = getWeak(anObject(key), true);
                    if (data === true)
                        uncaughtFrozenStore(that).set(key, value);
                    else
                        data[that._i] = value;
                    return that;
                },
                ufstore: uncaughtFrozenStore
            };
        },
        {
            './_an-instance': 16,
            './_an-object': 17,
            './_array-methods': 22,
            './_for-of': 47,
            './_has': 49,
            './_is-object': 59,
            './_meta': 72,
            './_redefine-all': 96
        }
    ],
    32: [
        function (require, module, exports) {
            'use strict';
            var global = require('./_global'), $export = require('./_export'), redefine = require('./_redefine'), redefineAll = require('./_redefine-all'), meta = require('./_meta'), forOf = require('./_for-of'), anInstance = require('./_an-instance'), isObject = require('./_is-object'), fails = require('./_fails'), $iterDetect = require('./_iter-detect'), setToStringTag = require('./_set-to-string-tag'), inheritIfRequired = require('./_inherit-if-required');
            module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
                var Base = global[NAME], C = Base, ADDER = IS_MAP ? 'set' : 'add', proto = C && C.prototype, O = {};
                var fixMethod = function (KEY) {
                    var fn = proto[KEY];
                    redefine(proto, KEY, KEY == 'delete' ? function (a) {
                        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
                    } : KEY == 'has' ? function has(a) {
                        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
                    } : KEY == 'get' ? function get(a) {
                        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
                    } : KEY == 'add' ? function add(a) {
                        fn.call(this, a === 0 ? 0 : a);
                        return this;
                    } : function set(a, b) {
                        fn.call(this, a === 0 ? 0 : a, b);
                        return this;
                    });
                };
                if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
                        new C().entries().next();
                    }))) {
                    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
                    redefineAll(C.prototype, methods);
                    meta.NEED = true;
                } else {
                    var instance = new C(), HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance, THROWS_ON_PRIMITIVES = fails(function () {
                            instance.has(1);
                        }), ACCEPT_ITERABLES = $iterDetect(function (iter) {
                            new C(iter);
                        }), BUGGY_ZERO = !IS_WEAK && fails(function () {
                            var $instance = new C(), index = 5;
                            while (index--)
                                $instance[ADDER](index, index);
                            return !$instance.has(-0);
                        });
                    if (!ACCEPT_ITERABLES) {
                        C = wrapper(function (target, iterable) {
                            anInstance(target, C, NAME);
                            var that = inheritIfRequired(new Base(), target, C);
                            if (iterable != undefined)
                                forOf(iterable, IS_MAP, that[ADDER], that);
                            return that;
                        });
                        C.prototype = proto;
                        proto.constructor = C;
                    }
                    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
                        fixMethod('delete');
                        fixMethod('has');
                        IS_MAP && fixMethod('get');
                    }
                    if (BUGGY_ZERO || HASNT_CHAINING)
                        fixMethod(ADDER);
                    if (IS_WEAK && proto.clear)
                        delete proto.clear;
                }
                setToStringTag(C, NAME);
                O[NAME] = C;
                $export($export.G + $export.W + $export.F * (C != Base), O);
                if (!IS_WEAK)
                    common.setStrong(C, NAME, IS_MAP);
                return C;
            };
        },
        {
            './_an-instance': 16,
            './_export': 42,
            './_fails': 44,
            './_for-of': 47,
            './_global': 48,
            './_inherit-if-required': 53,
            './_is-object': 59,
            './_iter-detect': 64,
            './_meta': 72,
            './_redefine': 97,
            './_redefine-all': 96,
            './_set-to-string-tag': 101
        }
    ],
    33: [
        function (require, module, exports) {
            var core = module.exports = { version: '2.3.0' };
            if (typeof __e == 'number')
                __e = core;
        },
        {}
    ],
    34: [
        function (require, module, exports) {
            'use strict';
            var $defineProperty = require('./_object-dp'), createDesc = require('./_property-desc');
            module.exports = function (object, index, value) {
                if (index in object)
                    $defineProperty.f(object, index, createDesc(0, value));
                else
                    object[index] = value;
            };
        },
        {
            './_object-dp': 77,
            './_property-desc': 95
        }
    ],
    35: [
        function (require, module, exports) {
            var aFunction = require('./_a-function');
            module.exports = function (fn, that, length) {
                aFunction(fn);
                if (that === undefined)
                    return fn;
                switch (length) {
                case 1:
                    return function (a) {
                        return fn.call(that, a);
                    };
                case 2:
                    return function (a, b) {
                        return fn.call(that, a, b);
                    };
                case 3:
                    return function (a, b, c) {
                        return fn.call(that, a, b, c);
                    };
                }
                return function () {
                    return fn.apply(that, arguments);
                };
            };
        },
        { './_a-function': 13 }
    ],
    36: [
        function (require, module, exports) {
            'use strict';
            var anObject = require('./_an-object'), toPrimitive = require('./_to-primitive'), NUMBER = 'number';
            module.exports = function (hint) {
                if (hint !== 'string' && hint !== NUMBER && hint !== 'default')
                    throw TypeError('Incorrect hint');
                return toPrimitive(anObject(this), hint != NUMBER);
            };
        },
        {
            './_an-object': 17,
            './_to-primitive': 119
        }
    ],
    37: [
        function (require, module, exports) {
            module.exports = function (it) {
                if (it == undefined)
                    throw TypeError('Can\'t call method on  ' + it);
                return it;
            };
        },
        {}
    ],
    38: [
        function (require, module, exports) {
            module.exports = !require('./_fails')(function () {
                return Object.defineProperty({}, 'a', {
                    get: function () {
                        return 7;
                    }
                }).a != 7;
            });
        },
        { './_fails': 44 }
    ],
    39: [
        function (require, module, exports) {
            var isObject = require('./_is-object'), document = require('./_global').document, is = isObject(document) && isObject(document.createElement);
            module.exports = function (it) {
                return is ? document.createElement(it) : {};
            };
        },
        {
            './_global': 48,
            './_is-object': 59
        }
    ],
    40: [
        function (require, module, exports) {
            module.exports = 'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'.split(',');
        },
        {}
    ],
    41: [
        function (require, module, exports) {
            var getKeys = require('./_object-keys'), gOPS = require('./_object-gops'), pIE = require('./_object-pie');
            module.exports = function (it) {
                var result = getKeys(it), getSymbols = gOPS.f;
                if (getSymbols) {
                    var symbols = getSymbols(it), isEnum = pIE.f, i = 0, key;
                    while (symbols.length > i)
                        if (isEnum.call(it, key = symbols[i++]))
                            result.push(key);
                }
                return result;
            };
        },
        {
            './_object-gops': 83,
            './_object-keys': 86,
            './_object-pie': 87
        }
    ],
    42: [
        function (require, module, exports) {
            var global = require('./_global'), core = require('./_core'), hide = require('./_hide'), redefine = require('./_redefine'), ctx = require('./_ctx'), PROTOTYPE = 'prototype';
            var $export = function (type, name, source) {
                var IS_FORCED = type & $export.F, IS_GLOBAL = type & $export.G, IS_STATIC = type & $export.S, IS_PROTO = type & $export.P, IS_BIND = type & $export.B, target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE], exports = IS_GLOBAL ? core : core[name] || (core[name] = {}), expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {}), key, own, out, exp;
                if (IS_GLOBAL)
                    source = name;
                for (key in source) {
                    own = !IS_FORCED && target && target[key] !== undefined;
                    out = (own ? target : source)[key];
                    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
                    if (target)
                        redefine(target, key, out, type & $export.U);
                    if (exports[key] != out)
                        hide(exports, key, exp);
                    if (IS_PROTO && expProto[key] != out)
                        expProto[key] = out;
                }
            };
            global.core = core;
            $export.F = 1;
            $export.G = 2;
            $export.S = 4;
            $export.P = 8;
            $export.B = 16;
            $export.W = 32;
            $export.U = 64;
            $export.R = 128;
            module.exports = $export;
        },
        {
            './_core': 33,
            './_ctx': 35,
            './_global': 48,
            './_hide': 50,
            './_redefine': 97
        }
    ],
    43: [
        function (require, module, exports) {
            var MATCH = require('./_wks')('match');
            module.exports = function (KEY) {
                var re = /./;
                try {
                    '/./'[KEY](re);
                } catch (e) {
                    try {
                        re[MATCH] = false;
                        return !'/./'[KEY](re);
                    } catch (f) {
                    }
                }
                return true;
            };
        },
        { './_wks': 126 }
    ],
    44: [
        function (require, module, exports) {
            module.exports = function (exec) {
                try {
                    return !!exec();
                } catch (e) {
                    return true;
                }
            };
        },
        {}
    ],
    45: [
        function (require, module, exports) {
            'use strict';
            var hide = require('./_hide'), redefine = require('./_redefine'), fails = require('./_fails'), defined = require('./_defined'), wks = require('./_wks');
            module.exports = function (KEY, length, exec) {
                var SYMBOL = wks(KEY), fns = exec(defined, SYMBOL, ''[KEY]), strfn = fns[0], rxfn = fns[1];
                if (fails(function () {
                        var O = {};
                        O[SYMBOL] = function () {
                            return 7;
                        };
                        return ''[KEY](O) != 7;
                    })) {
                    redefine(String.prototype, KEY, strfn);
                    hide(RegExp.prototype, SYMBOL, length == 2 ? function (string, arg) {
                        return rxfn.call(string, this, arg);
                    } : function (string) {
                        return rxfn.call(string, this);
                    });
                }
            };
        },
        {
            './_defined': 37,
            './_fails': 44,
            './_hide': 50,
            './_redefine': 97,
            './_wks': 126
        }
    ],
    46: [
        function (require, module, exports) {
            'use strict';
            var anObject = require('./_an-object');
            module.exports = function () {
                var that = anObject(this), result = '';
                if (that.global)
                    result += 'g';
                if (that.ignoreCase)
                    result += 'i';
                if (that.multiline)
                    result += 'm';
                if (that.unicode)
                    result += 'u';
                if (that.sticky)
                    result += 'y';
                return result;
            };
        },
        { './_an-object': 17 }
    ],
    47: [
        function (require, module, exports) {
            var ctx = require('./_ctx'), call = require('./_iter-call'), isArrayIter = require('./_is-array-iter'), anObject = require('./_an-object'), toLength = require('./_to-length'), getIterFn = require('./core.get-iterator-method');
            module.exports = function (iterable, entries, fn, that, ITERATOR) {
                var iterFn = ITERATOR ? function () {
                        return iterable;
                    } : getIterFn(iterable), f = ctx(fn, that, entries ? 2 : 1), index = 0, length, step, iterator;
                if (typeof iterFn != 'function')
                    throw TypeError(iterable + ' is not iterable!');
                if (isArrayIter(iterFn))
                    for (length = toLength(iterable.length); length > index; index++) {
                        entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
                    }
                else
                    for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
                        call(iterator, f, step.value, entries);
                    }
            };
        },
        {
            './_an-object': 17,
            './_ctx': 35,
            './_is-array-iter': 56,
            './_iter-call': 61,
            './_to-length': 117,
            './core.get-iterator-method': 127
        }
    ],
    48: [
        function (require, module, exports) {
            var global = module.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
            if (typeof __g == 'number')
                __g = global;
        },
        {}
    ],
    49: [
        function (require, module, exports) {
            var hasOwnProperty = {}.hasOwnProperty;
            module.exports = function (it, key) {
                return hasOwnProperty.call(it, key);
            };
        },
        {}
    ],
    50: [
        function (require, module, exports) {
            var dP = require('./_object-dp'), createDesc = require('./_property-desc');
            module.exports = require('./_descriptors') ? function (object, key, value) {
                return dP.f(object, key, createDesc(1, value));
            } : function (object, key, value) {
                object[key] = value;
                return object;
            };
        },
        {
            './_descriptors': 38,
            './_object-dp': 77,
            './_property-desc': 95
        }
    ],
    51: [
        function (require, module, exports) {
            module.exports = require('./_global').document && document.documentElement;
        },
        { './_global': 48 }
    ],
    52: [
        function (require, module, exports) {
            module.exports = !require('./_descriptors') && !require('./_fails')(function () {
                return Object.defineProperty(require('./_dom-create')('div'), 'a', {
                    get: function () {
                        return 7;
                    }
                }).a != 7;
            });
        },
        {
            './_descriptors': 38,
            './_dom-create': 39,
            './_fails': 44
        }
    ],
    53: [
        function (require, module, exports) {
            var isObject = require('./_is-object'), setPrototypeOf = require('./_set-proto').set;
            module.exports = function (that, target, C) {
                var P, S = target.constructor;
                if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
                    setPrototypeOf(that, P);
                }
                return that;
            };
        },
        {
            './_is-object': 59,
            './_set-proto': 99
        }
    ],
    54: [
        function (require, module, exports) {
            module.exports = function (fn, args, that) {
                var un = that === undefined;
                switch (args.length) {
                case 0:
                    return un ? fn() : fn.call(that);
                case 1:
                    return un ? fn(args[0]) : fn.call(that, args[0]);
                case 2:
                    return un ? fn(args[0], args[1]) : fn.call(that, args[0], args[1]);
                case 3:
                    return un ? fn(args[0], args[1], args[2]) : fn.call(that, args[0], args[1], args[2]);
                case 4:
                    return un ? fn(args[0], args[1], args[2], args[3]) : fn.call(that, args[0], args[1], args[2], args[3]);
                }
                return fn.apply(that, args);
            };
        },
        {}
    ],
    55: [
        function (require, module, exports) {
            var cof = require('./_cof');
            module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
                return cof(it) == 'String' ? it.split('') : Object(it);
            };
        },
        { './_cof': 28 }
    ],
    56: [
        function (require, module, exports) {
            var Iterators = require('./_iterators'), ITERATOR = require('./_wks')('iterator'), ArrayProto = Array.prototype;
            module.exports = function (it) {
                return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
            };
        },
        {
            './_iterators': 66,
            './_wks': 126
        }
    ],
    57: [
        function (require, module, exports) {
            var cof = require('./_cof');
            module.exports = Array.isArray || function isArray(arg) {
                return cof(arg) == 'Array';
            };
        },
        { './_cof': 28 }
    ],
    58: [
        function (require, module, exports) {
            var isObject = require('./_is-object'), floor = Math.floor;
            module.exports = function isInteger(it) {
                return !isObject(it) && isFinite(it) && floor(it) === it;
            };
        },
        { './_is-object': 59 }
    ],
    59: [
        function (require, module, exports) {
            module.exports = function (it) {
                return typeof it === 'object' ? it !== null : typeof it === 'function';
            };
        },
        {}
    ],
    60: [
        function (require, module, exports) {
            var isObject = require('./_is-object'), cof = require('./_cof'), MATCH = require('./_wks')('match');
            module.exports = function (it) {
                var isRegExp;
                return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
            };
        },
        {
            './_cof': 28,
            './_is-object': 59,
            './_wks': 126
        }
    ],
    61: [
        function (require, module, exports) {
            var anObject = require('./_an-object');
            module.exports = function (iterator, fn, value, entries) {
                try {
                    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
                } catch (e) {
                    var ret = iterator['return'];
                    if (ret !== undefined)
                        anObject(ret.call(iterator));
                    throw e;
                }
            };
        },
        { './_an-object': 17 }
    ],
    62: [
        function (require, module, exports) {
            'use strict';
            var create = require('./_object-create'), descriptor = require('./_property-desc'), setToStringTag = require('./_set-to-string-tag'), IteratorPrototype = {};
            require('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () {
                return this;
            });
            module.exports = function (Constructor, NAME, next) {
                Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
                setToStringTag(Constructor, NAME + ' Iterator');
            };
        },
        {
            './_hide': 50,
            './_object-create': 76,
            './_property-desc': 95,
            './_set-to-string-tag': 101,
            './_wks': 126
        }
    ],
    63: [
        function (require, module, exports) {
            'use strict';
            var LIBRARY = require('./_library'), $export = require('./_export'), redefine = require('./_redefine'), hide = require('./_hide'), has = require('./_has'), Iterators = require('./_iterators'), $iterCreate = require('./_iter-create'), setToStringTag = require('./_set-to-string-tag'), getPrototypeOf = require('./_object-gpo'), ITERATOR = require('./_wks')('iterator'), BUGGY = !([].keys && 'next' in [].keys()), FF_ITERATOR = '@@iterator', KEYS = 'keys', VALUES = 'values';
            var returnThis = function () {
                return this;
            };
            module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
                $iterCreate(Constructor, NAME, next);
                var getMethod = function (kind) {
                    if (!BUGGY && kind in proto)
                        return proto[kind];
                    switch (kind) {
                    case KEYS:
                        return function keys() {
                            return new Constructor(this, kind);
                        };
                    case VALUES:
                        return function values() {
                            return new Constructor(this, kind);
                        };
                    }
                    return function entries() {
                        return new Constructor(this, kind);
                    };
                };
                var TAG = NAME + ' Iterator', DEF_VALUES = DEFAULT == VALUES, VALUES_BUG = false, proto = Base.prototype, $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT], $default = $native || getMethod(DEFAULT), $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined, $anyNative = NAME == 'Array' ? proto.entries || $native : $native, methods, key, IteratorPrototype;
                if ($anyNative) {
                    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
                    if (IteratorPrototype !== Object.prototype) {
                        setToStringTag(IteratorPrototype, TAG, true);
                        if (!LIBRARY && !has(IteratorPrototype, ITERATOR))
                            hide(IteratorPrototype, ITERATOR, returnThis);
                    }
                }
                if (DEF_VALUES && $native && $native.name !== VALUES) {
                    VALUES_BUG = true;
                    $default = function values() {
                        return $native.call(this);
                    };
                }
                if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
                    hide(proto, ITERATOR, $default);
                }
                Iterators[NAME] = $default;
                Iterators[TAG] = returnThis;
                if (DEFAULT) {
                    methods = {
                        values: DEF_VALUES ? $default : getMethod(VALUES),
                        keys: IS_SET ? $default : getMethod(KEYS),
                        entries: $entries
                    };
                    if (FORCED)
                        for (key in methods) {
                            if (!(key in proto))
                                redefine(proto, key, methods[key]);
                        }
                    else
                        $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
                }
                return methods;
            };
        },
        {
            './_export': 42,
            './_has': 49,
            './_hide': 50,
            './_iter-create': 62,
            './_iterators': 66,
            './_library': 68,
            './_object-gpo': 84,
            './_redefine': 97,
            './_set-to-string-tag': 101,
            './_wks': 126
        }
    ],
    64: [
        function (require, module, exports) {
            var ITERATOR = require('./_wks')('iterator'), SAFE_CLOSING = false;
            try {
                var riter = [7][ITERATOR]();
                riter['return'] = function () {
                    SAFE_CLOSING = true;
                };
                Array.from(riter, function () {
                    throw 2;
                });
            } catch (e) {
            }
            module.exports = function (exec, skipClosing) {
                if (!skipClosing && !SAFE_CLOSING)
                    return false;
                var safe = false;
                try {
                    var arr = [7], iter = arr[ITERATOR]();
                    iter.next = function () {
                        return { done: safe = true };
                    };
                    arr[ITERATOR] = function () {
                        return iter;
                    };
                    exec(arr);
                } catch (e) {
                }
                return safe;
            };
        },
        { './_wks': 126 }
    ],
    65: [
        function (require, module, exports) {
            module.exports = function (done, value) {
                return {
                    value: value,
                    done: !!done
                };
            };
        },
        {}
    ],
    66: [
        function (require, module, exports) {
            module.exports = {};
        },
        {}
    ],
    67: [
        function (require, module, exports) {
            var getKeys = require('./_object-keys'), toIObject = require('./_to-iobject');
            module.exports = function (object, el) {
                var O = toIObject(object), keys = getKeys(O), length = keys.length, index = 0, key;
                while (length > index)
                    if (O[key = keys[index++]] === el)
                        return key;
            };
        },
        {
            './_object-keys': 86,
            './_to-iobject': 116
        }
    ],
    68: [
        function (require, module, exports) {
            module.exports = false;
        },
        {}
    ],
    69: [
        function (require, module, exports) {
            var $expm1 = Math.expm1;
            module.exports = !$expm1 || $expm1(10) > 22025.465794806718 || $expm1(10) < 22025.465794806718 || $expm1(-2e-17) != -2e-17 ? function expm1(x) {
                return (x = +x) == 0 ? x : x > -0.000001 && x < 0.000001 ? x + x * x / 2 : Math.exp(x) - 1;
            } : $expm1;
        },
        {}
    ],
    70: [
        function (require, module, exports) {
            module.exports = Math.log1p || function log1p(x) {
                return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
            };
        },
        {}
    ],
    71: [
        function (require, module, exports) {
            module.exports = Math.sign || function sign(x) {
                return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
            };
        },
        {}
    ],
    72: [
        function (require, module, exports) {
            var META = require('./_uid')('meta'), isObject = require('./_is-object'), has = require('./_has'), setDesc = require('./_object-dp').f, id = 0;
            var isExtensible = Object.isExtensible || function () {
                return true;
            };
            var FREEZE = !require('./_fails')(function () {
                return isExtensible(Object.preventExtensions({}));
            });
            var setMeta = function (it) {
                setDesc(it, META, {
                    value: {
                        i: 'O' + ++id,
                        w: {}
                    }
                });
            };
            var fastKey = function (it, create) {
                if (!isObject(it))
                    return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
                if (!has(it, META)) {
                    if (!isExtensible(it))
                        return 'F';
                    if (!create)
                        return 'E';
                    setMeta(it);
                }
                return it[META].i;
            };
            var getWeak = function (it, create) {
                if (!has(it, META)) {
                    if (!isExtensible(it))
                        return true;
                    if (!create)
                        return false;
                    setMeta(it);
                }
                return it[META].w;
            };
            var onFreeze = function (it) {
                if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META))
                    setMeta(it);
                return it;
            };
            var meta = module.exports = {
                KEY: META,
                NEED: false,
                fastKey: fastKey,
                getWeak: getWeak,
                onFreeze: onFreeze
            };
        },
        {
            './_fails': 44,
            './_has': 49,
            './_is-object': 59,
            './_object-dp': 77,
            './_uid': 123
        }
    ],
    73: [
        function (require, module, exports) {
            var Map = require('./es6.map'), $export = require('./_export'), shared = require('./_shared')('metadata'), store = shared.store || (shared.store = new (require('./es6.weak-map'))());
            var getOrCreateMetadataMap = function (target, targetKey, create) {
                var targetMetadata = store.get(target);
                if (!targetMetadata) {
                    if (!create)
                        return undefined;
                    store.set(target, targetMetadata = new Map());
                }
                var keyMetadata = targetMetadata.get(targetKey);
                if (!keyMetadata) {
                    if (!create)
                        return undefined;
                    targetMetadata.set(targetKey, keyMetadata = new Map());
                }
                return keyMetadata;
            };
            var ordinaryHasOwnMetadata = function (MetadataKey, O, P) {
                var metadataMap = getOrCreateMetadataMap(O, P, false);
                return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
            };
            var ordinaryGetOwnMetadata = function (MetadataKey, O, P) {
                var metadataMap = getOrCreateMetadataMap(O, P, false);
                return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
            };
            var ordinaryDefineOwnMetadata = function (MetadataKey, MetadataValue, O, P) {
                getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
            };
            var ordinaryOwnMetadataKeys = function (target, targetKey) {
                var metadataMap = getOrCreateMetadataMap(target, targetKey, false), keys = [];
                if (metadataMap)
                    metadataMap.forEach(function (_, key) {
                        keys.push(key);
                    });
                return keys;
            };
            var toMetaKey = function (it) {
                return it === undefined || typeof it == 'symbol' ? it : String(it);
            };
            var exp = function (O) {
                $export($export.S, 'Reflect', O);
            };
            module.exports = {
                store: store,
                map: getOrCreateMetadataMap,
                has: ordinaryHasOwnMetadata,
                get: ordinaryGetOwnMetadata,
                set: ordinaryDefineOwnMetadata,
                keys: ordinaryOwnMetadataKeys,
                key: toMetaKey,
                exp: exp
            };
        },
        {
            './_export': 42,
            './_shared': 103,
            './es6.map': 158,
            './es6.weak-map': 264
        }
    ],
    74: [
        function (require, module, exports) {
            var global = require('./_global'), macrotask = require('./_task').set, Observer = global.MutationObserver || global.WebKitMutationObserver, process = global.process, Promise = global.Promise, isNode = require('./_cof')(process) == 'process';
            module.exports = function () {
                var head, last, notify;
                var flush = function () {
                    var parent, fn;
                    if (isNode && (parent = process.domain))
                        parent.exit();
                    while (head) {
                        fn = head.fn;
                        head = head.next;
                        try {
                            fn();
                        } catch (e) {
                            if (head)
                                notify();
                            else
                                last = undefined;
                            throw e;
                        }
                    }
                    last = undefined;
                    if (parent)
                        parent.enter();
                };
                if (isNode) {
                    notify = function () {
                        process.nextTick(flush);
                    };
                } else if (Observer) {
                    var toggle = true, node = document.createTextNode('');
                    new Observer(flush).observe(node, { characterData: true });
                    notify = function () {
                        node.data = toggle = !toggle;
                    };
                } else if (Promise && Promise.resolve) {
                    var promise = Promise.resolve();
                    notify = function () {
                        promise.then(flush);
                    };
                } else {
                    notify = function () {
                        macrotask.call(global, flush);
                    };
                }
                return function (fn) {
                    var task = {
                        fn: fn,
                        next: undefined
                    };
                    if (last)
                        last.next = task;
                    if (!head) {
                        head = task;
                        notify();
                    }
                    last = task;
                };
            };
        },
        {
            './_cof': 28,
            './_global': 48,
            './_task': 113
        }
    ],
    75: [
        function (require, module, exports) {
            'use strict';
            var getKeys = require('./_object-keys'), gOPS = require('./_object-gops'), pIE = require('./_object-pie'), toObject = require('./_to-object'), IObject = require('./_iobject'), $assign = Object.assign;
            module.exports = !$assign || require('./_fails')(function () {
                var A = {}, B = {}, S = Symbol(), K = 'abcdefghijklmnopqrst';
                A[S] = 7;
                K.split('').forEach(function (k) {
                    B[k] = k;
                });
                return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
            }) ? function assign(target, source) {
                var T = toObject(target), aLen = arguments.length, index = 1, getSymbols = gOPS.f, isEnum = pIE.f;
                while (aLen > index) {
                    var S = IObject(arguments[index++]), keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S), length = keys.length, j = 0, key;
                    while (length > j)
                        if (isEnum.call(S, key = keys[j++]))
                            T[key] = S[key];
                }
                return T;
            } : $assign;
        },
        {
            './_fails': 44,
            './_iobject': 55,
            './_object-gops': 83,
            './_object-keys': 86,
            './_object-pie': 87,
            './_to-object': 118
        }
    ],
    76: [
        function (require, module, exports) {
            var anObject = require('./_an-object'), dPs = require('./_object-dps'), enumBugKeys = require('./_enum-bug-keys'), IE_PROTO = require('./_shared-key')('IE_PROTO'), Empty = function () {
                }, PROTOTYPE = 'prototype';
            var createDict = function () {
                var iframe = require('./_dom-create')('iframe'), i = enumBugKeys.length, gt = '>', iframeDocument;
                iframe.style.display = 'none';
                require('./_html').appendChild(iframe);
                iframe.src = 'javascript:';
                iframeDocument = iframe.contentWindow.document;
                iframeDocument.open();
                iframeDocument.write('<script>document.F=Object</script' + gt);
                iframeDocument.close();
                createDict = iframeDocument.F;
                while (i--)
                    delete createDict[PROTOTYPE][enumBugKeys[i]];
                return createDict();
            };
            module.exports = Object.create || function create(O, Properties) {
                var result;
                if (O !== null) {
                    Empty[PROTOTYPE] = anObject(O);
                    result = new Empty();
                    Empty[PROTOTYPE] = null;
                    result[IE_PROTO] = O;
                } else
                    result = createDict();
                return Properties === undefined ? result : dPs(result, Properties);
            };
        },
        {
            './_an-object': 17,
            './_dom-create': 39,
            './_enum-bug-keys': 40,
            './_html': 51,
            './_object-dps': 78,
            './_shared-key': 102
        }
    ],
    77: [
        function (require, module, exports) {
            var anObject = require('./_an-object'), IE8_DOM_DEFINE = require('./_ie8-dom-define'), toPrimitive = require('./_to-primitive'), dP = Object.defineProperty;
            exports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {
                anObject(O);
                P = toPrimitive(P, true);
                anObject(Attributes);
                if (IE8_DOM_DEFINE)
                    try {
                        return dP(O, P, Attributes);
                    } catch (e) {
                    }
                if ('get' in Attributes || 'set' in Attributes)
                    throw TypeError('Accessors not supported!');
                if ('value' in Attributes)
                    O[P] = Attributes.value;
                return O;
            };
        },
        {
            './_an-object': 17,
            './_descriptors': 38,
            './_ie8-dom-define': 52,
            './_to-primitive': 119
        }
    ],
    78: [
        function (require, module, exports) {
            var dP = require('./_object-dp'), anObject = require('./_an-object'), getKeys = require('./_object-keys');
            module.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {
                anObject(O);
                var keys = getKeys(Properties), length = keys.length, i = 0, P;
                while (length > i)
                    dP.f(O, P = keys[i++], Properties[P]);
                return O;
            };
        },
        {
            './_an-object': 17,
            './_descriptors': 38,
            './_object-dp': 77,
            './_object-keys': 86
        }
    ],
    79: [
        function (require, module, exports) {
            module.exports = require('./_library') || !require('./_fails')(function () {
                var K = Math.random();
                __defineSetter__.call(null, K, function () {
                });
                delete require('./_global')[K];
            });
        },
        {
            './_fails': 44,
            './_global': 48,
            './_library': 68
        }
    ],
    80: [
        function (require, module, exports) {
            var pIE = require('./_object-pie'), createDesc = require('./_property-desc'), toIObject = require('./_to-iobject'), toPrimitive = require('./_to-primitive'), has = require('./_has'), IE8_DOM_DEFINE = require('./_ie8-dom-define'), gOPD = Object.getOwnPropertyDescriptor;
            exports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {
                O = toIObject(O);
                P = toPrimitive(P, true);
                if (IE8_DOM_DEFINE)
                    try {
                        return gOPD(O, P);
                    } catch (e) {
                    }
                if (has(O, P))
                    return createDesc(!pIE.f.call(O, P), O[P]);
            };
        },
        {
            './_descriptors': 38,
            './_has': 49,
            './_ie8-dom-define': 52,
            './_object-pie': 87,
            './_property-desc': 95,
            './_to-iobject': 116,
            './_to-primitive': 119
        }
    ],
    81: [
        function (require, module, exports) {
            var toIObject = require('./_to-iobject'), gOPN = require('./_object-gopn').f, toString = {}.toString;
            var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
            var getWindowNames = function (it) {
                try {
                    return gOPN(it);
                } catch (e) {
                    return windowNames.slice();
                }
            };
            module.exports.f = function getOwnPropertyNames(it) {
                return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
            };
        },
        {
            './_object-gopn': 82,
            './_to-iobject': 116
        }
    ],
    82: [
        function (require, module, exports) {
            var $keys = require('./_object-keys-internal'), hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');
            exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
                return $keys(O, hiddenKeys);
            };
        },
        {
            './_enum-bug-keys': 40,
            './_object-keys-internal': 85
        }
    ],
    83: [
        function (require, module, exports) {
            exports.f = Object.getOwnPropertySymbols;
        },
        {}
    ],
    84: [
        function (require, module, exports) {
            var has = require('./_has'), toObject = require('./_to-object'), IE_PROTO = require('./_shared-key')('IE_PROTO'), ObjectProto = Object.prototype;
            module.exports = Object.getPrototypeOf || function (O) {
                O = toObject(O);
                if (has(O, IE_PROTO))
                    return O[IE_PROTO];
                if (typeof O.constructor == 'function' && O instanceof O.constructor) {
                    return O.constructor.prototype;
                }
                return O instanceof Object ? ObjectProto : null;
            };
        },
        {
            './_has': 49,
            './_shared-key': 102,
            './_to-object': 118
        }
    ],
    85: [
        function (require, module, exports) {
            var has = require('./_has'), toIObject = require('./_to-iobject'), arrayIndexOf = require('./_array-includes')(false), IE_PROTO = require('./_shared-key')('IE_PROTO');
            module.exports = function (object, names) {
                var O = toIObject(object), i = 0, result = [], key;
                for (key in O)
                    if (key != IE_PROTO)
                        has(O, key) && result.push(key);
                while (names.length > i)
                    if (has(O, key = names[i++])) {
                        ~arrayIndexOf(result, key) || result.push(key);
                    }
                return result;
            };
        },
        {
            './_array-includes': 21,
            './_has': 49,
            './_shared-key': 102,
            './_to-iobject': 116
        }
    ],
    86: [
        function (require, module, exports) {
            var $keys = require('./_object-keys-internal'), enumBugKeys = require('./_enum-bug-keys');
            module.exports = Object.keys || function keys(O) {
                return $keys(O, enumBugKeys);
            };
        },
        {
            './_enum-bug-keys': 40,
            './_object-keys-internal': 85
        }
    ],
    87: [
        function (require, module, exports) {
            exports.f = {}.propertyIsEnumerable;
        },
        {}
    ],
    88: [
        function (require, module, exports) {
            var $export = require('./_export'), core = require('./_core'), fails = require('./_fails');
            module.exports = function (KEY, exec) {
                var fn = (core.Object || {})[KEY] || Object[KEY], exp = {};
                exp[KEY] = exec(fn);
                $export($export.S + $export.F * fails(function () {
                    fn(1);
                }), 'Object', exp);
            };
        },
        {
            './_core': 33,
            './_export': 42,
            './_fails': 44
        }
    ],
    89: [
        function (require, module, exports) {
            var getKeys = require('./_object-keys'), toIObject = require('./_to-iobject'), isEnum = require('./_object-pie').f;
            module.exports = function (isEntries) {
                return function (it) {
                    var O = toIObject(it), keys = getKeys(O), length = keys.length, i = 0, result = [], key;
                    while (length > i)
                        if (isEnum.call(O, key = keys[i++])) {
                            result.push(isEntries ? [
                                key,
                                O[key]
                            ] : O[key]);
                        }
                    return result;
                };
            };
        },
        {
            './_object-keys': 86,
            './_object-pie': 87,
            './_to-iobject': 116
        }
    ],
    90: [
        function (require, module, exports) {
            var gOPN = require('./_object-gopn'), gOPS = require('./_object-gops'), anObject = require('./_an-object'), Reflect = require('./_global').Reflect;
            module.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
                var keys = gOPN.f(anObject(it)), getSymbols = gOPS.f;
                return getSymbols ? keys.concat(getSymbols(it)) : keys;
            };
        },
        {
            './_an-object': 17,
            './_global': 48,
            './_object-gopn': 82,
            './_object-gops': 83
        }
    ],
    91: [
        function (require, module, exports) {
            var $parseFloat = require('./_global').parseFloat, $trim = require('./_string-trim').trim;
            module.exports = 1 / $parseFloat(require('./_string-ws') + '-0') !== -Infinity ? function parseFloat(str) {
                var string = $trim(String(str), 3), result = $parseFloat(string);
                return result === 0 && string.charAt(0) == '-' ? -0 : result;
            } : $parseFloat;
        },
        {
            './_global': 48,
            './_string-trim': 111,
            './_string-ws': 112
        }
    ],
    92: [
        function (require, module, exports) {
            var $parseInt = require('./_global').parseInt, $trim = require('./_string-trim').trim, ws = require('./_string-ws'), hex = /^[\-+]?0[xX]/;
            module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {
                var string = $trim(String(str), 3);
                return $parseInt(string, radix >>> 0 || (hex.test(string) ? 16 : 10));
            } : $parseInt;
        },
        {
            './_global': 48,
            './_string-trim': 111,
            './_string-ws': 112
        }
    ],
    93: [
        function (require, module, exports) {
            'use strict';
            var path = require('./_path'), invoke = require('./_invoke'), aFunction = require('./_a-function');
            module.exports = function () {
                var fn = aFunction(this), length = arguments.length, pargs = Array(length), i = 0, _ = path._, holder = false;
                while (length > i)
                    if ((pargs[i] = arguments[i++]) === _)
                        holder = true;
                return function () {
                    var that = this, aLen = arguments.length, j = 0, k = 0, args;
                    if (!holder && !aLen)
                        return invoke(fn, pargs, that);
                    args = pargs.slice();
                    if (holder)
                        for (; length > j; j++)
                            if (args[j] === _)
                                args[j] = arguments[k++];
                    while (aLen > k)
                        args.push(arguments[k++]);
                    return invoke(fn, args, that);
                };
            };
        },
        {
            './_a-function': 13,
            './_invoke': 54,
            './_path': 94
        }
    ],
    94: [
        function (require, module, exports) {
            module.exports = require('./_global');
        },
        { './_global': 48 }
    ],
    95: [
        function (require, module, exports) {
            module.exports = function (bitmap, value) {
                return {
                    enumerable: !(bitmap & 1),
                    configurable: !(bitmap & 2),
                    writable: !(bitmap & 4),
                    value: value
                };
            };
        },
        {}
    ],
    96: [
        function (require, module, exports) {
            var redefine = require('./_redefine');
            module.exports = function (target, src, safe) {
                for (var key in src)
                    redefine(target, key, src[key], safe);
                return target;
            };
        },
        { './_redefine': 97 }
    ],
    97: [
        function (require, module, exports) {
            var global = require('./_global'), hide = require('./_hide'), has = require('./_has'), SRC = require('./_uid')('src'), TO_STRING = 'toString', $toString = Function[TO_STRING], TPL = ('' + $toString).split(TO_STRING);
            require('./_core').inspectSource = function (it) {
                return $toString.call(it);
            };
            (module.exports = function (O, key, val, safe) {
                var isFunction = typeof val == 'function';
                if (isFunction)
                    has(val, 'name') || hide(val, 'name', key);
                if (O[key] === val)
                    return;
                if (isFunction)
                    has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
                if (O === global) {
                    O[key] = val;
                } else {
                    if (!safe) {
                        delete O[key];
                        hide(O, key, val);
                    } else {
                        if (O[key])
                            O[key] = val;
                        else
                            hide(O, key, val);
                    }
                }
            })(Function.prototype, TO_STRING, function toString() {
                return typeof this == 'function' && this[SRC] || $toString.call(this);
            });
        },
        {
            './_core': 33,
            './_global': 48,
            './_has': 49,
            './_hide': 50,
            './_uid': 123
        }
    ],
    98: [
        function (require, module, exports) {
            module.exports = Object.is || function is(x, y) {
                return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
            };
        },
        {}
    ],
    99: [
        function (require, module, exports) {
            var isObject = require('./_is-object'), anObject = require('./_an-object');
            var check = function (O, proto) {
                anObject(O);
                if (!isObject(proto) && proto !== null)
                    throw TypeError(proto + ': can\'t set as prototype!');
            };
            module.exports = {
                set: Object.setPrototypeOf || ('__proto__' in {} ? function (test, buggy, set) {
                    try {
                        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);
                        set(test, []);
                        buggy = !(test instanceof Array);
                    } catch (e) {
                        buggy = true;
                    }
                    return function setPrototypeOf(O, proto) {
                        check(O, proto);
                        if (buggy)
                            O.__proto__ = proto;
                        else
                            set(O, proto);
                        return O;
                    };
                }({}, false) : undefined),
                check: check
            };
        },
        {
            './_an-object': 17,
            './_ctx': 35,
            './_is-object': 59,
            './_object-gopd': 80
        }
    ],
    100: [
        function (require, module, exports) {
            'use strict';
            var global = require('./_global'), dP = require('./_object-dp'), DESCRIPTORS = require('./_descriptors'), SPECIES = require('./_wks')('species');
            module.exports = function (KEY) {
                var C = global[KEY];
                if (DESCRIPTORS && C && !C[SPECIES])
                    dP.f(C, SPECIES, {
                        configurable: true,
                        get: function () {
                            return this;
                        }
                    });
            };
        },
        {
            './_descriptors': 38,
            './_global': 48,
            './_object-dp': 77,
            './_wks': 126
        }
    ],
    101: [
        function (require, module, exports) {
            var def = require('./_object-dp').f, has = require('./_has'), TAG = require('./_wks')('toStringTag');
            module.exports = function (it, tag, stat) {
                if (it && !has(it = stat ? it : it.prototype, TAG))
                    def(it, TAG, {
                        configurable: true,
                        value: tag
                    });
            };
        },
        {
            './_has': 49,
            './_object-dp': 77,
            './_wks': 126
        }
    ],
    102: [
        function (require, module, exports) {
            var shared = require('./_shared')('keys'), uid = require('./_uid');
            module.exports = function (key) {
                return shared[key] || (shared[key] = uid(key));
            };
        },
        {
            './_shared': 103,
            './_uid': 123
        }
    ],
    103: [
        function (require, module, exports) {
            var global = require('./_global'), SHARED = '__core-js_shared__', store = global[SHARED] || (global[SHARED] = {});
            module.exports = function (key) {
                return store[key] || (store[key] = {});
            };
        },
        { './_global': 48 }
    ],
    104: [
        function (require, module, exports) {
            var anObject = require('./_an-object'), aFunction = require('./_a-function'), SPECIES = require('./_wks')('species');
            module.exports = function (O, D) {
                var C = anObject(O).constructor, S;
                return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
            };
        },
        {
            './_a-function': 13,
            './_an-object': 17,
            './_wks': 126
        }
    ],
    105: [
        function (require, module, exports) {
            var fails = require('./_fails');
            module.exports = function (method, arg) {
                return !!method && fails(function () {
                    arg ? method.call(null, function () {
                    }, 1) : method.call(null);
                });
            };
        },
        { './_fails': 44 }
    ],
    106: [
        function (require, module, exports) {
            var toInteger = require('./_to-integer'), defined = require('./_defined');
            module.exports = function (TO_STRING) {
                return function (that, pos) {
                    var s = String(defined(that)), i = toInteger(pos), l = s.length, a, b;
                    if (i < 0 || i >= l)
                        return TO_STRING ? '' : undefined;
                    a = s.charCodeAt(i);
                    return a < 55296 || a > 56319 || i + 1 === l || (b = s.charCodeAt(i + 1)) < 56320 || b > 57343 ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 55296 << 10) + (b - 56320) + 65536;
                };
            };
        },
        {
            './_defined': 37,
            './_to-integer': 115
        }
    ],
    107: [
        function (require, module, exports) {
            var isRegExp = require('./_is-regexp'), defined = require('./_defined');
            module.exports = function (that, searchString, NAME) {
                if (isRegExp(searchString))
                    throw TypeError('String#' + NAME + ' doesn\'t accept regex!');
                return String(defined(that));
            };
        },
        {
            './_defined': 37,
            './_is-regexp': 60
        }
    ],
    108: [
        function (require, module, exports) {
            var $export = require('./_export'), fails = require('./_fails'), defined = require('./_defined'), quot = /"/g;
            var createHTML = function (string, tag, attribute, value) {
                var S = String(defined(string)), p1 = '<' + tag;
                if (attribute !== '')
                    p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
                return p1 + '>' + S + '</' + tag + '>';
            };
            module.exports = function (NAME, exec) {
                var O = {};
                O[NAME] = exec(createHTML);
                $export($export.P + $export.F * fails(function () {
                    var test = ''[NAME]('"');
                    return test !== test.toLowerCase() || test.split('"').length > 3;
                }), 'String', O);
            };
        },
        {
            './_defined': 37,
            './_export': 42,
            './_fails': 44
        }
    ],
    109: [
        function (require, module, exports) {
            var toLength = require('./_to-length'), repeat = require('./_string-repeat'), defined = require('./_defined');
            module.exports = function (that, maxLength, fillString, left) {
                var S = String(defined(that)), stringLength = S.length, fillStr = fillString === undefined ? ' ' : String(fillString), intMaxLength = toLength(maxLength);
                if (intMaxLength <= stringLength || fillStr == '')
                    return S;
                var fillLen = intMaxLength - stringLength, stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
                if (stringFiller.length > fillLen)
                    stringFiller = stringFiller.slice(0, fillLen);
                return left ? stringFiller + S : S + stringFiller;
            };
        },
        {
            './_defined': 37,
            './_string-repeat': 110,
            './_to-length': 117
        }
    ],
    110: [
        function (require, module, exports) {
            'use strict';
            var toInteger = require('./_to-integer'), defined = require('./_defined');
            module.exports = function repeat(count) {
                var str = String(defined(this)), res = '', n = toInteger(count);
                if (n < 0 || n == Infinity)
                    throw RangeError('Count can\'t be negative');
                for (; n > 0; (n >>>= 1) && (str += str))
                    if (n & 1)
                        res += str;
                return res;
            };
        },
        {
            './_defined': 37,
            './_to-integer': 115
        }
    ],
    111: [
        function (require, module, exports) {
            var $export = require('./_export'), defined = require('./_defined'), fails = require('./_fails'), spaces = require('./_string-ws'), space = '[' + spaces + ']', non = '\u200B\x85', ltrim = RegExp('^' + space + space + '*'), rtrim = RegExp(space + space + '*$');
            var exporter = function (KEY, exec, ALIAS) {
                var exp = {};
                var FORCE = fails(function () {
                    return !!spaces[KEY]() || non[KEY]() != non;
                });
                var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
                if (ALIAS)
                    exp[ALIAS] = fn;
                $export($export.P + $export.F * FORCE, 'String', exp);
            };
            var trim = exporter.trim = function (string, TYPE) {
                string = String(defined(string));
                if (TYPE & 1)
                    string = string.replace(ltrim, '');
                if (TYPE & 2)
                    string = string.replace(rtrim, '');
                return string;
            };
            module.exports = exporter;
        },
        {
            './_defined': 37,
            './_export': 42,
            './_fails': 44,
            './_string-ws': 112
        }
    ],
    112: [
        function (require, module, exports) {
            module.exports = '\t\n\x0B\f\r \xA0\u1680\u180E\u2000\u2001\u2002\u2003' + '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';
        },
        {}
    ],
    113: [
        function (require, module, exports) {
            var ctx = require('./_ctx'), invoke = require('./_invoke'), html = require('./_html'), cel = require('./_dom-create'), global = require('./_global'), process = global.process, setTask = global.setImmediate, clearTask = global.clearImmediate, MessageChannel = global.MessageChannel, counter = 0, queue = {}, ONREADYSTATECHANGE = 'onreadystatechange', defer, channel, port;
            var run = function () {
                var id = +this;
                if (queue.hasOwnProperty(id)) {
                    var fn = queue[id];
                    delete queue[id];
                    fn();
                }
            };
            var listener = function (event) {
                run.call(event.data);
            };
            if (!setTask || !clearTask) {
                setTask = function setImmediate(fn) {
                    var args = [], i = 1;
                    while (arguments.length > i)
                        args.push(arguments[i++]);
                    queue[++counter] = function () {
                        invoke(typeof fn == 'function' ? fn : Function(fn), args);
                    };
                    defer(counter);
                    return counter;
                };
                clearTask = function clearImmediate(id) {
                    delete queue[id];
                };
                if (require('./_cof')(process) == 'process') {
                    defer = function (id) {
                        process.nextTick(ctx(run, id, 1));
                    };
                } else if (MessageChannel) {
                    channel = new MessageChannel();
                    port = channel.port2;
                    channel.port1.onmessage = listener;
                    defer = ctx(port.postMessage, port, 1);
                } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
                    defer = function (id) {
                        global.postMessage(id + '', '*');
                    };
                    global.addEventListener('message', listener, false);
                } else if (ONREADYSTATECHANGE in cel('script')) {
                    defer = function (id) {
                        html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
                            html.removeChild(this);
                            run.call(id);
                        };
                    };
                } else {
                    defer = function (id) {
                        setTimeout(ctx(run, id, 1), 0);
                    };
                }
            }
            module.exports = {
                set: setTask,
                clear: clearTask
            };
        },
        {
            './_cof': 28,
            './_ctx': 35,
            './_dom-create': 39,
            './_global': 48,
            './_html': 51,
            './_invoke': 54
        }
    ],
    114: [
        function (require, module, exports) {
            var toInteger = require('./_to-integer'), max = Math.max, min = Math.min;
            module.exports = function (index, length) {
                index = toInteger(index);
                return index < 0 ? max(index + length, 0) : min(index, length);
            };
        },
        { './_to-integer': 115 }
    ],
    115: [
        function (require, module, exports) {
            var ceil = Math.ceil, floor = Math.floor;
            module.exports = function (it) {
                return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
            };
        },
        {}
    ],
    116: [
        function (require, module, exports) {
            var IObject = require('./_iobject'), defined = require('./_defined');
            module.exports = function (it) {
                return IObject(defined(it));
            };
        },
        {
            './_defined': 37,
            './_iobject': 55
        }
    ],
    117: [
        function (require, module, exports) {
            var toInteger = require('./_to-integer'), min = Math.min;
            module.exports = function (it) {
                return it > 0 ? min(toInteger(it), 9007199254740991) : 0;
            };
        },
        { './_to-integer': 115 }
    ],
    118: [
        function (require, module, exports) {
            var defined = require('./_defined');
            module.exports = function (it) {
                return Object(defined(it));
            };
        },
        { './_defined': 37 }
    ],
    119: [
        function (require, module, exports) {
            var isObject = require('./_is-object');
            module.exports = function (it, S) {
                if (!isObject(it))
                    return it;
                var fn, val;
                if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))
                    return val;
                if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))
                    return val;
                if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))
                    return val;
                throw TypeError('Can\'t convert object to primitive value');
            };
        },
        { './_is-object': 59 }
    ],
    120: [
        function (require, module, exports) {
            'use strict';
            if (require('./_descriptors')) {
                var LIBRARY = require('./_library'), global = require('./_global'), fails = require('./_fails'), $export = require('./_export'), $typed = require('./_typed'), $buffer = require('./_typed-buffer'), ctx = require('./_ctx'), anInstance = require('./_an-instance'), propertyDesc = require('./_property-desc'), hide = require('./_hide'), redefineAll = require('./_redefine-all'), isInteger = require('./_is-integer'), toInteger = require('./_to-integer'), toLength = require('./_to-length'), toIndex = require('./_to-index'), toPrimitive = require('./_to-primitive'), has = require('./_has'), same = require('./_same-value'), classof = require('./_classof'), isObject = require('./_is-object'), toObject = require('./_to-object'), isArrayIter = require('./_is-array-iter'), create = require('./_object-create'), getPrototypeOf = require('./_object-gpo'), gOPN = require('./_object-gopn').f, isIterable = require('./core.is-iterable'), getIterFn = require('./core.get-iterator-method'), uid = require('./_uid'), wks = require('./_wks'), createArrayMethod = require('./_array-methods'), createArrayIncludes = require('./_array-includes'), speciesConstructor = require('./_species-constructor'), ArrayIterators = require('./es6.array.iterator'), Iterators = require('./_iterators'), $iterDetect = require('./_iter-detect'), setSpecies = require('./_set-species'), arrayFill = require('./_array-fill'), arrayCopyWithin = require('./_array-copy-within'), $DP = require('./_object-dp'), $GOPD = require('./_object-gopd'), dP = $DP.f, gOPD = $GOPD.f, RangeError = global.RangeError, TypeError = global.TypeError, Uint8Array = global.Uint8Array, ARRAY_BUFFER = 'ArrayBuffer', SHARED_BUFFER = 'Shared' + ARRAY_BUFFER, BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT', PROTOTYPE = 'prototype', ArrayProto = Array[PROTOTYPE], $ArrayBuffer = $buffer.ArrayBuffer, $DataView = $buffer.DataView, arrayForEach = createArrayMethod(0), arrayFilter = createArrayMethod(2), arraySome = createArrayMethod(3), arrayEvery = createArrayMethod(4), arrayFind = createArrayMethod(5), arrayFindIndex = createArrayMethod(6), arrayIncludes = createArrayIncludes(true), arrayIndexOf = createArrayIncludes(false), arrayValues = ArrayIterators.values, arrayKeys = ArrayIterators.keys, arrayEntries = ArrayIterators.entries, arrayLastIndexOf = ArrayProto.lastIndexOf, arrayReduce = ArrayProto.reduce, arrayReduceRight = ArrayProto.reduceRight, arrayJoin = ArrayProto.join, arraySort = ArrayProto.sort, arraySlice = ArrayProto.slice, arrayToString = ArrayProto.toString, arrayToLocaleString = ArrayProto.toLocaleString, ITERATOR = wks('iterator'), TAG = wks('toStringTag'), TYPED_CONSTRUCTOR = uid('typed_constructor'), DEF_CONSTRUCTOR = uid('def_constructor'), ALL_CONSTRUCTORS = $typed.CONSTR, TYPED_ARRAY = $typed.TYPED, VIEW = $typed.VIEW, WRONG_LENGTH = 'Wrong length!';
                var $map = createArrayMethod(1, function (O, length) {
                    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
                });
                var LITTLE_ENDIAN = fails(function () {
                    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
                });
                var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {
                    new Uint8Array(1).set({});
                });
                var strictToLength = function (it, SAME) {
                    if (it === undefined)
                        throw TypeError(WRONG_LENGTH);
                    var number = +it, length = toLength(it);
                    if (SAME && !same(number, length))
                        throw RangeError(WRONG_LENGTH);
                    return length;
                };
                var toOffset = function (it, BYTES) {
                    var offset = toInteger(it);
                    if (offset < 0 || offset % BYTES)
                        throw RangeError('Wrong offset!');
                    return offset;
                };
                var validate = function (it) {
                    if (isObject(it) && TYPED_ARRAY in it)
                        return it;
                    throw TypeError(it + ' is not a typed array!');
                };
                var allocate = function (C, length) {
                    if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {
                        throw TypeError('It is not a typed array constructor!');
                    }
                    return new C(length);
                };
                var speciesFromList = function (O, list) {
                    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
                };
                var fromList = function (C, list) {
                    var index = 0, length = list.length, result = allocate(C, length);
                    while (length > index)
                        result[index] = list[index++];
                    return result;
                };
                var addGetter = function (it, key, internal) {
                    dP(it, key, {
                        get: function () {
                            return this._d[internal];
                        }
                    });
                };
                var $from = function from(source) {
                    var O = toObject(source), aLen = arguments.length, mapfn = aLen > 1 ? arguments[1] : undefined, mapping = mapfn !== undefined, iterFn = getIterFn(O), i, length, values, result, step, iterator;
                    if (iterFn != undefined && !isArrayIter(iterFn)) {
                        for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {
                            values.push(step.value);
                        }
                        O = values;
                    }
                    if (mapping && aLen > 2)
                        mapfn = ctx(mapfn, arguments[2], 2);
                    for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {
                        result[i] = mapping ? mapfn(O[i], i) : O[i];
                    }
                    return result;
                };
                var $of = function of() {
                    var index = 0, length = arguments.length, result = allocate(this, length);
                    while (length > index)
                        result[index] = arguments[index++];
                    return result;
                };
                var TO_LOCALE_BUG = !!Uint8Array && fails(function () {
                    arrayToLocaleString.call(new Uint8Array(1));
                });
                var $toLocaleString = function toLocaleString() {
                    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
                };
                var proto = {
                    copyWithin: function copyWithin(target, start) {
                        return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
                    },
                    every: function every(callbackfn) {
                        return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
                    },
                    fill: function fill(value) {
                        return arrayFill.apply(validate(this), arguments);
                    },
                    filter: function filter(callbackfn) {
                        return speciesFromList(this, arrayFilter(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined));
                    },
                    find: function find(predicate) {
                        return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
                    },
                    findIndex: function findIndex(predicate) {
                        return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
                    },
                    forEach: function forEach(callbackfn) {
                        arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
                    },
                    indexOf: function indexOf(searchElement) {
                        return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
                    },
                    includes: function includes(searchElement) {
                        return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
                    },
                    join: function join(separator) {
                        return arrayJoin.apply(validate(this), arguments);
                    },
                    lastIndexOf: function lastIndexOf(searchElement) {
                        return arrayLastIndexOf.apply(validate(this), arguments);
                    },
                    map: function map(mapfn) {
                        return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
                    },
                    reduce: function reduce(callbackfn) {
                        return arrayReduce.apply(validate(this), arguments);
                    },
                    reduceRight: function reduceRight(callbackfn) {
                        return arrayReduceRight.apply(validate(this), arguments);
                    },
                    reverse: function reverse() {
                        var that = this, length = validate(that).length, middle = Math.floor(length / 2), index = 0, value;
                        while (index < middle) {
                            value = that[index];
                            that[index++] = that[--length];
                            that[length] = value;
                        }
                        return that;
                    },
                    some: function some(callbackfn) {
                        return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
                    },
                    sort: function sort(comparefn) {
                        return arraySort.call(validate(this), comparefn);
                    },
                    subarray: function subarray(begin, end) {
                        var O = validate(this), length = O.length, $begin = toIndex(begin, length);
                        return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(O.buffer, O.byteOffset + $begin * O.BYTES_PER_ELEMENT, toLength((end === undefined ? length : toIndex(end, length)) - $begin));
                    }
                };
                var $slice = function slice(start, end) {
                    return speciesFromList(this, arraySlice.call(validate(this), start, end));
                };
                var $set = function set(arrayLike) {
                    validate(this);
                    var offset = toOffset(arguments[1], 1), length = this.length, src = toObject(arrayLike), len = toLength(src.length), index = 0;
                    if (len + offset > length)
                        throw RangeError(WRONG_LENGTH);
                    while (index < len)
                        this[offset + index] = src[index++];
                };
                var $iterators = {
                    entries: function entries() {
                        return arrayEntries.call(validate(this));
                    },
                    keys: function keys() {
                        return arrayKeys.call(validate(this));
                    },
                    values: function values() {
                        return arrayValues.call(validate(this));
                    }
                };
                var isTAIndex = function (target, key) {
                    return isObject(target) && target[TYPED_ARRAY] && typeof key != 'symbol' && key in target && String(+key) == String(key);
                };
                var $getDesc = function getOwnPropertyDescriptor(target, key) {
                    return isTAIndex(target, key = toPrimitive(key, true)) ? propertyDesc(2, target[key]) : gOPD(target, key);
                };
                var $setDesc = function defineProperty(target, key, desc) {
                    if (isTAIndex(target, key = toPrimitive(key, true)) && isObject(desc) && has(desc, 'value') && !has(desc, 'get') && !has(desc, 'set') && !desc.configurable && (!has(desc, 'writable') || desc.writable) && (!has(desc, 'enumerable') || desc.enumerable)) {
                        target[key] = desc.value;
                        return target;
                    } else
                        return dP(target, key, desc);
                };
                if (!ALL_CONSTRUCTORS) {
                    $GOPD.f = $getDesc;
                    $DP.f = $setDesc;
                }
                $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
                    getOwnPropertyDescriptor: $getDesc,
                    defineProperty: $setDesc
                });
                if (fails(function () {
                        arrayToString.call({});
                    })) {
                    arrayToString = arrayToLocaleString = function toString() {
                        return arrayJoin.call(this);
                    };
                }
                var $TypedArrayPrototype$ = redefineAll({}, proto);
                redefineAll($TypedArrayPrototype$, $iterators);
                hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
                redefineAll($TypedArrayPrototype$, {
                    slice: $slice,
                    set: $set,
                    constructor: function () {
                    },
                    toString: arrayToString,
                    toLocaleString: $toLocaleString
                });
                addGetter($TypedArrayPrototype$, 'buffer', 'b');
                addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
                addGetter($TypedArrayPrototype$, 'byteLength', 'l');
                addGetter($TypedArrayPrototype$, 'length', 'e');
                dP($TypedArrayPrototype$, TAG, {
                    get: function () {
                        return this[TYPED_ARRAY];
                    }
                });
                module.exports = function (KEY, BYTES, wrapper, CLAMPED) {
                    CLAMPED = !!CLAMPED;
                    var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array', ISNT_UINT8 = NAME != 'Uint8Array', GETTER = 'get' + KEY, SETTER = 'set' + KEY, TypedArray = global[NAME], Base = TypedArray || {}, TAC = TypedArray && getPrototypeOf(TypedArray), FORCED = !TypedArray || !$typed.ABV, O = {}, TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
                    var getter = function (that, index) {
                        var data = that._d;
                        return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
                    };
                    var setter = function (that, index, value) {
                        var data = that._d;
                        if (CLAMPED)
                            value = (value = Math.round(value)) < 0 ? 0 : value > 255 ? 255 : value & 255;
                        data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
                    };
                    var addElement = function (that, index) {
                        dP(that, index, {
                            get: function () {
                                return getter(this, index);
                            },
                            set: function (value) {
                                return setter(this, index, value);
                            },
                            enumerable: true
                        });
                    };
                    if (FORCED) {
                        TypedArray = wrapper(function (that, data, $offset, $length) {
                            anInstance(that, TypedArray, NAME, '_d');
                            var index = 0, offset = 0, buffer, byteLength, length, klass;
                            if (!isObject(data)) {
                                length = strictToLength(data, true);
                                byteLength = length * BYTES;
                                buffer = new $ArrayBuffer(byteLength);
                            } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
                                buffer = data;
                                offset = toOffset($offset, BYTES);
                                var $len = data.byteLength;
                                if ($length === undefined) {
                                    if ($len % BYTES)
                                        throw RangeError(WRONG_LENGTH);
                                    byteLength = $len - offset;
                                    if (byteLength < 0)
                                        throw RangeError(WRONG_LENGTH);
                                } else {
                                    byteLength = toLength($length) * BYTES;
                                    if (byteLength + offset > $len)
                                        throw RangeError(WRONG_LENGTH);
                                }
                                length = byteLength / BYTES;
                            } else if (TYPED_ARRAY in data) {
                                return fromList(TypedArray, data);
                            } else {
                                return $from.call(TypedArray, data);
                            }
                            hide(that, '_d', {
                                b: buffer,
                                o: offset,
                                l: byteLength,
                                e: length,
                                v: new $DataView(buffer)
                            });
                            while (index < length)
                                addElement(that, index++);
                        });
                        TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
                        hide(TypedArrayPrototype, 'constructor', TypedArray);
                    } else if (!$iterDetect(function (iter) {
                            new TypedArray(null);
                            new TypedArray(iter);
                        }, true)) {
                        TypedArray = wrapper(function (that, data, $offset, $length) {
                            anInstance(that, TypedArray, NAME);
                            var klass;
                            if (!isObject(data))
                                return new Base(strictToLength(data, ISNT_UINT8));
                            if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
                                return $length !== undefined ? new Base(data, toOffset($offset, BYTES), $length) : $offset !== undefined ? new Base(data, toOffset($offset, BYTES)) : new Base(data);
                            }
                            if (TYPED_ARRAY in data)
                                return fromList(TypedArray, data);
                            return $from.call(TypedArray, data);
                        });
                        arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {
                            if (!(key in TypedArray))
                                hide(TypedArray, key, Base[key]);
                        });
                        TypedArray[PROTOTYPE] = TypedArrayPrototype;
                        if (!LIBRARY)
                            TypedArrayPrototype.constructor = TypedArray;
                    }
                    var $nativeIterator = TypedArrayPrototype[ITERATOR], CORRECT_ITER_NAME = !!$nativeIterator && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined), $iterator = $iterators.values;
                    hide(TypedArray, TYPED_CONSTRUCTOR, true);
                    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
                    hide(TypedArrayPrototype, VIEW, true);
                    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);
                    if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {
                        dP(TypedArrayPrototype, TAG, {
                            get: function () {
                                return NAME;
                            }
                        });
                    }
                    O[NAME] = TypedArray;
                    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);
                    $export($export.S, NAME, {
                        BYTES_PER_ELEMENT: BYTES,
                        from: $from,
                        of: $of
                    });
                    if (!(BYTES_PER_ELEMENT in TypedArrayPrototype))
                        hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);
                    $export($export.P, NAME, proto);
                    setSpecies(NAME);
                    $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });
                    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);
                    $export($export.P + $export.F * (TypedArrayPrototype.toString != arrayToString), NAME, { toString: arrayToString });
                    $export($export.P + $export.F * fails(function () {
                        new TypedArray(1).slice();
                    }), NAME, { slice: $slice });
                    $export($export.P + $export.F * (fails(function () {
                        return [
                            1,
                            2
                        ].toLocaleString() != new TypedArray([
                            1,
                            2
                        ]).toLocaleString();
                    }) || !fails(function () {
                        TypedArrayPrototype.toLocaleString.call([
                            1,
                            2
                        ]);
                    })), NAME, { toLocaleString: $toLocaleString });
                    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
                    if (!LIBRARY && !CORRECT_ITER_NAME)
                        hide(TypedArrayPrototype, ITERATOR, $iterator);
                };
            } else
                module.exports = function () {
                };
        },
        {
            './_an-instance': 16,
            './_array-copy-within': 18,
            './_array-fill': 19,
            './_array-includes': 21,
            './_array-methods': 22,
            './_classof': 27,
            './_ctx': 35,
            './_descriptors': 38,
            './_export': 42,
            './_fails': 44,
            './_global': 48,
            './_has': 49,
            './_hide': 50,
            './_is-array-iter': 56,
            './_is-integer': 58,
            './_is-object': 59,
            './_iter-detect': 64,
            './_iterators': 66,
            './_library': 68,
            './_object-create': 76,
            './_object-dp': 77,
            './_object-gopd': 80,
            './_object-gopn': 82,
            './_object-gpo': 84,
            './_property-desc': 95,
            './_redefine-all': 96,
            './_same-value': 98,
            './_set-species': 100,
            './_species-constructor': 104,
            './_to-index': 114,
            './_to-integer': 115,
            './_to-length': 117,
            './_to-object': 118,
            './_to-primitive': 119,
            './_typed': 122,
            './_typed-buffer': 121,
            './_uid': 123,
            './_wks': 126,
            './core.get-iterator-method': 127,
            './core.is-iterable': 128,
            './es6.array.iterator': 139
        }
    ],
    121: [
        function (require, module, exports) {
            'use strict';
            var global = require('./_global'), DESCRIPTORS = require('./_descriptors'), LIBRARY = require('./_library'), $typed = require('./_typed'), hide = require('./_hide'), redefineAll = require('./_redefine-all'), fails = require('./_fails'), anInstance = require('./_an-instance'), toInteger = require('./_to-integer'), toLength = require('./_to-length'), gOPN = require('./_object-gopn').f, dP = require('./_object-dp').f, arrayFill = require('./_array-fill'), setToStringTag = require('./_set-to-string-tag'), ARRAY_BUFFER = 'ArrayBuffer', DATA_VIEW = 'DataView', PROTOTYPE = 'prototype', WRONG_LENGTH = 'Wrong length!', WRONG_INDEX = 'Wrong index!', $ArrayBuffer = global[ARRAY_BUFFER], $DataView = global[DATA_VIEW], Math = global.Math, parseInt = global.parseInt, RangeError = global.RangeError, Infinity = global.Infinity, BaseBuffer = $ArrayBuffer, abs = Math.abs, pow = Math.pow, min = Math.min, floor = Math.floor, log = Math.log, LN2 = Math.LN2, BUFFER = 'buffer', BYTE_LENGTH = 'byteLength', BYTE_OFFSET = 'byteOffset', $BUFFER = DESCRIPTORS ? '_b' : BUFFER, $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH, $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET;
            var packIEEE754 = function (value, mLen, nBytes) {
                var buffer = Array(nBytes), eLen = nBytes * 8 - mLen - 1, eMax = (1 << eLen) - 1, eBias = eMax >> 1, rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0, i = 0, s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0, e, m, c;
                value = abs(value);
                if (value != value || value === Infinity) {
                    m = value != value ? 1 : 0;
                    e = eMax;
                } else {
                    e = floor(log(value) / LN2);
                    if (value * (c = pow(2, -e)) < 1) {
                        e--;
                        c *= 2;
                    }
                    if (e + eBias >= 1) {
                        value += rt / c;
                    } else {
                        value += rt * pow(2, 1 - eBias);
                    }
                    if (value * c >= 2) {
                        e++;
                        c /= 2;
                    }
                    if (e + eBias >= eMax) {
                        m = 0;
                        e = eMax;
                    } else if (e + eBias >= 1) {
                        m = (value * c - 1) * pow(2, mLen);
                        e = e + eBias;
                    } else {
                        m = value * pow(2, eBias - 1) * pow(2, mLen);
                        e = 0;
                    }
                }
                for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
                e = e << mLen | m;
                eLen += mLen;
                for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
                buffer[--i] |= s * 128;
                return buffer;
            };
            var unpackIEEE754 = function (buffer, mLen, nBytes) {
                var eLen = nBytes * 8 - mLen - 1, eMax = (1 << eLen) - 1, eBias = eMax >> 1, nBits = eLen - 7, i = nBytes - 1, s = buffer[i--], e = s & 127, m;
                s >>= 7;
                for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
                m = e & (1 << -nBits) - 1;
                e >>= -nBits;
                nBits += mLen;
                for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
                if (e === 0) {
                    e = 1 - eBias;
                } else if (e === eMax) {
                    return m ? NaN : s ? -Infinity : Infinity;
                } else {
                    m = m + pow(2, mLen);
                    e = e - eBias;
                }
                return (s ? -1 : 1) * m * pow(2, e - mLen);
            };
            var unpackI32 = function (bytes) {
                return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
            };
            var packI8 = function (it) {
                return [it & 255];
            };
            var packI16 = function (it) {
                return [
                    it & 255,
                    it >> 8 & 255
                ];
            };
            var packI32 = function (it) {
                return [
                    it & 255,
                    it >> 8 & 255,
                    it >> 16 & 255,
                    it >> 24 & 255
                ];
            };
            var packF64 = function (it) {
                return packIEEE754(it, 52, 8);
            };
            var packF32 = function (it) {
                return packIEEE754(it, 23, 4);
            };
            var addGetter = function (C, key, internal) {
                dP(C[PROTOTYPE], key, {
                    get: function () {
                        return this[internal];
                    }
                });
            };
            var get = function (view, bytes, index, isLittleEndian) {
                var numIndex = +index, intIndex = toInteger(numIndex);
                if (numIndex != intIndex || intIndex < 0 || intIndex + bytes > view[$LENGTH])
                    throw RangeError(WRONG_INDEX);
                var store = view[$BUFFER]._b, start = intIndex + view[$OFFSET], pack = store.slice(start, start + bytes);
                return isLittleEndian ? pack : pack.reverse();
            };
            var set = function (view, bytes, index, conversion, value, isLittleEndian) {
                var numIndex = +index, intIndex = toInteger(numIndex);
                if (numIndex != intIndex || intIndex < 0 || intIndex + bytes > view[$LENGTH])
                    throw RangeError(WRONG_INDEX);
                var store = view[$BUFFER]._b, start = intIndex + view[$OFFSET], pack = conversion(+value);
                for (var i = 0; i < bytes; i++)
                    store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
            };
            var validateArrayBufferArguments = function (that, length) {
                anInstance(that, $ArrayBuffer, ARRAY_BUFFER);
                var numberLength = +length, byteLength = toLength(numberLength);
                if (numberLength != byteLength)
                    throw RangeError(WRONG_LENGTH);
                return byteLength;
            };
            if (!$typed.ABV) {
                $ArrayBuffer = function ArrayBuffer(length) {
                    var byteLength = validateArrayBufferArguments(this, length);
                    this._b = arrayFill.call(Array(byteLength), 0);
                    this[$LENGTH] = byteLength;
                };
                $DataView = function DataView(buffer, byteOffset, byteLength) {
                    anInstance(this, $DataView, DATA_VIEW);
                    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
                    var bufferLength = buffer[$LENGTH], offset = toInteger(byteOffset);
                    if (offset < 0 || offset > bufferLength)
                        throw RangeError('Wrong offset!');
                    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
                    if (offset + byteLength > bufferLength)
                        throw RangeError(WRONG_LENGTH);
                    this[$BUFFER] = buffer;
                    this[$OFFSET] = offset;
                    this[$LENGTH] = byteLength;
                };
                if (DESCRIPTORS) {
                    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
                    addGetter($DataView, BUFFER, '_b');
                    addGetter($DataView, BYTE_LENGTH, '_l');
                    addGetter($DataView, BYTE_OFFSET, '_o');
                }
                redefineAll($DataView[PROTOTYPE], {
                    getInt8: function getInt8(byteOffset) {
                        return get(this, 1, byteOffset)[0] << 24 >> 24;
                    },
                    getUint8: function getUint8(byteOffset) {
                        return get(this, 1, byteOffset)[0];
                    },
                    getInt16: function getInt16(byteOffset) {
                        var bytes = get(this, 2, byteOffset, arguments[1]);
                        return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
                    },
                    getUint16: function getUint16(byteOffset) {
                        var bytes = get(this, 2, byteOffset, arguments[1]);
                        return bytes[1] << 8 | bytes[0];
                    },
                    getInt32: function getInt32(byteOffset) {
                        return unpackI32(get(this, 4, byteOffset, arguments[1]));
                    },
                    getUint32: function getUint32(byteOffset) {
                        return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
                    },
                    getFloat32: function getFloat32(byteOffset) {
                        return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
                    },
                    getFloat64: function getFloat64(byteOffset) {
                        return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
                    },
                    setInt8: function setInt8(byteOffset, value) {
                        set(this, 1, byteOffset, packI8, value);
                    },
                    setUint8: function setUint8(byteOffset, value) {
                        set(this, 1, byteOffset, packI8, value);
                    },
                    setInt16: function setInt16(byteOffset, value) {
                        set(this, 2, byteOffset, packI16, value, arguments[2]);
                    },
                    setUint16: function setUint16(byteOffset, value) {
                        set(this, 2, byteOffset, packI16, value, arguments[2]);
                    },
                    setInt32: function setInt32(byteOffset, value) {
                        set(this, 4, byteOffset, packI32, value, arguments[2]);
                    },
                    setUint32: function setUint32(byteOffset, value) {
                        set(this, 4, byteOffset, packI32, value, arguments[2]);
                    },
                    setFloat32: function setFloat32(byteOffset, value) {
                        set(this, 4, byteOffset, packF32, value, arguments[2]);
                    },
                    setFloat64: function setFloat64(byteOffset, value) {
                        set(this, 8, byteOffset, packF64, value, arguments[2]);
                    }
                });
            } else {
                if (!fails(function () {
                        new $ArrayBuffer();
                    }) || !fails(function () {
                        new $ArrayBuffer(0.5);
                    })) {
                    $ArrayBuffer = function ArrayBuffer(length) {
                        return new BaseBuffer(validateArrayBufferArguments(this, length));
                    };
                    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
                    for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {
                        if (!((key = keys[j++]) in $ArrayBuffer))
                            hide($ArrayBuffer, key, BaseBuffer[key]);
                    }
                    ;
                    if (!LIBRARY)
                        ArrayBufferProto.constructor = $ArrayBuffer;
                }
                var view = new $DataView(new $ArrayBuffer(2)), $setInt8 = $DataView[PROTOTYPE].setInt8;
                view.setInt8(0, 2147483648);
                view.setInt8(1, 2147483649);
                if (view.getInt8(0) || !view.getInt8(1))
                    redefineAll($DataView[PROTOTYPE], {
                        setInt8: function setInt8(byteOffset, value) {
                            $setInt8.call(this, byteOffset, value << 24 >> 24);
                        },
                        setUint8: function setUint8(byteOffset, value) {
                            $setInt8.call(this, byteOffset, value << 24 >> 24);
                        }
                    }, true);
            }
            setToStringTag($ArrayBuffer, ARRAY_BUFFER);
            setToStringTag($DataView, DATA_VIEW);
            hide($DataView[PROTOTYPE], $typed.VIEW, true);
            exports[ARRAY_BUFFER] = $ArrayBuffer;
            exports[DATA_VIEW] = $DataView;
        },
        {
            './_an-instance': 16,
            './_array-fill': 19,
            './_descriptors': 38,
            './_fails': 44,
            './_global': 48,
            './_hide': 50,
            './_library': 68,
            './_object-dp': 77,
            './_object-gopn': 82,
            './_redefine-all': 96,
            './_set-to-string-tag': 101,
            './_to-integer': 115,
            './_to-length': 117,
            './_typed': 122
        }
    ],
    122: [
        function (require, module, exports) {
            var global = require('./_global'), hide = require('./_hide'), uid = require('./_uid'), TYPED = uid('typed_array'), VIEW = uid('view'), ABV = !!(global.ArrayBuffer && global.DataView), CONSTR = ABV, i = 0, l = 9, Typed;
            var TypedArrayConstructors = 'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'.split(',');
            while (i < l) {
                if (Typed = global[TypedArrayConstructors[i++]]) {
                    hide(Typed.prototype, TYPED, true);
                    hide(Typed.prototype, VIEW, true);
                } else
                    CONSTR = false;
            }
            module.exports = {
                ABV: ABV,
                CONSTR: CONSTR,
                TYPED: TYPED,
                VIEW: VIEW
            };
        },
        {
            './_global': 48,
            './_hide': 50,
            './_uid': 123
        }
    ],
    123: [
        function (require, module, exports) {
            var id = 0, px = Math.random();
            module.exports = function (key) {
                return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
            };
        },
        {}
    ],
    124: [
        function (require, module, exports) {
            var global = require('./_global'), core = require('./_core'), LIBRARY = require('./_library'), wksExt = require('./_wks-ext'), defineProperty = require('./_object-dp').f;
            module.exports = function (name) {
                var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
                if (name.charAt(0) != '_' && !(name in $Symbol))
                    defineProperty($Symbol, name, { value: wksExt.f(name) });
            };
        },
        {
            './_core': 33,
            './_global': 48,
            './_library': 68,
            './_object-dp': 77,
            './_wks-ext': 125
        }
    ],
    125: [
        function (require, module, exports) {
            exports.f = require('./_wks');
        },
        { './_wks': 126 }
    ],
    126: [
        function (require, module, exports) {
            var store = require('./_shared')('wks'), uid = require('./_uid'), Symbol = require('./_global').Symbol, USE_SYMBOL = typeof Symbol == 'function';
            var $exports = module.exports = function (name) {
                return store[name] || (store[name] = USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
            };
            $exports.store = store;
        },
        {
            './_global': 48,
            './_shared': 103,
            './_uid': 123
        }
    ],
    127: [
        function (require, module, exports) {
            var classof = require('./_classof'), ITERATOR = require('./_wks')('iterator'), Iterators = require('./_iterators');
            module.exports = require('./_core').getIteratorMethod = function (it) {
                if (it != undefined)
                    return it[ITERATOR] || it['@@iterator'] || Iterators[classof(it)];
            };
        },
        {
            './_classof': 27,
            './_core': 33,
            './_iterators': 66,
            './_wks': 126
        }
    ],
    128: [
        function (require, module, exports) {
            var classof = require('./_classof'), ITERATOR = require('./_wks')('iterator'), Iterators = require('./_iterators');
            module.exports = require('./_core').isIterable = function (it) {
                var O = Object(it);
                return O[ITERATOR] !== undefined || '@@iterator' in O || Iterators.hasOwnProperty(classof(O));
            };
        },
        {
            './_classof': 27,
            './_core': 33,
            './_iterators': 66,
            './_wks': 126
        }
    ],
    129: [
        function (require, module, exports) {
            var $export = require('./_export');
            $export($export.P, 'Array', { copyWithin: require('./_array-copy-within') });
            require('./_add-to-unscopables')('copyWithin');
        },
        {
            './_add-to-unscopables': 15,
            './_array-copy-within': 18,
            './_export': 42
        }
    ],
    130: [
        function (require, module, exports) {
            'use strict';
            var $export = require('./_export'), $every = require('./_array-methods')(4);
            $export($export.P + $export.F * !require('./_strict-method')([].every, true), 'Array', {
                every: function every(callbackfn) {
                    return $every(this, callbackfn, arguments[1]);
                }
            });
        },
        {
            './_array-methods': 22,
            './_export': 42,
            './_strict-method': 105
        }
    ],
    131: [
        function (require, module, exports) {
            var $export = require('./_export');
            $export($export.P, 'Array', { fill: require('./_array-fill') });
            require('./_add-to-unscopables')('fill');
        },
        {
            './_add-to-unscopables': 15,
            './_array-fill': 19,
            './_export': 42
        }
    ],
    132: [
        function (require, module, exports) {
            'use strict';
            var $export = require('./_export'), $filter = require('./_array-methods')(2);
            $export($export.P + $export.F * !require('./_strict-method')([].filter, true), 'Array', {
                filter: function filter(callbackfn) {
                    return $filter(this, callbackfn, arguments[1]);
                }
            });
        },
        {
            './_array-methods': 22,
            './_export': 42,
            './_strict-method': 105
        }
    ],
    133: [
        function (require, module, exports) {
            'use strict';
            var $export = require('./_export'), $find = require('./_array-methods')(6), KEY = 'findIndex', forced = true;
            if (KEY in [])
                Array(1)[KEY](function () {
                    forced = false;
                });
            $export($export.P + $export.F * forced, 'Array', {
                findIndex: function findIndex(callbackfn) {
                    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
                }
            });
            require('./_add-to-unscopables')(KEY);
        },
        {
            './_add-to-unscopables': 15,
            './_array-methods': 22,
            './_export': 42
        }
    ],
    134: [
        function (require, module, exports) {
            'use strict';
            var $export = require('./_export'), $find = require('./_array-methods')(5), KEY = 'find', forced = true;
            if (KEY in [])
                Array(1)[KEY](function () {
                    forced = false;
                });
            $export($export.P + $export.F * forced, 'Array', {
                find: function find(callbackfn) {
                    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
                }
            });
            require('./_add-to-unscopables')(KEY);
        },
        {
            './_add-to-unscopables': 15,
            './_array-methods': 22,
            './_export': 42
        }
    ],
    135: [
        function (require, module, exports) {
            'use strict';
            var $export = require('./_export'), $forEach = require('./_array-methods')(0), STRICT = require('./_strict-method')([].forEach, true);
            $export($export.P + $export.F * !STRICT, 'Array', {
                forEach: function forEach(callbackfn) {
                    return $forEach(this, callbackfn, arguments[1]);
                }
            });
        },
        {
            './_array-methods': 22,
            './_export': 42,
            './_strict-method': 105
        }
    ],
    136: [
        function (require, module, exports) {
            'use strict';
            var ctx = require('./_ctx'), $export = require('./_export'), toObject = require('./_to-object'), call = require('./_iter-call'), isArrayIter = require('./_is-array-iter'), toLength = require('./_to-length'), createProperty = require('./_create-property'), getIterFn = require('./core.get-iterator-method');
            $export($export.S + $export.F * !require('./_iter-detect')(function (iter) {
                Array.from(iter);
            }), 'Array', {
                from: function from(arrayLike) {
                    var O = toObject(arrayLike), C = typeof this == 'function' ? this : Array, aLen = arguments.length, mapfn = aLen > 1 ? arguments[1] : undefined, mapping = mapfn !== undefined, index = 0, iterFn = getIterFn(O), length, result, step, iterator;
                    if (mapping)
                        mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
                    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
                        for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
                            createProperty(result, index, mapping ? call(iterator, mapfn, [
                                step.value,
                                index
                            ], true) : step.value);
                        }
                    } else {
                        length = toLength(O.length);
                        for (result = new C(length); length > index; index++) {
                            createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
                        }
                    }
                    result.length = index;
                    return result;
                }
            });
        },
        {
            './_create-property': 34,
            './_ctx': 35,
            './_export': 42,
            './_is-array-iter': 56,
            './_iter-call': 61,
            './_iter-detect': 64,
            './_to-length': 117,
            './_to-object': 118,
            './core.get-iterator-method': 127
        }
    ],
    137: [
        function (require, module, exports) {
            'use strict';
            var $export = require('./_export'), $indexOf = require('./_array-includes')(false), $native = [].indexOf, NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;
            $export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {
                indexOf: function indexOf(searchElement) {
                    return NEGATIVE_ZERO ? $native.apply(this, arguments) || 0 : $indexOf(this, searchElement, arguments[1]);
                }
            });
        },
        {
            './_array-includes': 21,
            './_export': 42,
            './_strict-method': 105
        }
    ],
    138: [
        function (require, module, exports) {
            var $export = require('./_export');
            $export($export.S, 'Array', { isArray: require('./_is-array') });
        },
        {
            './_export': 42,
            './_is-array': 57
        }
    ],
    139: [
        function (require, module, exports) {
            'use strict';
            var addToUnscopables = require('./_add-to-unscopables'), step = require('./_iter-step'), Iterators = require('./_iterators'), toIObject = require('./_to-iobject');
            module.exports = require('./_iter-define')(Array, 'Array', function (iterated, kind) {
                this._t = toIObject(iterated);
                this._i = 0;
                this._k = kind;
            }, function () {
                var O = this._t, kind = this._k, index = this._i++;
                if (!O || index >= O.length) {
                    this._t = undefined;
                    return step(1);
                }
                if (kind == 'keys')
                    return step(0, index);
                if (kind == 'values')
                    return step(0, O[index]);
                return step(0, [
                    index,
                    O[index]
                ]);
            }, 'values');
            Iterators.Arguments = Iterators.Array;
            addToUnscopables('keys');
            addToUnscopables('values');
            addToUnscopables('entries');
        },
        {
            './_add-to-unscopables': 15,
            './_iter-define': 63,
            './_iter-step': 65,
            './_iterators': 66,
            './_to-iobject': 116
        }
    ],
    140: [
        function (require, module, exports) {
            'use strict';
            var $export = require('./_export'), toIObject = require('./_to-iobject'), arrayJoin = [].join;
            $export($export.P + $export.F * (require('./_iobject') != Object || !require('./_strict-method')(arrayJoin)), 'Array', {
                join: function join(separator) {
                    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
                }
            });
        },
        {
            './_export': 42,
            './_iobject': 55,
            './_strict-method': 105,
            './_to-iobject': 116
        }
    ],
    141: [
        function (require, module, exports) {
            'use strict';
            var $export = require('./_export'), toIObject = require('./_to-iobject'), toInteger = require('./_to-integer'), toLength = require('./_to-length'), $native = [].lastIndexOf, NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;
            $export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {
                lastIndexOf: function lastIndexOf(searchElement) {
                    if (NEGATIVE_ZERO)
                        return $native.apply(this, arguments) || 0;
                    var O = toIObject(this), length = toLength(O.length), index = length - 1;
                    if (arguments.length > 1)
                        index = Math.min(index, toInteger(arguments[1]));
                    if (index < 0)
                        index = length + index;
                    for (; index >= 0; index--)
                        if (index in O)
                            if (O[index] === searchElement)
                                return index || 0;
                    return -1;
                }
            });
        },
        {
            './_export': 42,
            './_strict-method': 105,
            './_to-integer': 115,
            './_to-iobject': 116,
            './_to-length': 117
        }
    ],
    142: [
        function (require, module, exports) {
            'use strict';
            var $export = require('./_export'), $map = require('./_array-methods')(1);
            $export($export.P + $export.F * !require('./_strict-method')([].map, true), 'Array', {
                map: function map(callbackfn) {
                    return $map(this, callbackfn, arguments[1]);
                }
            });
        },
        {
            './_array-methods': 22,
            './_export': 42,
            './_strict-method': 105
        }
    ],
    143: [
        function (require, module, exports) {
            'use strict';
            var $export = require('./_export'), createProperty = require('./_create-property');
            $export($export.S + $export.F * require('./_fails')(function () {
                function F() {
                }
                return !(Array.of.call(F) instanceof F);
            }), 'Array', {
                of: function of() {
                    var index = 0, aLen = arguments.length, result = new (typeof this == 'function' ? this : Array)(aLen);
                    while (aLen > index)
                        createProperty(result, index, arguments[index++]);
                    result.length = aLen;
                    return result;
                }
            });
        },
        {
            './_create-property': 34,
            './_export': 42,
            './_fails': 44
        }
    ],
    144: [
        function (require, module, exports) {
            'use strict';
            var $export = require('./_export'), $reduce = require('./_array-reduce');
            $export($export.P + $export.F * !require('./_strict-method')([].reduceRight, true), 'Array', {
                reduceRight: function reduceRight(callbackfn) {
                    return $reduce(this, callbackfn, arguments.length, arguments[1], true);
                }
            });
        },
        {
            './_array-reduce': 23,
            './_export': 42,
            './_strict-method': 105
        }
    ],
    145: [
        function (require, module, exports) {
            'use strict';
            var $export = require('./_export'), $reduce = require('./_array-reduce');
            $export($export.P + $export.F * !require('./_strict-method')([].reduce, true), 'Array', {
                reduce: function reduce(callbackfn) {
                    return $reduce(this, callbackfn, arguments.length, arguments[1], false);
                }
            });
        },
        {
            './_array-reduce': 23,
            './_export': 42,
            './_strict-method': 105
        }
    ],
    146: [
        function (require, module, exports) {
            'use strict';
            var $export = require('./_export'), html = require('./_html'), cof = require('./_cof'), toIndex = require('./_to-index'), toLength = require('./_to-length'), arraySlice = [].slice;
            $export($export.P + $export.F * require('./_fails')(function () {
                if (html)
                    arraySlice.call(html);
            }), 'Array', {
                slice: function slice(begin, end) {
                    var len = toLength(this.length), klass = cof(this);
                    end = end === undefined ? len : end;
                    if (klass == 'Array')
                        return arraySlice.call(this, begin, end);
                    var start = toIndex(begin, len), upTo = toIndex(end, len), size = toLength(upTo - start), cloned = Array(size), i = 0;
                    for (; i < size; i++)
                        cloned[i] = klass == 'String' ? this.charAt(start + i) : this[start + i];
                    return cloned;
                }
            });
        },
        {
            './_cof': 28,
            './_export': 42,
            './_fails': 44,
            './_html': 51,
            './_to-index': 114,
            './_to-length': 117
        }
    ],
    147: [
        function (require, module, exports) {
            'use strict';
            var $export = require('./_export'), $some = require('./_array-methods')(3);
            $export($export.P + $export.F * !require('./_strict-method')([].some, true), 'Array', {
                some: function some(callbackfn) {
                    return $some(this, callbackfn, arguments[1]);
                }
            });
        },
        {
            './_array-methods': 22,
            './_export': 42,
            './_strict-method': 105
        }
    ],
    148: [
        function (require, module, exports) {
            'use strict';
            var $export = require('./_export'), aFunction = require('./_a-function'), toObject = require('./_to-object'), fails = require('./_fails'), $sort = [].sort, test = [
                    1,
                    2,
                    3
                ];
            $export($export.P + $export.F * (fails(function () {
                test.sort(undefined);
            }) || !fails(function () {
                test.sort(null);
            }) || !require('./_strict-method')($sort)), 'Array', {
                sort: function sort(comparefn) {
                    return comparefn === undefined ? $sort.call(toObject(this)) : $sort.call(toObject(this), aFunction(comparefn));
                }
            });
        },
        {
            './_a-function': 13,
            './_export': 42,
            './_fails': 44,
            './_strict-method': 105,
            './_to-object': 118
        }
    ],
    149: [
        function (require, module, exports) {
            require('./_set-species')('Array');
        },
        { './_set-species': 100 }
    ],
    150: [
        function (require, module, exports) {
            var $export = require('./_export');
            $export($export.S, 'Date', {
                now: function () {
                    return new Date().getTime();
                }
            });
        },
        { './_export': 42 }
    ],
    151: [
        function (require, module, exports) {
            'use strict';
            var $export = require('./_export'), fails = require('./_fails'), getTime = Date.prototype.getTime;
            var lz = function (num) {
                return num > 9 ? num : '0' + num;
            };
            $export($export.P + $export.F * (fails(function () {
                return new Date(-50000000000000 - 1).toISOString() != '0385-07-25T07:06:39.999Z';
            }) || !fails(function () {
                new Date(NaN).toISOString();
            })), 'Date', {
                toISOString: function toISOString() {
                    if (!isFinite(getTime.call(this)))
                        throw RangeError('Invalid time value');
                    var d = this, y = d.getUTCFullYear(), m = d.getUTCMilliseconds(), s = y < 0 ? '-' : y > 9999 ? '+' : '';
                    return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) + '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) + 'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) + ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
                }
            });
        },
        {
            './_export': 42,
            './_fails': 44
        }
    ],
    152: [
        function (require, module, exports) {
            'use strict';
            var $export = require('./_export'), toObject = require('./_to-object'), toPrimitive = require('./_to-primitive');
            $export($export.P + $export.F * require('./_fails')(function () {
                return new Date(NaN).toJSON() !== null || Date.prototype.toJSON.call({
                    toISOString: function () {
                        return 1;
                    }
                }) !== 1;
            }), 'Date', {
                toJSON: function toJSON(key) {
                    var O = toObject(this), pv = toPrimitive(O);
                    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
                }
            });
        },
        {
            './_export': 42,
            './_fails': 44,
            './_to-object': 118,
            './_to-primitive': 119
        }
    ],
    153: [
        function (require, module, exports) {
            var TO_PRIMITIVE = require('./_wks')('toPrimitive'), proto = Date.prototype;
            if (!(TO_PRIMITIVE in proto))
                require('./_hide')(proto, TO_PRIMITIVE, require('./_date-to-primitive'));
        },
        {
            './_date-to-primitive': 36,
            './_hide': 50,
            './_wks': 126
        }
    ],
    154: [
        function (require, module, exports) {
            var DateProto = Date.prototype, INVALID_DATE = 'Invalid Date', TO_STRING = 'toString', $toString = DateProto[TO_STRING], getTime = DateProto.getTime;
            if (new Date(NaN) + '' != INVALID_DATE) {
                require('./_redefine')(DateProto, TO_STRING, function toString() {
                    var value = getTime.call(this);
                    return value === value ? $toString.call(this) : INVALID_DATE;
                });
            }
        },
        { './_redefine': 97 }
    ],
    155: [
        function (require, module, exports) {
            var $export = require('./_export');
            $export($export.P, 'Function', { bind: require('./_bind') });
        },
        {
            './_bind': 26,
            './_export': 42
        }
    ],
    156: [
        function (require, module, exports) {
            'use strict';
            var isObject = require('./_is-object'), getPrototypeOf = require('./_object-gpo'), HAS_INSTANCE = require('./_wks')('hasInstance'), FunctionProto = Function.prototype;
            if (!(HAS_INSTANCE in FunctionProto))
                require('./_object-dp').f(FunctionProto, HAS_INSTANCE, {
                    value: function (O) {
                        if (typeof this != 'function' || !isObject(O))
                            return false;
                        if (!isObject(this.prototype))
                            return O instanceof this;
                        while (O = getPrototypeOf(O))
                            if (this.prototype === O)
                                return true;
                        return false;
                    }
                });
        },
        {
            './_is-object': 59,
            './_object-dp': 77,
            './_object-gpo': 84,
            './_wks': 126
        }
    ],
    157: [
        function (require, module, exports) {
            var dP = require('./_object-dp').f, createDesc = require('./_property-desc'), has = require('./_has'), FProto = Function.prototype, nameRE = /^\s*function ([^ (]*)/, NAME = 'name';
            var isExtensible = Object.isExtensible || function () {
                return true;
            };
            NAME in FProto || require('./_descriptors') && dP(FProto, NAME, {
                configurable: true,
                get: function () {
                    try {
                        var that = this, name = ('' + that).match(nameRE)[1];
                        has(that, NAME) || !isExtensible(that) || dP(that, NAME, createDesc(5, name));
                        return name;
                    } catch (e) {
                        return '';
                    }
                }
            });
        },
        {
            './_descriptors': 38,
            './_has': 49,
            './_object-dp': 77,
            './_property-desc': 95
        }
    ],
    158: [
        function (require, module, exports) {
            'use strict';
            var strong = require('./_collection-strong');
            module.exports = require('./_collection')('Map', function (get) {
                return function Map() {
                    return get(this, arguments.length > 0 ? arguments[0] : undefined);
                };
            }, {
                get: function get(key) {
                    var entry = strong.getEntry(this, key);
                    return entry && entry.v;
                },
                set: function set(key, value) {
                    return strong.def(this, key === 0 ? 0 : key, value);
                }
            }, strong, true);
        },
        {
            './_collection': 32,
            './_collection-strong': 29
        }
    ],
    159: [
        function (require, module, exports) {
            var $export = require('./_export'), log1p = require('./_math-log1p'), sqrt = Math.sqrt, $acosh = Math.acosh;
            $export($export.S + $export.F * !($acosh && Math.floor($acosh(Number.MAX_VALUE)) == 710 && $acosh(Infinity) == Infinity), 'Math', {
                acosh: function acosh(x) {
                    return (x = +x) < 1 ? NaN : x > 94906265.62425156 ? Math.log(x) + Math.LN2 : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
                }
            });
        },
        {
            './_export': 42,
            './_math-log1p': 70
        }
    ],
    160: [
        function (require, module, exports) {
            var $export = require('./_export'), $asinh = Math.asinh;
            function asinh(x) {
                return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
            }
            $export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', { asinh: asinh });
        },
        { './_export': 42 }
    ],
    161: [
        function (require, module, exports) {
            var $export = require('./_export'), $atanh = Math.atanh;
            $export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
                atanh: function atanh(x) {
                    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
                }
            });
        },
        { './_export': 42 }
    ],
    162: [
        function (require, module, exports) {
            var $export = require('./_export'), sign = require('./_math-sign');
            $export($export.S, 'Math', {
                cbrt: function cbrt(x) {
                    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
                }
            });
        },
        {
            './_export': 42,
            './_math-sign': 71
        }
    ],
    163: [
        function (require, module, exports) {
            var $export = require('./_export');
            $export($export.S, 'Math', {
                clz32: function clz32(x) {
                    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
                }
            });
        },
        { './_export': 42 }
    ],
    164: [
        function (require, module, exports) {
            var $export = require('./_export'), exp = Math.exp;
            $export($export.S, 'Math', {
                cosh: function cosh(x) {
                    return (exp(x = +x) + exp(-x)) / 2;
                }
            });
        },
        { './_export': 42 }
    ],
    165: [
        function (require, module, exports) {
            var $export = require('./_export'), $expm1 = require('./_math-expm1');
            $export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', { expm1: $expm1 });
        },
        {
            './_export': 42,
            './_math-expm1': 69
        }
    ],
    166: [
        function (require, module, exports) {
            var $export = require('./_export'), sign = require('./_math-sign'), pow = Math.pow, EPSILON = pow(2, -52), EPSILON32 = pow(2, -23), MAX32 = pow(2, 127) * (2 - EPSILON32), MIN32 = pow(2, -126);
            var roundTiesToEven = function (n) {
                return n + 1 / EPSILON - 1 / EPSILON;
            };
            $export($export.S, 'Math', {
                fround: function fround(x) {
                    var $abs = Math.abs(x), $sign = sign(x), a, result;
                    if ($abs < MIN32)
                        return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
                    a = (1 + EPSILON32 / EPSILON) * $abs;
                    result = a - (a - $abs);
                    if (result > MAX32 || result != result)
                        return $sign * Infinity;
                    return $sign * result;
                }
            });
        },
        {
            './_export': 42,
            './_math-sign': 71
        }
    ],
    167: [
        function (require, module, exports) {
            var $export = require('./_export'), abs = Math.abs;
            $export($export.S, 'Math', {
                hypot: function hypot(value1, value2) {
                    var sum = 0, i = 0, aLen = arguments.length, larg = 0, arg, div;
                    while (i < aLen) {
                        arg = abs(arguments[i++]);
                        if (larg < arg) {
                            div = larg / arg;
                            sum = sum * div * div + 1;
                            larg = arg;
                        } else if (arg > 0) {
                            div = arg / larg;
                            sum += div * div;
                        } else
                            sum += arg;
                    }
                    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
                }
            });
        },
        { './_export': 42 }
    ],
    168: [
        function (require, module, exports) {
            var $export = require('./_export'), $imul = Math.imul;
            $export($export.S + $export.F * require('./_fails')(function () {
                return $imul(4294967295, 5) != -5 || $imul.length != 2;
            }), 'Math', {
                imul: function imul(x, y) {
                    var UINT16 = 65535, xn = +x, yn = +y, xl = UINT16 & xn, yl = UINT16 & yn;
                    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
                }
            });
        },
        {
            './_export': 42,
            './_fails': 44
        }
    ],
    169: [
        function (require, module, exports) {
            var $export = require('./_export');
            $export($export.S, 'Math', {
                log10: function log10(x) {
                    return Math.log(x) / Math.LN10;
                }
            });
        },
        { './_export': 42 }
    ],
    170: [
        function (require, module, exports) {
            var $export = require('./_export');
            $export($export.S, 'Math', { log1p: require('./_math-log1p') });
        },
        {
            './_export': 42,
            './_math-log1p': 70
        }
    ],
    171: [
        function (require, module, exports) {
            var $export = require('./_export');
            $export($export.S, 'Math', {
                log2: function log2(x) {
                    return Math.log(x) / Math.LN2;
                }
            });
        },
        { './_export': 42 }
    ],
    172: [
        function (require, module, exports) {
            var $export = require('./_export');
            $export($export.S, 'Math', { sign: require('./_math-sign') });
        },
        {
            './_export': 42,
            './_math-sign': 71
        }
    ],
    173: [
        function (require, module, exports) {
            var $export = require('./_export'), expm1 = require('./_math-expm1'), exp = Math.exp;
            $export($export.S + $export.F * require('./_fails')(function () {
                return !Math.sinh(-2e-17) != -2e-17;
            }), 'Math', {
                sinh: function sinh(x) {
                    return Math.abs(x = +x) < 1 ? (expm1(x) - expm1(-x)) / 2 : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
                }
            });
        },
        {
            './_export': 42,
            './_fails': 44,
            './_math-expm1': 69
        }
    ],
    174: [
        function (require, module, exports) {
            var $export = require('./_export'), expm1 = require('./_math-expm1'), exp = Math.exp;
            $export($export.S, 'Math', {
                tanh: function tanh(x) {
                    var a = expm1(x = +x), b = expm1(-x);
                    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
                }
            });
        },
        {
            './_export': 42,
            './_math-expm1': 69
        }
    ],
    175: [
        function (require, module, exports) {
            var $export = require('./_export');
            $export($export.S, 'Math', {
                trunc: function trunc(it) {
                    return (it > 0 ? Math.floor : Math.ceil)(it);
                }
            });
        },
        { './_export': 42 }
    ],
    176: [
        function (require, module, exports) {
            'use strict';
            var global = require('./_global'), has = require('./_has'), cof = require('./_cof'), inheritIfRequired = require('./_inherit-if-required'), toPrimitive = require('./_to-primitive'), fails = require('./_fails'), gOPN = require('./_object-gopn').f, gOPD = require('./_object-gopd').f, dP = require('./_object-dp').f, $trim = require('./_string-trim').trim, NUMBER = 'Number', $Number = global[NUMBER], Base = $Number, proto = $Number.prototype, BROKEN_COF = cof(require('./_object-create')(proto)) == NUMBER, TRIM = 'trim' in String.prototype;
            var toNumber = function (argument) {
                var it = toPrimitive(argument, false);
                if (typeof it == 'string' && it.length > 2) {
                    it = TRIM ? it.trim() : $trim(it, 3);
                    var first = it.charCodeAt(0), third, radix, maxCode;
                    if (first === 43 || first === 45) {
                        third = it.charCodeAt(2);
                        if (third === 88 || third === 120)
                            return NaN;
                    } else if (first === 48) {
                        switch (it.charCodeAt(1)) {
                        case 66:
                        case 98:
                            radix = 2;
                            maxCode = 49;
                            break;
                        case 79:
                        case 111:
                            radix = 8;
                            maxCode = 55;
                            break;
                        default:
                            return +it;
                        }
                        for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
                            code = digits.charCodeAt(i);
                            if (code < 48 || code > maxCode)
                                return NaN;
                        }
                        return parseInt(digits, radix);
                    }
                }
                return +it;
            };
            if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
                $Number = function Number(value) {
                    var it = arguments.length < 1 ? 0 : value, that = this;
                    return that instanceof $Number && (BROKEN_COF ? fails(function () {
                        proto.valueOf.call(that);
                    }) : cof(that) != NUMBER) ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
                };
                for (var keys = require('./_descriptors') ? gOPN(Base) : ('MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' + 'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' + 'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger').split(','), j = 0, key; keys.length > j; j++) {
                    if (has(Base, key = keys[j]) && !has($Number, key)) {
                        dP($Number, key, gOPD(Base, key));
                    }
                }
                $Number.prototype = proto;
                proto.constructor = $Number;
                require('./_redefine')(global, NUMBER, $Number);
            }
        },
        {
            './_cof': 28,
            './_descriptors': 38,
            './_fails': 44,
            './_global': 48,
            './_has': 49,
            './_inherit-if-required': 53,
            './_object-create': 76,
            './_object-dp': 77,
            './_object-gopd': 80,
            './_object-gopn': 82,
            './_redefine': 97,
            './_string-trim': 111,
            './_to-primitive': 119
        }
    ],
    177: [
        function (require, module, exports) {
            var $export = require('./_export');
            $export($export.S, 'Number', { EPSILON: Math.pow(2, -52) });
        },
        { './_export': 42 }
    ],
    178: [
        function (require, module, exports) {
            var $export = require('./_export'), _isFinite = require('./_global').isFinite;
            $export($export.S, 'Number', {
                isFinite: function isFinite(it) {
                    return typeof it == 'number' && _isFinite(it);
                }
            });
        },
        {
            './_export': 42,
            './_global': 48
        }
    ],
    179: [
        function (require, module, exports) {
            var $export = require('./_export');
            $export($export.S, 'Number', { isInteger: require('./_is-integer') });
        },
        {
            './_export': 42,
            './_is-integer': 58
        }
    ],
    180: [
        function (require, module, exports) {
            var $export = require('./_export');
            $export($export.S, 'Number', {
                isNaN: function isNaN(number) {
                    return number != number;
                }
            });
        },
        { './_export': 42 }
    ],
    181: [
        function (require, module, exports) {
            var $export = require('./_export'), isInteger = require('./_is-integer'), abs = Math.abs;
            $export($export.S, 'Number', {
                isSafeInteger: function isSafeInteger(number) {
                    return isInteger(number) && abs(number) <= 9007199254740991;
                }
            });
        },
        {
            './_export': 42,
            './_is-integer': 58
        }
    ],
    182: [
        function (require, module, exports) {
            var $export = require('./_export');
            $export($export.S, 'Number', { MAX_SAFE_INTEGER: 9007199254740991 });
        },
        { './_export': 42 }
    ],
    183: [
        function (require, module, exports) {
            var $export = require('./_export');
            $export($export.S, 'Number', { MIN_SAFE_INTEGER: -9007199254740991 });
        },
        { './_export': 42 }
    ],
    184: [
        function (require, module, exports) {
            var $export = require('./_export'), $parseFloat = require('./_parse-float');
            $export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', { parseFloat: $parseFloat });
        },
        {
            './_export': 42,
            './_parse-float': 91
        }
    ],
    185: [
        function (require, module, exports) {
            var $export = require('./_export'), $parseInt = require('./_parse-int');
            $export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', { parseInt: $parseInt });
        },
        {
            './_export': 42,
            './_parse-int': 92
        }
    ],
    186: [
        function (require, module, exports) {
            'use strict';
            var $export = require('./_export'), anInstance = require('./_an-instance'), toInteger = require('./_to-integer'), aNumberValue = require('./_a-number-value'), repeat = require('./_string-repeat'), $toFixed = 1..toFixed, floor = Math.floor, data = [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                ], ERROR = 'Number.toFixed: incorrect invocation!', ZERO = '0';
            var multiply = function (n, c) {
                var i = -1, c2 = c;
                while (++i < 6) {
                    c2 += n * data[i];
                    data[i] = c2 % 10000000;
                    c2 = floor(c2 / 10000000);
                }
            };
            var divide = function (n) {
                var i = 6, c = 0;
                while (--i >= 0) {
                    c += data[i];
                    data[i] = floor(c / n);
                    c = c % n * 10000000;
                }
            };
            var numToString = function () {
                var i = 6, s = '';
                while (--i >= 0) {
                    if (s !== '' || i === 0 || data[i] !== 0) {
                        var t = String(data[i]);
                        s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
                    }
                }
                return s;
            };
            var pow = function (x, n, acc) {
                return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
            };
            var log = function (x) {
                var n = 0, x2 = x;
                while (x2 >= 4096) {
                    n += 12;
                    x2 /= 4096;
                }
                while (x2 >= 2) {
                    n += 1;
                    x2 /= 2;
                }
                return n;
            };
            $export($export.P + $export.F * (!!$toFixed && (0.00008.toFixed(3) !== '0.000' || 0.9.toFixed(0) !== '1' || 1.255.toFixed(2) !== '1.25' || 1000000000000000100..toFixed(0) !== '1000000000000000128') || !require('./_fails')(function () {
                $toFixed.call({});
            })), 'Number', {
                toFixed: function toFixed(fractionDigits) {
                    var x = aNumberValue(this, ERROR), f = toInteger(fractionDigits), s = '', m = ZERO, e, z, j, k;
                    if (f < 0 || f > 20)
                        throw RangeError(ERROR);
                    if (x != x)
                        return 'NaN';
                    if (x <= -1e+21 || x >= 1e+21)
                        return String(x);
                    if (x < 0) {
                        s = '-';
                        x = -x;
                    }
                    if (x > 1e-21) {
                        e = log(x * pow(2, 69, 1)) - 69;
                        z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
                        z *= 4503599627370496;
                        e = 52 - e;
                        if (e > 0) {
                            multiply(0, z);
                            j = f;
                            while (j >= 7) {
                                multiply(10000000, 0);
                                j -= 7;
                            }
                            multiply(pow(10, j, 1), 0);
                            j = e - 1;
                            while (j >= 23) {
                                divide(1 << 23);
                                j -= 23;
                            }
                            divide(1 << j);
                            multiply(1, 1);
                            divide(2);
                            m = numToString();
                        } else {
                            multiply(0, z);
                            multiply(1 << -e, 0);
                            m = numToString() + repeat.call(ZERO, f);
                        }
                    }
                    if (f > 0) {
                        k = m.length;
                        m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
                    } else {
                        m = s + m;
                    }
                    return m;
                }
            });
        },
        {
            './_a-number-value': 14,
            './_an-instance': 16,
            './_export': 42,
            './_fails': 44,
            './_string-repeat': 110,
            './_to-integer': 115
        }
    ],
    187: [
        function (require, module, exports) {
            'use strict';
            var $export = require('./_export'), $fails = require('./_fails'), aNumberValue = require('./_a-number-value'), $toPrecision = 1..toPrecision;
            $export($export.P + $export.F * ($fails(function () {
                return $toPrecision.call(1, undefined) !== '1';
            }) || !$fails(function () {
                $toPrecision.call({});
            })), 'Number', {
                toPrecision: function toPrecision(precision) {
                    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
                    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);
                }
            });
        },
        {
            './_a-number-value': 14,
            './_export': 42,
            './_fails': 44
        }
    ],
    188: [
        function (require, module, exports) {
            var $export = require('./_export');
            $export($export.S + $export.F, 'Object', { assign: require('./_object-assign') });
        },
        {
            './_export': 42,
            './_object-assign': 75
        }
    ],
    189: [
        function (require, module, exports) {
            var $export = require('./_export');
            $export($export.S, 'Object', { create: require('./_object-create') });
        },
        {
            './_export': 42,
            './_object-create': 76
        }
    ],
    190: [
        function (require, module, exports) {
            var $export = require('./_export');
            $export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperties: require('./_object-dps') });
        },
        {
            './_descriptors': 38,
            './_export': 42,
            './_object-dps': 78
        }
    ],
    191: [
        function (require, module, exports) {
            var $export = require('./_export');
            $export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperty: require('./_object-dp').f });
        },
        {
            './_descriptors': 38,
            './_export': 42,
            './_object-dp': 77
        }
    ],
    192: [
        function (require, module, exports) {
            var isObject = require('./_is-object'), meta = require('./_meta').onFreeze;
            require('./_object-sap')('freeze', function ($freeze) {
                return function freeze(it) {
                    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
                };
            });
        },
        {
            './_is-object': 59,
            './_meta': 72,
            './_object-sap': 88
        }
    ],
    193: [
        function (require, module, exports) {
            var toIObject = require('./_to-iobject'), $getOwnPropertyDescriptor = require('./_object-gopd').f;
            require('./_object-sap')('getOwnPropertyDescriptor', function () {
                return function getOwnPropertyDescriptor(it, key) {
                    return $getOwnPropertyDescriptor(toIObject(it), key);
                };
            });
        },
        {
            './_object-gopd': 80,
            './_object-sap': 88,
            './_to-iobject': 116
        }
    ],
    194: [
        function (require, module, exports) {
            require('./_object-sap')('getOwnPropertyNames', function () {
                return require('./_object-gopn-ext').f;
            });
        },
        {
            './_object-gopn-ext': 81,
            './_object-sap': 88
        }
    ],
    195: [
        function (require, module, exports) {
            var toObject = require('./_to-object'), $getPrototypeOf = require('./_object-gpo');
            require('./_object-sap')('getPrototypeOf', function () {
                return function getPrototypeOf(it) {
                    return $getPrototypeOf(toObject(it));
                };
            });
        },
        {
            './_object-gpo': 84,
            './_object-sap': 88,
            './_to-object': 118
        }
    ],
    196: [
        function (require, module, exports) {
            var isObject = require('./_is-object');
            require('./_object-sap')('isExtensible', function ($isExtensible) {
                return function isExtensible(it) {
                    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
                };
            });
        },
        {
            './_is-object': 59,
            './_object-sap': 88
        }
    ],
    197: [
        function (require, module, exports) {
            var isObject = require('./_is-object');
            require('./_object-sap')('isFrozen', function ($isFrozen) {
                return function isFrozen(it) {
                    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
                };
            });
        },
        {
            './_is-object': 59,
            './_object-sap': 88
        }
    ],
    198: [
        function (require, module, exports) {
            var isObject = require('./_is-object');
            require('./_object-sap')('isSealed', function ($isSealed) {
                return function isSealed(it) {
                    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
                };
            });
        },
        {
            './_is-object': 59,
            './_object-sap': 88
        }
    ],
    199: [
        function (require, module, exports) {
            var $export = require('./_export');
            $export($export.S, 'Object', { is: require('./_same-value') });
        },
        {
            './_export': 42,
            './_same-value': 98
        }
    ],
    200: [
        function (require, module, exports) {
            var toObject = require('./_to-object'), $keys = require('./_object-keys');
            require('./_object-sap')('keys', function () {
                return function keys(it) {
                    return $keys(toObject(it));
                };
            });
        },
        {
            './_object-keys': 86,
            './_object-sap': 88,
            './_to-object': 118
        }
    ],
    201: [
        function (require, module, exports) {
            var isObject = require('./_is-object'), meta = require('./_meta').onFreeze;
            require('./_object-sap')('preventExtensions', function ($preventExtensions) {
                return function preventExtensions(it) {
                    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
                };
            });
        },
        {
            './_is-object': 59,
            './_meta': 72,
            './_object-sap': 88
        }
    ],
    202: [
        function (require, module, exports) {
            var isObject = require('./_is-object'), meta = require('./_meta').onFreeze;
            require('./_object-sap')('seal', function ($seal) {
                return function seal(it) {
                    return $seal && isObject(it) ? $seal(meta(it)) : it;
                };
            });
        },
        {
            './_is-object': 59,
            './_meta': 72,
            './_object-sap': 88
        }
    ],
    203: [
        function (require, module, exports) {
            var $export = require('./_export');
            $export($export.S, 'Object', { setPrototypeOf: require('./_set-proto').set });
        },
        {
            './_export': 42,
            './_set-proto': 99
        }
    ],
    204: [
        function (require, module, exports) {
            'use strict';
            var classof = require('./_classof'), test = {};
            test[require('./_wks')('toStringTag')] = 'z';
            if (test + '' != '[object z]') {
                require('./_redefine')(Object.prototype, 'toString', function toString() {
                    return '[object ' + classof(this) + ']';
                }, true);
            }
        },
        {
            './_classof': 27,
            './_redefine': 97,
            './_wks': 126
        }
    ],
    205: [
        function (require, module, exports) {
            var $export = require('./_export'), $parseFloat = require('./_parse-float');
            $export($export.G + $export.F * (parseFloat != $parseFloat), { parseFloat: $parseFloat });
        },
        {
            './_export': 42,
            './_parse-float': 91
        }
    ],
    206: [
        function (require, module, exports) {
            var $export = require('./_export'), $parseInt = require('./_parse-int');
            $export($export.G + $export.F * (parseInt != $parseInt), { parseInt: $parseInt });
        },
        {
            './_export': 42,
            './_parse-int': 92
        }
    ],
    207: [
        function (require, module, exports) {
            'use strict';
            var LIBRARY = require('./_library'), global = require('./_global'), ctx = require('./_ctx'), classof = require('./_classof'), $export = require('./_export'), isObject = require('./_is-object'), anObject = require('./_an-object'), aFunction = require('./_a-function'), anInstance = require('./_an-instance'), forOf = require('./_for-of'), setProto = require('./_set-proto').set, speciesConstructor = require('./_species-constructor'), task = require('./_task').set, microtask = require('./_microtask')(), PROMISE = 'Promise', TypeError = global.TypeError, process = global.process, $Promise = global[PROMISE], process = global.process, isNode = classof(process) == 'process', empty = function () {
                }, Internal, GenericPromiseCapability, Wrapper;
            var USE_NATIVE = !!function () {
                try {
                    var promise = $Promise.resolve(1), FakePromise = (promise.constructor = {})[require('./_wks')('species')] = function (exec) {
                            exec(empty, empty);
                        };
                    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
                } catch (e) {
                }
            }();
            var sameConstructor = function (a, b) {
                return a === b || a === $Promise && b === Wrapper;
            };
            var isThenable = function (it) {
                var then;
                return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
            };
            var newPromiseCapability = function (C) {
                return sameConstructor($Promise, C) ? new PromiseCapability(C) : new GenericPromiseCapability(C);
            };
            var PromiseCapability = GenericPromiseCapability = function (C) {
                var resolve, reject;
                this.promise = new C(function ($$resolve, $$reject) {
                    if (resolve !== undefined || reject !== undefined)
                        throw TypeError('Bad Promise constructor');
                    resolve = $$resolve;
                    reject = $$reject;
                });
                this.resolve = aFunction(resolve);
                this.reject = aFunction(reject);
            };
            var perform = function (exec) {
                try {
                    exec();
                } catch (e) {
                    return { error: e };
                }
            };
            var notify = function (promise, isReject) {
                if (promise._n)
                    return;
                promise._n = true;
                var chain = promise._c;
                microtask(function () {
                    var value = promise._v, ok = promise._s == 1, i = 0;
                    var run = function (reaction) {
                        var handler = ok ? reaction.ok : reaction.fail, resolve = reaction.resolve, reject = reaction.reject, domain = reaction.domain, result, then;
                        try {
                            if (handler) {
                                if (!ok) {
                                    if (promise._h == 2)
                                        onHandleUnhandled(promise);
                                    promise._h = 1;
                                }
                                if (handler === true)
                                    result = value;
                                else {
                                    if (domain)
                                        domain.enter();
                                    result = handler(value);
                                    if (domain)
                                        domain.exit();
                                }
                                if (result === reaction.promise) {
                                    reject(TypeError('Promise-chain cycle'));
                                } else if (then = isThenable(result)) {
                                    then.call(result, resolve, reject);
                                } else
                                    resolve(result);
                            } else
                                reject(value);
                        } catch (e) {
                            reject(e);
                        }
                    };
                    while (chain.length > i)
                        run(chain[i++]);
                    promise._c = [];
                    promise._n = false;
                    if (isReject && !promise._h)
                        onUnhandled(promise);
                });
            };
            var onUnhandled = function (promise) {
                task.call(global, function () {
                    var value = promise._v, abrupt, handler, console;
                    if (isUnhandled(promise)) {
                        abrupt = perform(function () {
                            if (isNode) {
                                process.emit('unhandledRejection', value, promise);
                            } else if (handler = global.onunhandledrejection) {
                                handler({
                                    promise: promise,
                                    reason: value
                                });
                            } else if ((console = global.console) && console.error) {
                                console.error('Unhandled promise rejection', value);
                            }
                        });
                        promise._h = isNode || isUnhandled(promise) ? 2 : 1;
                    }
                    promise._a = undefined;
                    if (abrupt)
                        throw abrupt.error;
                });
            };
            var isUnhandled = function (promise) {
                if (promise._h == 1)
                    return false;
                var chain = promise._a || promise._c, i = 0, reaction;
                while (chain.length > i) {
                    reaction = chain[i++];
                    if (reaction.fail || !isUnhandled(reaction.promise))
                        return false;
                }
                return true;
            };
            var onHandleUnhandled = function (promise) {
                task.call(global, function () {
                    var handler;
                    if (isNode) {
                        process.emit('rejectionHandled', promise);
                    } else if (handler = global.onrejectionhandled) {
                        handler({
                            promise: promise,
                            reason: promise._v
                        });
                    }
                });
            };
            var $reject = function (value) {
                var promise = this;
                if (promise._d)
                    return;
                promise._d = true;
                promise = promise._w || promise;
                promise._v = value;
                promise._s = 2;
                if (!promise._a)
                    promise._a = promise._c.slice();
                notify(promise, true);
            };
            var $resolve = function (value) {
                var promise = this, then;
                if (promise._d)
                    return;
                promise._d = true;
                promise = promise._w || promise;
                try {
                    if (promise === value)
                        throw TypeError('Promise can\'t be resolved itself');
                    if (then = isThenable(value)) {
                        microtask(function () {
                            var wrapper = {
                                _w: promise,
                                _d: false
                            };
                            try {
                                then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
                            } catch (e) {
                                $reject.call(wrapper, e);
                            }
                        });
                    } else {
                        promise._v = value;
                        promise._s = 1;
                        notify(promise, false);
                    }
                } catch (e) {
                    $reject.call({
                        _w: promise,
                        _d: false
                    }, e);
                }
            };
            if (!USE_NATIVE) {
                $Promise = function Promise(executor) {
                    anInstance(this, $Promise, PROMISE, '_h');
                    aFunction(executor);
                    Internal.call(this);
                    try {
                        executor(ctx($resolve, this, 1), ctx($reject, this, 1));
                    } catch (err) {
                        $reject.call(this, err);
                    }
                };
                Internal = function Promise(executor) {
                    this._c = [];
                    this._a = undefined;
                    this._s = 0;
                    this._d = false;
                    this._v = undefined;
                    this._h = 0;
                    this._n = false;
                };
                Internal.prototype = require('./_redefine-all')($Promise.prototype, {
                    then: function then(onFulfilled, onRejected) {
                        var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
                        reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
                        reaction.fail = typeof onRejected == 'function' && onRejected;
                        reaction.domain = isNode ? process.domain : undefined;
                        this._c.push(reaction);
                        if (this._a)
                            this._a.push(reaction);
                        if (this._s)
                            notify(this, false);
                        return reaction.promise;
                    },
                    'catch': function (onRejected) {
                        return this.then(undefined, onRejected);
                    }
                });
                PromiseCapability = function () {
                    var promise = new Internal();
                    this.promise = promise;
                    this.resolve = ctx($resolve, promise, 1);
                    this.reject = ctx($reject, promise, 1);
                };
            }
            $export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
            require('./_set-to-string-tag')($Promise, PROMISE);
            require('./_set-species')(PROMISE);
            Wrapper = require('./_core')[PROMISE];
            $export($export.S + $export.F * !USE_NATIVE, PROMISE, {
                reject: function reject(r) {
                    var capability = newPromiseCapability(this), $$reject = capability.reject;
                    $$reject(r);
                    return capability.promise;
                }
            });
            $export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
                resolve: function resolve(x) {
                    if (x instanceof $Promise && sameConstructor(x.constructor, this))
                        return x;
                    var capability = newPromiseCapability(this), $$resolve = capability.resolve;
                    $$resolve(x);
                    return capability.promise;
                }
            });
            $export($export.S + $export.F * !(USE_NATIVE && require('./_iter-detect')(function (iter) {
                $Promise.all(iter)['catch'](empty);
            })), PROMISE, {
                all: function all(iterable) {
                    var C = this, capability = newPromiseCapability(C), resolve = capability.resolve, reject = capability.reject;
                    var abrupt = perform(function () {
                        var values = [], index = 0, remaining = 1;
                        forOf(iterable, false, function (promise) {
                            var $index = index++, alreadyCalled = false;
                            values.push(undefined);
                            remaining++;
                            C.resolve(promise).then(function (value) {
                                if (alreadyCalled)
                                    return;
                                alreadyCalled = true;
                                values[$index] = value;
                                --remaining || resolve(values);
                            }, reject);
                        });
                        --remaining || resolve(values);
                    });
                    if (abrupt)
                        reject(abrupt.error);
                    return capability.promise;
                },
                race: function race(iterable) {
                    var C = this, capability = newPromiseCapability(C), reject = capability.reject;
                    var abrupt = perform(function () {
                        forOf(iterable, false, function (promise) {
                            C.resolve(promise).then(capability.resolve, reject);
                        });
                    });
                    if (abrupt)
                        reject(abrupt.error);
                    return capability.promise;
                }
            });
        },
        {
            './_a-function': 13,
            './_an-instance': 16,
            './_an-object': 17,
            './_classof': 27,
            './_core': 33,
            './_ctx': 35,
            './_export': 42,
            './_for-of': 47,
            './_global': 48,
            './_is-object': 59,
            './_iter-detect': 64,
            './_library': 68,
            './_microtask': 74,
            './_redefine-all': 96,
            './_set-proto': 99,
            './_set-species': 100,
            './_set-to-string-tag': 101,
            './_species-constructor': 104,
            './_task': 113,
            './_wks': 126
        }
    ],
    208: [
        function (require, module, exports) {
            var $export = require('./_export'), _apply = Function.apply;
            $export($export.S, 'Reflect', {
                apply: function apply(target, thisArgument, argumentsList) {
                    return _apply.call(target, thisArgument, argumentsList);
                }
            });
        },
        { './_export': 42 }
    ],
    209: [
        function (require, module, exports) {
            var $export = require('./_export'), create = require('./_object-create'), aFunction = require('./_a-function'), anObject = require('./_an-object'), isObject = require('./_is-object'), bind = require('./_bind');
            $export($export.S + $export.F * require('./_fails')(function () {
                function F() {
                }
                return !(Reflect.construct(function () {
                }, [], F) instanceof F);
            }), 'Reflect', {
                construct: function construct(Target, args) {
                    aFunction(Target);
                    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
                    if (Target == newTarget) {
                        if (args != undefined)
                            switch (anObject(args).length) {
                            case 0:
                                return new Target();
                            case 1:
                                return new Target(args[0]);
                            case 2:
                                return new Target(args[0], args[1]);
                            case 3:
                                return new Target(args[0], args[1], args[2]);
                            case 4:
                                return new Target(args[0], args[1], args[2], args[3]);
                            }
                        var $args = [null];
                        $args.push.apply($args, args);
                        return new (bind.apply(Target, $args))();
                    }
                    var proto = newTarget.prototype, instance = create(isObject(proto) ? proto : Object.prototype), result = Function.apply.call(Target, instance, args);
                    return isObject(result) ? result : instance;
                }
            });
        },
        {
            './_a-function': 13,
            './_an-object': 17,
            './_bind': 26,
            './_export': 42,
            './_fails': 44,
            './_is-object': 59,
            './_object-create': 76
        }
    ],
    210: [
        function (require, module, exports) {
            var dP = require('./_object-dp'), $export = require('./_export'), anObject = require('./_an-object'), toPrimitive = require('./_to-primitive');
            $export($export.S + $export.F * require('./_fails')(function () {
                Reflect.defineProperty(dP.f({}, 1, { value: 1 }), 1, { value: 2 });
            }), 'Reflect', {
                defineProperty: function defineProperty(target, propertyKey, attributes) {
                    anObject(target);
                    propertyKey = toPrimitive(propertyKey, true);
                    anObject(attributes);
                    try {
                        dP.f(target, propertyKey, attributes);
                        return true;
                    } catch (e) {
                        return false;
                    }
                }
            });
        },
        {
            './_an-object': 17,
            './_export': 42,
            './_fails': 44,
            './_object-dp': 77,
            './_to-primitive': 119
        }
    ],
    211: [
        function (require, module, exports) {
            var $export = require('./_export'), gOPD = require('./_object-gopd').f, anObject = require('./_an-object');
            $export($export.S, 'Reflect', {
                deleteProperty: function deleteProperty(target, propertyKey) {
                    var desc = gOPD(anObject(target), propertyKey);
                    return desc && !desc.configurable ? false : delete target[propertyKey];
                }
            });
        },
        {
            './_an-object': 17,
            './_export': 42,
            './_object-gopd': 80
        }
    ],
    212: [
        function (require, module, exports) {
            'use strict';
            var $export = require('./_export'), anObject = require('./_an-object');
            var Enumerate = function (iterated) {
                this._t = anObject(iterated);
                this._i = 0;
                var keys = this._k = [], key;
                for (key in iterated)
                    keys.push(key);
            };
            require('./_iter-create')(Enumerate, 'Object', function () {
                var that = this, keys = that._k, key;
                do {
                    if (that._i >= keys.length)
                        return {
                            value: undefined,
                            done: true
                        };
                } while (!((key = keys[that._i++]) in that._t));
                return {
                    value: key,
                    done: false
                };
            });
            $export($export.S, 'Reflect', {
                enumerate: function enumerate(target) {
                    return new Enumerate(target);
                }
            });
        },
        {
            './_an-object': 17,
            './_export': 42,
            './_iter-create': 62
        }
    ],
    213: [
        function (require, module, exports) {
            var gOPD = require('./_object-gopd'), $export = require('./_export'), anObject = require('./_an-object');
            $export($export.S, 'Reflect', {
                getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
                    return gOPD.f(anObject(target), propertyKey);
                }
            });
        },
        {
            './_an-object': 17,
            './_export': 42,
            './_object-gopd': 80
        }
    ],
    214: [
        function (require, module, exports) {
            var $export = require('./_export'), getProto = require('./_object-gpo'), anObject = require('./_an-object');
            $export($export.S, 'Reflect', {
                getPrototypeOf: function getPrototypeOf(target) {
                    return getProto(anObject(target));
                }
            });
        },
        {
            './_an-object': 17,
            './_export': 42,
            './_object-gpo': 84
        }
    ],
    215: [
        function (require, module, exports) {
            var gOPD = require('./_object-gopd'), getPrototypeOf = require('./_object-gpo'), has = require('./_has'), $export = require('./_export'), isObject = require('./_is-object'), anObject = require('./_an-object');
            function get(target, propertyKey) {
                var receiver = arguments.length < 3 ? target : arguments[2], desc, proto;
                if (anObject(target) === receiver)
                    return target[propertyKey];
                if (desc = gOPD.f(target, propertyKey))
                    return has(desc, 'value') ? desc.value : desc.get !== undefined ? desc.get.call(receiver) : undefined;
                if (isObject(proto = getPrototypeOf(target)))
                    return get(proto, propertyKey, receiver);
            }
            $export($export.S, 'Reflect', { get: get });
        },
        {
            './_an-object': 17,
            './_export': 42,
            './_has': 49,
            './_is-object': 59,
            './_object-gopd': 80,
            './_object-gpo': 84
        }
    ],
    216: [
        function (require, module, exports) {
            var $export = require('./_export');
            $export($export.S, 'Reflect', {
                has: function has(target, propertyKey) {
                    return propertyKey in target;
                }
            });
        },
        { './_export': 42 }
    ],
    217: [
        function (require, module, exports) {
            var $export = require('./_export'), anObject = require('./_an-object'), $isExtensible = Object.isExtensible;
            $export($export.S, 'Reflect', {
                isExtensible: function isExtensible(target) {
                    anObject(target);
                    return $isExtensible ? $isExtensible(target) : true;
                }
            });
        },
        {
            './_an-object': 17,
            './_export': 42
        }
    ],
    218: [
        function (require, module, exports) {
            var $export = require('./_export');
            $export($export.S, 'Reflect', { ownKeys: require('./_own-keys') });
        },
        {
            './_export': 42,
            './_own-keys': 90
        }
    ],
    219: [
        function (require, module, exports) {
            var $export = require('./_export'), anObject = require('./_an-object'), $preventExtensions = Object.preventExtensions;
            $export($export.S, 'Reflect', {
                preventExtensions: function preventExtensions(target) {
                    anObject(target);
                    try {
                        if ($preventExtensions)
                            $preventExtensions(target);
                        return true;
                    } catch (e) {
                        return false;
                    }
                }
            });
        },
        {
            './_an-object': 17,
            './_export': 42
        }
    ],
    220: [
        function (require, module, exports) {
            var $export = require('./_export'), setProto = require('./_set-proto');
            if (setProto)
                $export($export.S, 'Reflect', {
                    setPrototypeOf: function setPrototypeOf(target, proto) {
                        setProto.check(target, proto);
                        try {
                            setProto.set(target, proto);
                            return true;
                        } catch (e) {
                            return false;
                        }
                    }
                });
        },
        {
            './_export': 42,
            './_set-proto': 99
        }
    ],
    221: [
        function (require, module, exports) {
            var dP = require('./_object-dp'), gOPD = require('./_object-gopd'), getPrototypeOf = require('./_object-gpo'), has = require('./_has'), $export = require('./_export'), createDesc = require('./_property-desc'), anObject = require('./_an-object'), isObject = require('./_is-object');
            function set(target, propertyKey, V) {
                var receiver = arguments.length < 4 ? target : arguments[3], ownDesc = gOPD.f(anObject(target), propertyKey), existingDescriptor, proto;
                if (!ownDesc) {
                    if (isObject(proto = getPrototypeOf(target))) {
                        return set(proto, propertyKey, V, receiver);
                    }
                    ownDesc = createDesc(0);
                }
                if (has(ownDesc, 'value')) {
                    if (ownDesc.writable === false || !isObject(receiver))
                        return false;
                    existingDescriptor = gOPD.f(receiver, propertyKey) || createDesc(0);
                    existingDescriptor.value = V;
                    dP.f(receiver, propertyKey, existingDescriptor);
                    return true;
                }
                return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
            }
            $export($export.S, 'Reflect', { set: set });
        },
        {
            './_an-object': 17,
            './_export': 42,
            './_has': 49,
            './_is-object': 59,
            './_object-dp': 77,
            './_object-gopd': 80,
            './_object-gpo': 84,
            './_property-desc': 95
        }
    ],
    222: [
        function (require, module, exports) {
            var global = require('./_global'), inheritIfRequired = require('./_inherit-if-required'), dP = require('./_object-dp').f, gOPN = require('./_object-gopn').f, isRegExp = require('./_is-regexp'), $flags = require('./_flags'), $RegExp = global.RegExp, Base = $RegExp, proto = $RegExp.prototype, re1 = /a/g, re2 = /a/g, CORRECT_NEW = new $RegExp(re1) !== re1;
            if (require('./_descriptors') && (!CORRECT_NEW || require('./_fails')(function () {
                    re2[require('./_wks')('match')] = false;
                    return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
                }))) {
                $RegExp = function RegExp(p, f) {
                    var tiRE = this instanceof $RegExp, piRE = isRegExp(p), fiU = f === undefined;
                    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p : inheritIfRequired(CORRECT_NEW ? new Base(piRE && !fiU ? p.source : p, f) : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f), tiRE ? this : proto, $RegExp);
                };
                var proxy = function (key) {
                    key in $RegExp || dP($RegExp, key, {
                        configurable: true,
                        get: function () {
                            return Base[key];
                        },
                        set: function (it) {
                            Base[key] = it;
                        }
                    });
                };
                for (var keys = gOPN(Base), i = 0; keys.length > i;)
                    proxy(keys[i++]);
                proto.constructor = $RegExp;
                $RegExp.prototype = proto;
                require('./_redefine')(global, 'RegExp', $RegExp);
            }
            require('./_set-species')('RegExp');
        },
        {
            './_descriptors': 38,
            './_fails': 44,
            './_flags': 46,
            './_global': 48,
            './_inherit-if-required': 53,
            './_is-regexp': 60,
            './_object-dp': 77,
            './_object-gopn': 82,
            './_redefine': 97,
            './_set-species': 100,
            './_wks': 126
        }
    ],
    223: [
        function (require, module, exports) {
            if (require('./_descriptors') && /./g.flags != 'g')
                require('./_object-dp').f(RegExp.prototype, 'flags', {
                    configurable: true,
                    get: require('./_flags')
                });
        },
        {
            './_descriptors': 38,
            './_flags': 46,
            './_object-dp': 77
        }
    ],
    224: [
        function (require, module, exports) {
            require('./_fix-re-wks')('match', 1, function (defined, MATCH, $match) {
                return [
                    function match(regexp) {
                        'use strict';
                        var O = defined(this), fn = regexp == undefined ? undefined : regexp[MATCH];
                        return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
                    },
                    $match
                ];
            });
        },
        { './_fix-re-wks': 45 }
    ],
    225: [
        function (require, module, exports) {
            require('./_fix-re-wks')('replace', 2, function (defined, REPLACE, $replace) {
                return [
                    function replace(searchValue, replaceValue) {
                        'use strict';
                        var O = defined(this), fn = searchValue == undefined ? undefined : searchValue[REPLACE];
                        return fn !== undefined ? fn.call(searchValue, O, replaceValue) : $replace.call(String(O), searchValue, replaceValue);
                    },
                    $replace
                ];
            });
        },
        { './_fix-re-wks': 45 }
    ],
    226: [
        function (require, module, exports) {
            require('./_fix-re-wks')('search', 1, function (defined, SEARCH, $search) {
                return [
                    function search(regexp) {
                        'use strict';
                        var O = defined(this), fn = regexp == undefined ? undefined : regexp[SEARCH];
                        return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
                    },
                    $search
                ];
            });
        },
        { './_fix-re-wks': 45 }
    ],
    227: [
        function (require, module, exports) {
            require('./_fix-re-wks')('split', 2, function (defined, SPLIT, $split) {
                'use strict';
                var isRegExp = require('./_is-regexp'), _split = $split, $push = [].push, $SPLIT = 'split', LENGTH = 'length', LAST_INDEX = 'lastIndex';
                if ('abbc'[$SPLIT](/(b)*/)[1] == 'c' || 'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 || 'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 || '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 || '.'[$SPLIT](/()()/)[LENGTH] > 1 || ''[$SPLIT](/.?/)[LENGTH]) {
                    var NPCG = /()??/.exec('')[1] === undefined;
                    $split = function (separator, limit) {
                        var string = String(this);
                        if (separator === undefined && limit === 0)
                            return [];
                        if (!isRegExp(separator))
                            return _split.call(string, separator, limit);
                        var output = [];
                        var flags = (separator.ignoreCase ? 'i' : '') + (separator.multiline ? 'm' : '') + (separator.unicode ? 'u' : '') + (separator.sticky ? 'y' : '');
                        var lastLastIndex = 0;
                        var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;
                        var separatorCopy = new RegExp(separator.source, flags + 'g');
                        var separator2, match, lastIndex, lastLength, i;
                        if (!NPCG)
                            separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags);
                        while (match = separatorCopy.exec(string)) {
                            lastIndex = match.index + match[0][LENGTH];
                            if (lastIndex > lastLastIndex) {
                                output.push(string.slice(lastLastIndex, match.index));
                                if (!NPCG && match[LENGTH] > 1)
                                    match[0].replace(separator2, function () {
                                        for (i = 1; i < arguments[LENGTH] - 2; i++)
                                            if (arguments[i] === undefined)
                                                match[i] = undefined;
                                    });
                                if (match[LENGTH] > 1 && match.index < string[LENGTH])
                                    $push.apply(output, match.slice(1));
                                lastLength = match[0][LENGTH];
                                lastLastIndex = lastIndex;
                                if (output[LENGTH] >= splitLimit)
                                    break;
                            }
                            if (separatorCopy[LAST_INDEX] === match.index)
                                separatorCopy[LAST_INDEX]++;
                        }
                        if (lastLastIndex === string[LENGTH]) {
                            if (lastLength || !separatorCopy.test(''))
                                output.push('');
                        } else
                            output.push(string.slice(lastLastIndex));
                        return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
                    };
                } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
                    $split = function (separator, limit) {
                        return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);
                    };
                }
                return [
                    function split(separator, limit) {
                        var O = defined(this), fn = separator == undefined ? undefined : separator[SPLIT];
                        return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);
                    },
                    $split
                ];
            });
        },
        {
            './_fix-re-wks': 45,
            './_is-regexp': 60
        }
    ],
    228: [
        function (require, module, exports) {
            'use strict';
            require('./es6.regexp.flags');
            var anObject = require('./_an-object'), $flags = require('./_flags'), DESCRIPTORS = require('./_descriptors'), TO_STRING = 'toString', $toString = /./[TO_STRING];
            var define = function (fn) {
                require('./_redefine')(RegExp.prototype, TO_STRING, fn, true);
            };
            if (require('./_fails')(function () {
                    return $toString.call({
                        source: 'a',
                        flags: 'b'
                    }) != '/a/b';
                })) {
                define(function toString() {
                    var R = anObject(this);
                    return '/'.concat(R.source, '/', 'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
                });
            } else if ($toString.name != TO_STRING) {
                define(function toString() {
                    return $toString.call(this);
                });
            }
        },
        {
            './_an-object': 17,
            './_descriptors': 38,
            './_fails': 44,
            './_flags': 46,
            './_redefine': 97,
            './es6.regexp.flags': 223
        }
    ],
    229: [
        function (require, module, exports) {
            'use strict';
            var strong = require('./_collection-strong');
            module.exports = require('./_collection')('Set', function (get) {
                return function Set() {
                    return get(this, arguments.length > 0 ? arguments[0] : undefined);
                };
            }, {
                add: function add(value) {
                    return strong.def(this, value = value === 0 ? 0 : value, value);
                }
            }, strong);
        },
        {
            './_collection': 32,
            './_collection-strong': 29
        }
    ],
    230: [
        function (require, module, exports) {
            'use strict';
            require('./_string-html')('anchor', function (createHTML) {
                return function anchor(name) {
                    return createHTML(this, 'a', 'name', name);
                };
            });
        },
        { './_string-html': 108 }
    ],
    231: [
        function (require, module, exports) {
            'use strict';
            require('./_string-html')('big', function (createHTML) {
                return function big() {
                    return createHTML(this, 'big', '', '');
                };
            });
        },
        { './_string-html': 108 }
    ],
    232: [
        function (require, module, exports) {
            'use strict';
            require('./_string-html')('blink', function (createHTML) {
                return function blink() {
                    return createHTML(this, 'blink', '', '');
                };
            });
        },
        { './_string-html': 108 }
    ],
    233: [
        function (require, module, exports) {
            'use strict';
            require('./_string-html')('bold', function (createHTML) {
                return function bold() {
                    return createHTML(this, 'b', '', '');
                };
            });
        },
        { './_string-html': 108 }
    ],
    234: [
        function (require, module, exports) {
            'use strict';
            var $export = require('./_export'), $at = require('./_string-at')(false);
            $export($export.P, 'String', {
                codePointAt: function codePointAt(pos) {
                    return $at(this, pos);
                }
            });
        },
        {
            './_export': 42,
            './_string-at': 106
        }
    ],
    235: [
        function (require, module, exports) {
            'use strict';
            var $export = require('./_export'), toLength = require('./_to-length'), context = require('./_string-context'), ENDS_WITH = 'endsWith', $endsWith = ''[ENDS_WITH];
            $export($export.P + $export.F * require('./_fails-is-regexp')(ENDS_WITH), 'String', {
                endsWith: function endsWith(searchString) {
                    var that = context(this, searchString, ENDS_WITH), endPosition = arguments.length > 1 ? arguments[1] : undefined, len = toLength(that.length), end = endPosition === undefined ? len : Math.min(toLength(endPosition), len), search = String(searchString);
                    return $endsWith ? $endsWith.call(that, search, end) : that.slice(end - search.length, end) === search;
                }
            });
        },
        {
            './_export': 42,
            './_fails-is-regexp': 43,
            './_string-context': 107,
            './_to-length': 117
        }
    ],
    236: [
        function (require, module, exports) {
            'use strict';
            require('./_string-html')('fixed', function (createHTML) {
                return function fixed() {
                    return createHTML(this, 'tt', '', '');
                };
            });
        },
        { './_string-html': 108 }
    ],
    237: [
        function (require, module, exports) {
            'use strict';
            require('./_string-html')('fontcolor', function (createHTML) {
                return function fontcolor(color) {
                    return createHTML(this, 'font', 'color', color);
                };
            });
        },
        { './_string-html': 108 }
    ],
    238: [
        function (require, module, exports) {
            'use strict';
            require('./_string-html')('fontsize', function (createHTML) {
                return function fontsize(size) {
                    return createHTML(this, 'font', 'size', size);
                };
            });
        },
        { './_string-html': 108 }
    ],
    239: [
        function (require, module, exports) {
            var $export = require('./_export'), toIndex = require('./_to-index'), fromCharCode = String.fromCharCode, $fromCodePoint = String.fromCodePoint;
            $export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
                fromCodePoint: function fromCodePoint(x) {
                    var res = [], aLen = arguments.length, i = 0, code;
                    while (aLen > i) {
                        code = +arguments[i++];
                        if (toIndex(code, 1114111) !== code)
                            throw RangeError(code + ' is not a valid code point');
                        res.push(code < 65536 ? fromCharCode(code) : fromCharCode(((code -= 65536) >> 10) + 55296, code % 1024 + 56320));
                    }
                    return res.join('');
                }
            });
        },
        {
            './_export': 42,
            './_to-index': 114
        }
    ],
    240: [
        function (require, module, exports) {
            'use strict';
            var $export = require('./_export'), context = require('./_string-context'), INCLUDES = 'includes';
            $export($export.P + $export.F * require('./_fails-is-regexp')(INCLUDES), 'String', {
                includes: function includes(searchString) {
                    return !!~context(this, searchString, INCLUDES).indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
                }
            });
        },
        {
            './_export': 42,
            './_fails-is-regexp': 43,
            './_string-context': 107
        }
    ],
    241: [
        function (require, module, exports) {
            'use strict';
            require('./_string-html')('italics', function (createHTML) {
                return function italics() {
                    return createHTML(this, 'i', '', '');
                };
            });
        },
        { './_string-html': 108 }
    ],
    242: [
        function (require, module, exports) {
            'use strict';
            var $at = require('./_string-at')(true);
            require('./_iter-define')(String, 'String', function (iterated) {
                this._t = String(iterated);
                this._i = 0;
            }, function () {
                var O = this._t, index = this._i, point;
                if (index >= O.length)
                    return {
                        value: undefined,
                        done: true
                    };
                point = $at(O, index);
                this._i += point.length;
                return {
                    value: point,
                    done: false
                };
            });
        },
        {
            './_iter-define': 63,
            './_string-at': 106
        }
    ],
    243: [
        function (require, module, exports) {
            'use strict';
            require('./_string-html')('link', function (createHTML) {
                return function link(url) {
                    return createHTML(this, 'a', 'href', url);
                };
            });
        },
        { './_string-html': 108 }
    ],
    244: [
        function (require, module, exports) {
            var $export = require('./_export'), toIObject = require('./_to-iobject'), toLength = require('./_to-length');
            $export($export.S, 'String', {
                raw: function raw(callSite) {
                    var tpl = toIObject(callSite.raw), len = toLength(tpl.length), aLen = arguments.length, res = [], i = 0;
                    while (len > i) {
                        res.push(String(tpl[i++]));
                        if (i < aLen)
                            res.push(String(arguments[i]));
                    }
                    return res.join('');
                }
            });
        },
        {
            './_export': 42,
            './_to-iobject': 116,
            './_to-length': 117
        }
    ],
    245: [
        function (require, module, exports) {
            var $export = require('./_export');
            $export($export.P, 'String', { repeat: require('./_string-repeat') });
        },
        {
            './_export': 42,
            './_string-repeat': 110
        }
    ],
    246: [
        function (require, module, exports) {
            'use strict';
            require('./_string-html')('small', function (createHTML) {
                return function small() {
                    return createHTML(this, 'small', '', '');
                };
            });
        },
        { './_string-html': 108 }
    ],
    247: [
        function (require, module, exports) {
            'use strict';
            var $export = require('./_export'), toLength = require('./_to-length'), context = require('./_string-context'), STARTS_WITH = 'startsWith', $startsWith = ''[STARTS_WITH];
            $export($export.P + $export.F * require('./_fails-is-regexp')(STARTS_WITH), 'String', {
                startsWith: function startsWith(searchString) {
                    var that = context(this, searchString, STARTS_WITH), index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length)), search = String(searchString);
                    return $startsWith ? $startsWith.call(that, search, index) : that.slice(index, index + search.length) === search;
                }
            });
        },
        {
            './_export': 42,
            './_fails-is-regexp': 43,
            './_string-context': 107,
            './_to-length': 117
        }
    ],
    248: [
        function (require, module, exports) {
            'use strict';
            require('./_string-html')('strike', function (createHTML) {
                return function strike() {
                    return createHTML(this, 'strike', '', '');
                };
            });
        },
        { './_string-html': 108 }
    ],
    249: [
        function (require, module, exports) {
            'use strict';
            require('./_string-html')('sub', function (createHTML) {
                return function sub() {
                    return createHTML(this, 'sub', '', '');
                };
            });
        },
        { './_string-html': 108 }
    ],
    250: [
        function (require, module, exports) {
            'use strict';
            require('./_string-html')('sup', function (createHTML) {
                return function sup() {
                    return createHTML(this, 'sup', '', '');
                };
            });
        },
        { './_string-html': 108 }
    ],
    251: [
        function (require, module, exports) {
            'use strict';
            require('./_string-trim')('trim', function ($trim) {
                return function trim() {
                    return $trim(this, 3);
                };
            });
        },
        { './_string-trim': 111 }
    ],
    252: [
        function (require, module, exports) {
            'use strict';
            var global = require('./_global'), has = require('./_has'), DESCRIPTORS = require('./_descriptors'), $export = require('./_export'), redefine = require('./_redefine'), META = require('./_meta').KEY, $fails = require('./_fails'), shared = require('./_shared'), setToStringTag = require('./_set-to-string-tag'), uid = require('./_uid'), wks = require('./_wks'), wksExt = require('./_wks-ext'), wksDefine = require('./_wks-define'), keyOf = require('./_keyof'), enumKeys = require('./_enum-keys'), isArray = require('./_is-array'), anObject = require('./_an-object'), toIObject = require('./_to-iobject'), toPrimitive = require('./_to-primitive'), createDesc = require('./_property-desc'), _create = require('./_object-create'), gOPNExt = require('./_object-gopn-ext'), $GOPD = require('./_object-gopd'), $DP = require('./_object-dp'), $keys = require('./_object-keys'), gOPD = $GOPD.f, dP = $DP.f, gOPN = gOPNExt.f, $Symbol = global.Symbol, $JSON = global.JSON, _stringify = $JSON && $JSON.stringify, PROTOTYPE = 'prototype', HIDDEN = wks('_hidden'), TO_PRIMITIVE = wks('toPrimitive'), isEnum = {}.propertyIsEnumerable, SymbolRegistry = shared('symbol-registry'), AllSymbols = shared('symbols'), ObjectProto = Object[PROTOTYPE], USE_NATIVE = typeof $Symbol == 'function', QObject = global.QObject;
            var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
            var setSymbolDesc = DESCRIPTORS && $fails(function () {
                return _create(dP({}, 'a', {
                    get: function () {
                        return dP(this, 'a', { value: 7 }).a;
                    }
                })).a != 7;
            }) ? function (it, key, D) {
                var protoDesc = gOPD(ObjectProto, key);
                if (protoDesc)
                    delete ObjectProto[key];
                dP(it, key, D);
                if (protoDesc && it !== ObjectProto)
                    dP(ObjectProto, key, protoDesc);
            } : dP;
            var wrap = function (tag) {
                var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
                sym._k = tag;
                return sym;
            };
            var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
                return typeof it == 'symbol';
            } : function (it) {
                return it instanceof $Symbol;
            };
            var $defineProperty = function defineProperty(it, key, D) {
                anObject(it);
                key = toPrimitive(key, true);
                anObject(D);
                if (has(AllSymbols, key)) {
                    if (!D.enumerable) {
                        if (!has(it, HIDDEN))
                            dP(it, HIDDEN, createDesc(1, {}));
                        it[HIDDEN][key] = true;
                    } else {
                        if (has(it, HIDDEN) && it[HIDDEN][key])
                            it[HIDDEN][key] = false;
                        D = _create(D, { enumerable: createDesc(0, false) });
                    }
                    return setSymbolDesc(it, key, D);
                }
                return dP(it, key, D);
            };
            var $defineProperties = function defineProperties(it, P) {
                anObject(it);
                var keys = enumKeys(P = toIObject(P)), i = 0, l = keys.length, key;
                while (l > i)
                    $defineProperty(it, key = keys[i++], P[key]);
                return it;
            };
            var $create = function create(it, P) {
                return P === undefined ? _create(it) : $defineProperties(_create(it), P);
            };
            var $propertyIsEnumerable = function propertyIsEnumerable(key) {
                var E = isEnum.call(this, key = toPrimitive(key, true));
                return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
            };
            var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
                var D = gOPD(it = toIObject(it), key = toPrimitive(key, true));
                if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))
                    D.enumerable = true;
                return D;
            };
            var $getOwnPropertyNames = function getOwnPropertyNames(it) {
                var names = gOPN(toIObject(it)), result = [], i = 0, key;
                while (names.length > i)
                    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)
                        result.push(key);
                return result;
            };
            var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
                var names = gOPN(toIObject(it)), result = [], i = 0, key;
                while (names.length > i)
                    if (has(AllSymbols, key = names[i++]))
                        result.push(AllSymbols[key]);
                return result;
            };
            if (!USE_NATIVE) {
                $Symbol = function Symbol() {
                    if (this instanceof $Symbol)
                        throw TypeError('Symbol is not a constructor!');
                    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
                    DESCRIPTORS && setter && setSymbolDesc(ObjectProto, tag, {
                        configurable: true,
                        set: function (value) {
                            if (has(this, HIDDEN) && has(this[HIDDEN], tag))
                                this[HIDDEN][tag] = false;
                            setSymbolDesc(this, tag, createDesc(1, value));
                        }
                    });
                    return wrap(tag);
                };
                redefine($Symbol[PROTOTYPE], 'toString', function toString() {
                    return this._k;
                });
                $GOPD.f = $getOwnPropertyDescriptor;
                $DP.f = $defineProperty;
                require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;
                require('./_object-pie').f = $propertyIsEnumerable;
                require('./_object-gops').f = $getOwnPropertySymbols;
                if (DESCRIPTORS && !require('./_library')) {
                    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
                }
                wksExt.f = function (name) {
                    return wrap(wks(name));
                };
            }
            $export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });
            for (var symbols = 'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'.split(','), i = 0; symbols.length > i;)
                wks(symbols[i++]);
            for (var symbols = $keys(wks.store), i = 0; symbols.length > i;)
                wksDefine(symbols[i++]);
            $export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
                'for': function (key) {
                    return has(SymbolRegistry, key += '') ? SymbolRegistry[key] : SymbolRegistry[key] = $Symbol(key);
                },
                keyFor: function keyFor(key) {
                    if (isSymbol(key))
                        return keyOf(SymbolRegistry, key);
                    throw TypeError(key + ' is not a symbol!');
                },
                useSetter: function () {
                    setter = true;
                },
                useSimple: function () {
                    setter = false;
                }
            });
            $export($export.S + $export.F * !USE_NATIVE, 'Object', {
                create: $create,
                defineProperty: $defineProperty,
                defineProperties: $defineProperties,
                getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
                getOwnPropertyNames: $getOwnPropertyNames,
                getOwnPropertySymbols: $getOwnPropertySymbols
            });
            $JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
                var S = $Symbol();
                return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
            })), 'JSON', {
                stringify: function stringify(it) {
                    if (it === undefined || isSymbol(it))
                        return;
                    var args = [it], i = 1, replacer, $replacer;
                    while (arguments.length > i)
                        args.push(arguments[i++]);
                    replacer = args[1];
                    if (typeof replacer == 'function')
                        $replacer = replacer;
                    if ($replacer || !isArray(replacer))
                        replacer = function (key, value) {
                            if ($replacer)
                                value = $replacer.call(this, key, value);
                            if (!isSymbol(value))
                                return value;
                        };
                    args[1] = replacer;
                    return _stringify.apply($JSON, args);
                }
            });
            $Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
            setToStringTag($Symbol, 'Symbol');
            setToStringTag(Math, 'Math', true);
            setToStringTag(global.JSON, 'JSON', true);
        },
        {
            './_an-object': 17,
            './_descriptors': 38,
            './_enum-keys': 41,
            './_export': 42,
            './_fails': 44,
            './_global': 48,
            './_has': 49,
            './_hide': 50,
            './_is-array': 57,
            './_keyof': 67,
            './_library': 68,
            './_meta': 72,
            './_object-create': 76,
            './_object-dp': 77,
            './_object-gopd': 80,
            './_object-gopn': 82,
            './_object-gopn-ext': 81,
            './_object-gops': 83,
            './_object-keys': 86,
            './_object-pie': 87,
            './_property-desc': 95,
            './_redefine': 97,
            './_set-to-string-tag': 101,
            './_shared': 103,
            './_to-iobject': 116,
            './_to-primitive': 119,
            './_uid': 123,
            './_wks': 126,
            './_wks-define': 124,
            './_wks-ext': 125
        }
    ],
    253: [
        function (require, module, exports) {
            'use strict';
            var $export = require('./_export'), $typed = require('./_typed'), buffer = require('./_typed-buffer'), anObject = require('./_an-object'), toIndex = require('./_to-index'), toLength = require('./_to-length'), isObject = require('./_is-object'), TYPED_ARRAY = require('./_wks')('typed_array'), ArrayBuffer = require('./_global').ArrayBuffer, speciesConstructor = require('./_species-constructor'), $ArrayBuffer = buffer.ArrayBuffer, $DataView = buffer.DataView, $isView = $typed.ABV && ArrayBuffer.isView, $slice = $ArrayBuffer.prototype.slice, VIEW = $typed.VIEW, ARRAY_BUFFER = 'ArrayBuffer';
            $export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), { ArrayBuffer: $ArrayBuffer });
            $export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
                isView: function isView(it) {
                    return $isView && $isView(it) || isObject(it) && VIEW in it;
                }
            });
            $export($export.P + $export.U + $export.F * require('./_fails')(function () {
                return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
            }), ARRAY_BUFFER, {
                slice: function slice(start, end) {
                    if ($slice !== undefined && end === undefined)
                        return $slice.call(anObject(this), start);
                    var len = anObject(this).byteLength, first = toIndex(start, len), final = toIndex(end === undefined ? len : end, len), result = new (speciesConstructor(this, $ArrayBuffer))(toLength(final - first)), viewS = new $DataView(this), viewT = new $DataView(result), index = 0;
                    while (first < final) {
                        viewT.setUint8(index++, viewS.getUint8(first++));
                    }
                    return result;
                }
            });
            require('./_set-species')(ARRAY_BUFFER);
        },
        {
            './_an-object': 17,
            './_export': 42,
            './_fails': 44,
            './_global': 48,
            './_is-object': 59,
            './_set-species': 100,
            './_species-constructor': 104,
            './_to-index': 114,
            './_to-length': 117,
            './_typed': 122,
            './_typed-buffer': 121,
            './_wks': 126
        }
    ],
    254: [
        function (require, module, exports) {
            var $export = require('./_export');
            $export($export.G + $export.W + $export.F * !require('./_typed').ABV, { DataView: require('./_typed-buffer').DataView });
        },
        {
            './_export': 42,
            './_typed': 122,
            './_typed-buffer': 121
        }
    ],
    255: [
        function (require, module, exports) {
            require('./_typed-array')('Float32', 4, function (init) {
                return function Float32Array(data, byteOffset, length) {
                    return init(this, data, byteOffset, length);
                };
            });
        },
        { './_typed-array': 120 }
    ],
    256: [
        function (require, module, exports) {
            require('./_typed-array')('Float64', 8, function (init) {
                return function Float64Array(data, byteOffset, length) {
                    return init(this, data, byteOffset, length);
                };
            });
        },
        { './_typed-array': 120 }
    ],
    257: [
        function (require, module, exports) {
            require('./_typed-array')('Int16', 2, function (init) {
                return function Int16Array(data, byteOffset, length) {
                    return init(this, data, byteOffset, length);
                };
            });
        },
        { './_typed-array': 120 }
    ],
    258: [
        function (require, module, exports) {
            require('./_typed-array')('Int32', 4, function (init) {
                return function Int32Array(data, byteOffset, length) {
                    return init(this, data, byteOffset, length);
                };
            });
        },
        { './_typed-array': 120 }
    ],
    259: [
        function (require, module, exports) {
            require('./_typed-array')('Int8', 1, function (init) {
                return function Int8Array(data, byteOffset, length) {
                    return init(this, data, byteOffset, length);
                };
            });
        },
        { './_typed-array': 120 }
    ],
    260: [
        function (require, module, exports) {
            require('./_typed-array')('Uint16', 2, function (init) {
                return function Uint16Array(data, byteOffset, length) {
                    return init(this, data, byteOffset, length);
                };
            });
        },
        { './_typed-array': 120 }
    ],
    261: [
        function (require, module, exports) {
            require('./_typed-array')('Uint32', 4, function (init) {
                return function Uint32Array(data, byteOffset, length) {
                    return init(this, data, byteOffset, length);
                };
            });
        },
        { './_typed-array': 120 }
    ],
    262: [
        function (require, module, exports) {
            require('./_typed-array')('Uint8', 1, function (init) {
                return function Uint8Array(data, byteOffset, length) {
                    return init(this, data, byteOffset, length);
                };
            });
        },
        { './_typed-array': 120 }
    ],
    263: [
        function (require, module, exports) {
            require('./_typed-array')('Uint8', 1, function (init) {
                return function Uint8ClampedArray(data, byteOffset, length) {
                    return init(this, data, byteOffset, length);
                };
            }, true);
        },
        { './_typed-array': 120 }
    ],
    264: [
        function (require, module, exports) {
            'use strict';
            var each = require('./_array-methods')(0), redefine = require('./_redefine'), meta = require('./_meta'), assign = require('./_object-assign'), weak = require('./_collection-weak'), isObject = require('./_is-object'), has = require('./_has'), getWeak = meta.getWeak, isExtensible = Object.isExtensible, uncaughtFrozenStore = weak.ufstore, tmp = {}, InternalMap;
            var wrapper = function (get) {
                return function WeakMap() {
                    return get(this, arguments.length > 0 ? arguments[0] : undefined);
                };
            };
            var methods = {
                get: function get(key) {
                    if (isObject(key)) {
                        var data = getWeak(key);
                        if (data === true)
                            return uncaughtFrozenStore(this).get(key);
                        return data ? data[this._i] : undefined;
                    }
                },
                set: function set(key, value) {
                    return weak.def(this, key, value);
                }
            };
            var $WeakMap = module.exports = require('./_collection')('WeakMap', wrapper, methods, weak, true, true);
            if (new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7) {
                InternalMap = weak.getConstructor(wrapper);
                assign(InternalMap.prototype, methods);
                meta.NEED = true;
                each([
                    'delete',
                    'has',
                    'get',
                    'set'
                ], function (key) {
                    var proto = $WeakMap.prototype, method = proto[key];
                    redefine(proto, key, function (a, b) {
                        if (isObject(a) && !isExtensible(a)) {
                            if (!this._f)
                                this._f = new InternalMap();
                            var result = this._f[key](a, b);
                            return key == 'set' ? this : result;
                        }
                        return method.call(this, a, b);
                    });
                });
            }
        },
        {
            './_array-methods': 22,
            './_collection': 32,
            './_collection-weak': 31,
            './_has': 49,
            './_is-object': 59,
            './_meta': 72,
            './_object-assign': 75,
            './_redefine': 97
        }
    ],
    265: [
        function (require, module, exports) {
            'use strict';
            var weak = require('./_collection-weak');
            require('./_collection')('WeakSet', function (get) {
                return function WeakSet() {
                    return get(this, arguments.length > 0 ? arguments[0] : undefined);
                };
            }, {
                add: function add(value) {
                    return weak.def(this, value, true);
                }
            }, weak, false, true);
        },
        {
            './_collection': 32,
            './_collection-weak': 31
        }
    ],
    266: [
        function (require, module, exports) {
            'use strict';
            var $export = require('./_export'), $includes = require('./_array-includes')(true);
            $export($export.P, 'Array', {
                includes: function includes(el) {
                    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
                }
            });
            require('./_add-to-unscopables')('includes');
        },
        {
            './_add-to-unscopables': 15,
            './_array-includes': 21,
            './_export': 42
        }
    ],
    267: [
        function (require, module, exports) {
            var $export = require('./_export'), microtask = require('./_microtask')(), process = require('./_global').process, isNode = require('./_cof')(process) == 'process';
            $export($export.G, {
                asap: function asap(fn) {
                    var domain = isNode && process.domain;
                    microtask(domain ? domain.bind(fn) : fn);
                }
            });
        },
        {
            './_cof': 28,
            './_export': 42,
            './_global': 48,
            './_microtask': 74
        }
    ],
    268: [
        function (require, module, exports) {
            var $export = require('./_export'), cof = require('./_cof');
            $export($export.S, 'Error', {
                isError: function isError(it) {
                    return cof(it) === 'Error';
                }
            });
        },
        {
            './_cof': 28,
            './_export': 42
        }
    ],
    269: [
        function (require, module, exports) {
            var $export = require('./_export');
            $export($export.P + $export.R, 'Map', { toJSON: require('./_collection-to-json')('Map') });
        },
        {
            './_collection-to-json': 30,
            './_export': 42
        }
    ],
    270: [
        function (require, module, exports) {
            var $export = require('./_export');
            $export($export.S, 'Math', {
                iaddh: function iaddh(x0, x1, y0, y1) {
                    var $x0 = x0 >>> 0, $x1 = x1 >>> 0, $y0 = y0 >>> 0;
                    return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;
                }
            });
        },
        { './_export': 42 }
    ],
    271: [
        function (require, module, exports) {
            var $export = require('./_export');
            $export($export.S, 'Math', {
                imulh: function imulh(u, v) {
                    var UINT16 = 65535, $u = +u, $v = +v, u0 = $u & UINT16, v0 = $v & UINT16, u1 = $u >> 16, v1 = $v >> 16, t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
                    return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);
                }
            });
        },
        { './_export': 42 }
    ],
    272: [
        function (require, module, exports) {
            var $export = require('./_export');
            $export($export.S, 'Math', {
                isubh: function isubh(x0, x1, y0, y1) {
                    var $x0 = x0 >>> 0, $x1 = x1 >>> 0, $y0 = y0 >>> 0;
                    return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;
                }
            });
        },
        { './_export': 42 }
    ],
    273: [
        function (require, module, exports) {
            var $export = require('./_export');
            $export($export.S, 'Math', {
                umulh: function umulh(u, v) {
                    var UINT16 = 65535, $u = +u, $v = +v, u0 = $u & UINT16, v0 = $v & UINT16, u1 = $u >>> 16, v1 = $v >>> 16, t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
                    return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);
                }
            });
        },
        { './_export': 42 }
    ],
    274: [
        function (require, module, exports) {
            'use strict';
            var $export = require('./_export'), toObject = require('./_to-object'), aFunction = require('./_a-function'), $defineProperty = require('./_object-dp');
            require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
                __defineGetter__: function __defineGetter__(P, getter) {
                    $defineProperty.f(toObject(this), P, {
                        get: aFunction(getter),
                        enumerable: true,
                        configurable: true
                    });
                }
            });
        },
        {
            './_a-function': 13,
            './_descriptors': 38,
            './_export': 42,
            './_object-dp': 77,
            './_object-forced-pam': 79,
            './_to-object': 118
        }
    ],
    275: [
        function (require, module, exports) {
            'use strict';
            var $export = require('./_export'), toObject = require('./_to-object'), aFunction = require('./_a-function'), $defineProperty = require('./_object-dp');
            require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
                __defineSetter__: function __defineSetter__(P, setter) {
                    $defineProperty.f(toObject(this), P, {
                        set: aFunction(setter),
                        enumerable: true,
                        configurable: true
                    });
                }
            });
        },
        {
            './_a-function': 13,
            './_descriptors': 38,
            './_export': 42,
            './_object-dp': 77,
            './_object-forced-pam': 79,
            './_to-object': 118
        }
    ],
    276: [
        function (require, module, exports) {
            var $export = require('./_export'), $entries = require('./_object-to-array')(true);
            $export($export.S, 'Object', {
                entries: function entries(it) {
                    return $entries(it);
                }
            });
        },
        {
            './_export': 42,
            './_object-to-array': 89
        }
    ],
    277: [
        function (require, module, exports) {
            var $export = require('./_export'), ownKeys = require('./_own-keys'), toIObject = require('./_to-iobject'), gOPD = require('./_object-gopd'), createProperty = require('./_create-property');
            $export($export.S, 'Object', {
                getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
                    var O = toIObject(object), getDesc = gOPD.f, keys = ownKeys(O), result = {}, i = 0, key, D;
                    while (keys.length > i)
                        createProperty(result, key = keys[i++], getDesc(O, key));
                    return result;
                }
            });
        },
        {
            './_create-property': 34,
            './_export': 42,
            './_object-gopd': 80,
            './_own-keys': 90,
            './_to-iobject': 116
        }
    ],
    278: [
        function (require, module, exports) {
            'use strict';
            var $export = require('./_export'), toObject = require('./_to-object'), toPrimitive = require('./_to-primitive'), getPrototypeOf = require('./_object-gpo'), getOwnPropertyDescriptor = require('./_object-gopd').f;
            require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
                __lookupGetter__: function __lookupGetter__(P) {
                    var O = toObject(this), K = toPrimitive(P, true), D;
                    do {
                        if (D = getOwnPropertyDescriptor(O, K))
                            return D.get;
                    } while (O = getPrototypeOf(O));
                }
            });
        },
        {
            './_descriptors': 38,
            './_export': 42,
            './_object-forced-pam': 79,
            './_object-gopd': 80,
            './_object-gpo': 84,
            './_to-object': 118,
            './_to-primitive': 119
        }
    ],
    279: [
        function (require, module, exports) {
            'use strict';
            var $export = require('./_export'), toObject = require('./_to-object'), toPrimitive = require('./_to-primitive'), getPrototypeOf = require('./_object-gpo'), getOwnPropertyDescriptor = require('./_object-gopd').f;
            require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
                __lookupSetter__: function __lookupSetter__(P) {
                    var O = toObject(this), K = toPrimitive(P, true), D;
                    do {
                        if (D = getOwnPropertyDescriptor(O, K))
                            return D.set;
                    } while (O = getPrototypeOf(O));
                }
            });
        },
        {
            './_descriptors': 38,
            './_export': 42,
            './_object-forced-pam': 79,
            './_object-gopd': 80,
            './_object-gpo': 84,
            './_to-object': 118,
            './_to-primitive': 119
        }
    ],
    280: [
        function (require, module, exports) {
            var $export = require('./_export'), $values = require('./_object-to-array')(false);
            $export($export.S, 'Object', {
                values: function values(it) {
                    return $values(it);
                }
            });
        },
        {
            './_export': 42,
            './_object-to-array': 89
        }
    ],
    281: [
        function (require, module, exports) {
            var metadata = require('./_metadata'), anObject = require('./_an-object'), toMetaKey = metadata.key, ordinaryDefineOwnMetadata = metadata.set;
            metadata.exp({
                defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey) {
                    ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));
                }
            });
        },
        {
            './_an-object': 17,
            './_metadata': 73
        }
    ],
    282: [
        function (require, module, exports) {
            var metadata = require('./_metadata'), anObject = require('./_an-object'), toMetaKey = metadata.key, getOrCreateMetadataMap = metadata.map, store = metadata.store;
            metadata.exp({
                deleteMetadata: function deleteMetadata(metadataKey, target) {
                    var targetKey = arguments.length < 3 ? undefined : toMetaKey(arguments[2]), metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);
                    if (metadataMap === undefined || !metadataMap['delete'](metadataKey))
                        return false;
                    if (metadataMap.size)
                        return true;
                    var targetMetadata = store.get(target);
                    targetMetadata['delete'](targetKey);
                    return !!targetMetadata.size || store['delete'](target);
                }
            });
        },
        {
            './_an-object': 17,
            './_metadata': 73
        }
    ],
    283: [
        function (require, module, exports) {
            var Set = require('./es6.set'), from = require('./_array-from-iterable'), metadata = require('./_metadata'), anObject = require('./_an-object'), getPrototypeOf = require('./_object-gpo'), ordinaryOwnMetadataKeys = metadata.keys, toMetaKey = metadata.key;
            var ordinaryMetadataKeys = function (O, P) {
                var oKeys = ordinaryOwnMetadataKeys(O, P), parent = getPrototypeOf(O);
                if (parent === null)
                    return oKeys;
                var pKeys = ordinaryMetadataKeys(parent, P);
                return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;
            };
            metadata.exp({
                getMetadataKeys: function getMetadataKeys(target) {
                    return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
                }
            });
        },
        {
            './_an-object': 17,
            './_array-from-iterable': 20,
            './_metadata': 73,
            './_object-gpo': 84,
            './es6.set': 229
        }
    ],
    284: [
        function (require, module, exports) {
            var metadata = require('./_metadata'), anObject = require('./_an-object'), getPrototypeOf = require('./_object-gpo'), ordinaryHasOwnMetadata = metadata.has, ordinaryGetOwnMetadata = metadata.get, toMetaKey = metadata.key;
            var ordinaryGetMetadata = function (MetadataKey, O, P) {
                var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
                if (hasOwn)
                    return ordinaryGetOwnMetadata(MetadataKey, O, P);
                var parent = getPrototypeOf(O);
                return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;
            };
            metadata.exp({
                getMetadata: function getMetadata(metadataKey, target) {
                    return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
                }
            });
        },
        {
            './_an-object': 17,
            './_metadata': 73,
            './_object-gpo': 84
        }
    ],
    285: [
        function (require, module, exports) {
            var metadata = require('./_metadata'), anObject = require('./_an-object'), ordinaryOwnMetadataKeys = metadata.keys, toMetaKey = metadata.key;
            metadata.exp({
                getOwnMetadataKeys: function getOwnMetadataKeys(target) {
                    return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
                }
            });
        },
        {
            './_an-object': 17,
            './_metadata': 73
        }
    ],
    286: [
        function (require, module, exports) {
            var metadata = require('./_metadata'), anObject = require('./_an-object'), ordinaryGetOwnMetadata = metadata.get, toMetaKey = metadata.key;
            metadata.exp({
                getOwnMetadata: function getOwnMetadata(metadataKey, target) {
                    return ordinaryGetOwnMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
                }
            });
        },
        {
            './_an-object': 17,
            './_metadata': 73
        }
    ],
    287: [
        function (require, module, exports) {
            var metadata = require('./_metadata'), anObject = require('./_an-object'), getPrototypeOf = require('./_object-gpo'), ordinaryHasOwnMetadata = metadata.has, toMetaKey = metadata.key;
            var ordinaryHasMetadata = function (MetadataKey, O, P) {
                var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
                if (hasOwn)
                    return true;
                var parent = getPrototypeOf(O);
                return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;
            };
            metadata.exp({
                hasMetadata: function hasMetadata(metadataKey, target) {
                    return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
                }
            });
        },
        {
            './_an-object': 17,
            './_metadata': 73,
            './_object-gpo': 84
        }
    ],
    288: [
        function (require, module, exports) {
            var metadata = require('./_metadata'), anObject = require('./_an-object'), ordinaryHasOwnMetadata = metadata.has, toMetaKey = metadata.key;
            metadata.exp({
                hasOwnMetadata: function hasOwnMetadata(metadataKey, target) {
                    return ordinaryHasOwnMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
                }
            });
        },
        {
            './_an-object': 17,
            './_metadata': 73
        }
    ],
    289: [
        function (require, module, exports) {
            var metadata = require('./_metadata'), anObject = require('./_an-object'), aFunction = require('./_a-function'), toMetaKey = metadata.key, ordinaryDefineOwnMetadata = metadata.set;
            metadata.exp({
                metadata: function metadata(metadataKey, metadataValue) {
                    return function decorator(target, targetKey) {
                        ordinaryDefineOwnMetadata(metadataKey, metadataValue, (targetKey !== undefined ? anObject : aFunction)(target), toMetaKey(targetKey));
                    };
                }
            });
        },
        {
            './_a-function': 13,
            './_an-object': 17,
            './_metadata': 73
        }
    ],
    290: [
        function (require, module, exports) {
            var $export = require('./_export');
            $export($export.P + $export.R, 'Set', { toJSON: require('./_collection-to-json')('Set') });
        },
        {
            './_collection-to-json': 30,
            './_export': 42
        }
    ],
    291: [
        function (require, module, exports) {
            'use strict';
            var $export = require('./_export'), $at = require('./_string-at')(true);
            $export($export.P, 'String', {
                at: function at(pos) {
                    return $at(this, pos);
                }
            });
        },
        {
            './_export': 42,
            './_string-at': 106
        }
    ],
    292: [
        function (require, module, exports) {
            'use strict';
            var $export = require('./_export'), defined = require('./_defined'), toLength = require('./_to-length'), isRegExp = require('./_is-regexp'), getFlags = require('./_flags'), RegExpProto = RegExp.prototype;
            var $RegExpStringIterator = function (regexp, string) {
                this._r = regexp;
                this._s = string;
            };
            require('./_iter-create')($RegExpStringIterator, 'RegExp String', function next() {
                var match = this._r.exec(this._s);
                return {
                    value: match,
                    done: match === null
                };
            });
            $export($export.P, 'String', {
                matchAll: function matchAll(regexp) {
                    defined(this);
                    if (!isRegExp(regexp))
                        throw TypeError(regexp + ' is not a regexp!');
                    var S = String(this), flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp), rx = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);
                    rx.lastIndex = toLength(regexp.lastIndex);
                    return new $RegExpStringIterator(rx, S);
                }
            });
        },
        {
            './_defined': 37,
            './_export': 42,
            './_flags': 46,
            './_is-regexp': 60,
            './_iter-create': 62,
            './_to-length': 117
        }
    ],
    293: [
        function (require, module, exports) {
            'use strict';
            var $export = require('./_export'), $pad = require('./_string-pad');
            $export($export.P, 'String', {
                padEnd: function padEnd(maxLength) {
                    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
                }
            });
        },
        {
            './_export': 42,
            './_string-pad': 109
        }
    ],
    294: [
        function (require, module, exports) {
            'use strict';
            var $export = require('./_export'), $pad = require('./_string-pad');
            $export($export.P, 'String', {
                padStart: function padStart(maxLength) {
                    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
                }
            });
        },
        {
            './_export': 42,
            './_string-pad': 109
        }
    ],
    295: [
        function (require, module, exports) {
            'use strict';
            require('./_string-trim')('trimLeft', function ($trim) {
                return function trimLeft() {
                    return $trim(this, 1);
                };
            }, 'trimStart');
        },
        { './_string-trim': 111 }
    ],
    296: [
        function (require, module, exports) {
            'use strict';
            require('./_string-trim')('trimRight', function ($trim) {
                return function trimRight() {
                    return $trim(this, 2);
                };
            }, 'trimEnd');
        },
        { './_string-trim': 111 }
    ],
    297: [
        function (require, module, exports) {
            require('./_wks-define')('asyncIterator');
        },
        { './_wks-define': 124 }
    ],
    298: [
        function (require, module, exports) {
            require('./_wks-define')('observable');
        },
        { './_wks-define': 124 }
    ],
    299: [
        function (require, module, exports) {
            var $export = require('./_export');
            $export($export.S, 'System', { global: require('./_global') });
        },
        {
            './_export': 42,
            './_global': 48
        }
    ],
    300: [
        function (require, module, exports) {
            var $iterators = require('./es6.array.iterator'), redefine = require('./_redefine'), global = require('./_global'), hide = require('./_hide'), Iterators = require('./_iterators'), wks = require('./_wks'), ITERATOR = wks('iterator'), TO_STRING_TAG = wks('toStringTag'), ArrayValues = Iterators.Array;
            for (var collections = [
                        'NodeList',
                        'DOMTokenList',
                        'MediaList',
                        'StyleSheetList',
                        'CSSRuleList'
                    ], i = 0; i < 5; i++) {
                var NAME = collections[i], Collection = global[NAME], proto = Collection && Collection.prototype, key;
                if (proto) {
                    if (!proto[ITERATOR])
                        hide(proto, ITERATOR, ArrayValues);
                    if (!proto[TO_STRING_TAG])
                        hide(proto, TO_STRING_TAG, NAME);
                    Iterators[NAME] = ArrayValues;
                    for (key in $iterators)
                        if (!proto[key])
                            redefine(proto, key, $iterators[key], true);
                }
            }
        },
        {
            './_global': 48,
            './_hide': 50,
            './_iterators': 66,
            './_redefine': 97,
            './_wks': 126,
            './es6.array.iterator': 139
        }
    ],
    301: [
        function (require, module, exports) {
            var $export = require('./_export'), $task = require('./_task');
            $export($export.G + $export.B, {
                setImmediate: $task.set,
                clearImmediate: $task.clear
            });
        },
        {
            './_export': 42,
            './_task': 113
        }
    ],
    302: [
        function (require, module, exports) {
            var global = require('./_global'), $export = require('./_export'), invoke = require('./_invoke'), partial = require('./_partial'), navigator = global.navigator, MSIE = !!navigator && /MSIE .\./.test(navigator.userAgent);
            var wrap = function (set) {
                return MSIE ? function (fn, time) {
                    return set(invoke(partial, [].slice.call(arguments, 2), typeof fn == 'function' ? fn : Function(fn)), time);
                } : set;
            };
            $export($export.G + $export.B + $export.F * MSIE, {
                setTimeout: wrap(global.setTimeout),
                setInterval: wrap(global.setInterval)
            });
        },
        {
            './_export': 42,
            './_global': 48,
            './_invoke': 54,
            './_partial': 93
        }
    ],
    303: [
        function (require, module, exports) {
            require('./modules/es6.symbol');
            require('./modules/es6.object.create');
            require('./modules/es6.object.define-property');
            require('./modules/es6.object.define-properties');
            require('./modules/es6.object.get-own-property-descriptor');
            require('./modules/es6.object.get-prototype-of');
            require('./modules/es6.object.keys');
            require('./modules/es6.object.get-own-property-names');
            require('./modules/es6.object.freeze');
            require('./modules/es6.object.seal');
            require('./modules/es6.object.prevent-extensions');
            require('./modules/es6.object.is-frozen');
            require('./modules/es6.object.is-sealed');
            require('./modules/es6.object.is-extensible');
            require('./modules/es6.object.assign');
            require('./modules/es6.object.is');
            require('./modules/es6.object.set-prototype-of');
            require('./modules/es6.object.to-string');
            require('./modules/es6.function.bind');
            require('./modules/es6.function.name');
            require('./modules/es6.function.has-instance');
            require('./modules/es6.parse-int');
            require('./modules/es6.parse-float');
            require('./modules/es6.number.constructor');
            require('./modules/es6.number.to-fixed');
            require('./modules/es6.number.to-precision');
            require('./modules/es6.number.epsilon');
            require('./modules/es6.number.is-finite');
            require('./modules/es6.number.is-integer');
            require('./modules/es6.number.is-nan');
            require('./modules/es6.number.is-safe-integer');
            require('./modules/es6.number.max-safe-integer');
            require('./modules/es6.number.min-safe-integer');
            require('./modules/es6.number.parse-float');
            require('./modules/es6.number.parse-int');
            require('./modules/es6.math.acosh');
            require('./modules/es6.math.asinh');
            require('./modules/es6.math.atanh');
            require('./modules/es6.math.cbrt');
            require('./modules/es6.math.clz32');
            require('./modules/es6.math.cosh');
            require('./modules/es6.math.expm1');
            require('./modules/es6.math.fround');
            require('./modules/es6.math.hypot');
            require('./modules/es6.math.imul');
            require('./modules/es6.math.log10');
            require('./modules/es6.math.log1p');
            require('./modules/es6.math.log2');
            require('./modules/es6.math.sign');
            require('./modules/es6.math.sinh');
            require('./modules/es6.math.tanh');
            require('./modules/es6.math.trunc');
            require('./modules/es6.string.from-code-point');
            require('./modules/es6.string.raw');
            require('./modules/es6.string.trim');
            require('./modules/es6.string.iterator');
            require('./modules/es6.string.code-point-at');
            require('./modules/es6.string.ends-with');
            require('./modules/es6.string.includes');
            require('./modules/es6.string.repeat');
            require('./modules/es6.string.starts-with');
            require('./modules/es6.string.anchor');
            require('./modules/es6.string.big');
            require('./modules/es6.string.blink');
            require('./modules/es6.string.bold');
            require('./modules/es6.string.fixed');
            require('./modules/es6.string.fontcolor');
            require('./modules/es6.string.fontsize');
            require('./modules/es6.string.italics');
            require('./modules/es6.string.link');
            require('./modules/es6.string.small');
            require('./modules/es6.string.strike');
            require('./modules/es6.string.sub');
            require('./modules/es6.string.sup');
            require('./modules/es6.date.now');
            require('./modules/es6.date.to-json');
            require('./modules/es6.date.to-iso-string');
            require('./modules/es6.date.to-string');
            require('./modules/es6.date.to-primitive');
            require('./modules/es6.array.is-array');
            require('./modules/es6.array.from');
            require('./modules/es6.array.of');
            require('./modules/es6.array.join');
            require('./modules/es6.array.slice');
            require('./modules/es6.array.sort');
            require('./modules/es6.array.for-each');
            require('./modules/es6.array.map');
            require('./modules/es6.array.filter');
            require('./modules/es6.array.some');
            require('./modules/es6.array.every');
            require('./modules/es6.array.reduce');
            require('./modules/es6.array.reduce-right');
            require('./modules/es6.array.index-of');
            require('./modules/es6.array.last-index-of');
            require('./modules/es6.array.copy-within');
            require('./modules/es6.array.fill');
            require('./modules/es6.array.find');
            require('./modules/es6.array.find-index');
            require('./modules/es6.array.species');
            require('./modules/es6.array.iterator');
            require('./modules/es6.regexp.constructor');
            require('./modules/es6.regexp.to-string');
            require('./modules/es6.regexp.flags');
            require('./modules/es6.regexp.match');
            require('./modules/es6.regexp.replace');
            require('./modules/es6.regexp.search');
            require('./modules/es6.regexp.split');
            require('./modules/es6.promise');
            require('./modules/es6.map');
            require('./modules/es6.set');
            require('./modules/es6.weak-map');
            require('./modules/es6.weak-set');
            require('./modules/es6.typed.array-buffer');
            require('./modules/es6.typed.data-view');
            require('./modules/es6.typed.int8-array');
            require('./modules/es6.typed.uint8-array');
            require('./modules/es6.typed.uint8-clamped-array');
            require('./modules/es6.typed.int16-array');
            require('./modules/es6.typed.uint16-array');
            require('./modules/es6.typed.int32-array');
            require('./modules/es6.typed.uint32-array');
            require('./modules/es6.typed.float32-array');
            require('./modules/es6.typed.float64-array');
            require('./modules/es6.reflect.apply');
            require('./modules/es6.reflect.construct');
            require('./modules/es6.reflect.define-property');
            require('./modules/es6.reflect.delete-property');
            require('./modules/es6.reflect.enumerate');
            require('./modules/es6.reflect.get');
            require('./modules/es6.reflect.get-own-property-descriptor');
            require('./modules/es6.reflect.get-prototype-of');
            require('./modules/es6.reflect.has');
            require('./modules/es6.reflect.is-extensible');
            require('./modules/es6.reflect.own-keys');
            require('./modules/es6.reflect.prevent-extensions');
            require('./modules/es6.reflect.set');
            require('./modules/es6.reflect.set-prototype-of');
            require('./modules/es7.array.includes');
            require('./modules/es7.string.at');
            require('./modules/es7.string.pad-start');
            require('./modules/es7.string.pad-end');
            require('./modules/es7.string.trim-left');
            require('./modules/es7.string.trim-right');
            require('./modules/es7.string.match-all');
            require('./modules/es7.symbol.async-iterator');
            require('./modules/es7.symbol.observable');
            require('./modules/es7.object.get-own-property-descriptors');
            require('./modules/es7.object.values');
            require('./modules/es7.object.entries');
            require('./modules/es7.object.define-getter');
            require('./modules/es7.object.define-setter');
            require('./modules/es7.object.lookup-getter');
            require('./modules/es7.object.lookup-setter');
            require('./modules/es7.map.to-json');
            require('./modules/es7.set.to-json');
            require('./modules/es7.system.global');
            require('./modules/es7.error.is-error');
            require('./modules/es7.math.iaddh');
            require('./modules/es7.math.isubh');
            require('./modules/es7.math.imulh');
            require('./modules/es7.math.umulh');
            require('./modules/es7.reflect.define-metadata');
            require('./modules/es7.reflect.delete-metadata');
            require('./modules/es7.reflect.get-metadata');
            require('./modules/es7.reflect.get-metadata-keys');
            require('./modules/es7.reflect.get-own-metadata');
            require('./modules/es7.reflect.get-own-metadata-keys');
            require('./modules/es7.reflect.has-metadata');
            require('./modules/es7.reflect.has-own-metadata');
            require('./modules/es7.reflect.metadata');
            require('./modules/es7.asap');
            require('./modules/web.timers');
            require('./modules/web.immediate');
            require('./modules/web.dom.iterable');
            module.exports = require('./modules/_core');
        },
        {
            './modules/_core': 33,
            './modules/es6.array.copy-within': 129,
            './modules/es6.array.every': 130,
            './modules/es6.array.fill': 131,
            './modules/es6.array.filter': 132,
            './modules/es6.array.find': 134,
            './modules/es6.array.find-index': 133,
            './modules/es6.array.for-each': 135,
            './modules/es6.array.from': 136,
            './modules/es6.array.index-of': 137,
            './modules/es6.array.is-array': 138,
            './modules/es6.array.iterator': 139,
            './modules/es6.array.join': 140,
            './modules/es6.array.last-index-of': 141,
            './modules/es6.array.map': 142,
            './modules/es6.array.of': 143,
            './modules/es6.array.reduce': 145,
            './modules/es6.array.reduce-right': 144,
            './modules/es6.array.slice': 146,
            './modules/es6.array.some': 147,
            './modules/es6.array.sort': 148,
            './modules/es6.array.species': 149,
            './modules/es6.date.now': 150,
            './modules/es6.date.to-iso-string': 151,
            './modules/es6.date.to-json': 152,
            './modules/es6.date.to-primitive': 153,
            './modules/es6.date.to-string': 154,
            './modules/es6.function.bind': 155,
            './modules/es6.function.has-instance': 156,
            './modules/es6.function.name': 157,
            './modules/es6.map': 158,
            './modules/es6.math.acosh': 159,
            './modules/es6.math.asinh': 160,
            './modules/es6.math.atanh': 161,
            './modules/es6.math.cbrt': 162,
            './modules/es6.math.clz32': 163,
            './modules/es6.math.cosh': 164,
            './modules/es6.math.expm1': 165,
            './modules/es6.math.fround': 166,
            './modules/es6.math.hypot': 167,
            './modules/es6.math.imul': 168,
            './modules/es6.math.log10': 169,
            './modules/es6.math.log1p': 170,
            './modules/es6.math.log2': 171,
            './modules/es6.math.sign': 172,
            './modules/es6.math.sinh': 173,
            './modules/es6.math.tanh': 174,
            './modules/es6.math.trunc': 175,
            './modules/es6.number.constructor': 176,
            './modules/es6.number.epsilon': 177,
            './modules/es6.number.is-finite': 178,
            './modules/es6.number.is-integer': 179,
            './modules/es6.number.is-nan': 180,
            './modules/es6.number.is-safe-integer': 181,
            './modules/es6.number.max-safe-integer': 182,
            './modules/es6.number.min-safe-integer': 183,
            './modules/es6.number.parse-float': 184,
            './modules/es6.number.parse-int': 185,
            './modules/es6.number.to-fixed': 186,
            './modules/es6.number.to-precision': 187,
            './modules/es6.object.assign': 188,
            './modules/es6.object.create': 189,
            './modules/es6.object.define-properties': 190,
            './modules/es6.object.define-property': 191,
            './modules/es6.object.freeze': 192,
            './modules/es6.object.get-own-property-descriptor': 193,
            './modules/es6.object.get-own-property-names': 194,
            './modules/es6.object.get-prototype-of': 195,
            './modules/es6.object.is': 199,
            './modules/es6.object.is-extensible': 196,
            './modules/es6.object.is-frozen': 197,
            './modules/es6.object.is-sealed': 198,
            './modules/es6.object.keys': 200,
            './modules/es6.object.prevent-extensions': 201,
            './modules/es6.object.seal': 202,
            './modules/es6.object.set-prototype-of': 203,
            './modules/es6.object.to-string': 204,
            './modules/es6.parse-float': 205,
            './modules/es6.parse-int': 206,
            './modules/es6.promise': 207,
            './modules/es6.reflect.apply': 208,
            './modules/es6.reflect.construct': 209,
            './modules/es6.reflect.define-property': 210,
            './modules/es6.reflect.delete-property': 211,
            './modules/es6.reflect.enumerate': 212,
            './modules/es6.reflect.get': 215,
            './modules/es6.reflect.get-own-property-descriptor': 213,
            './modules/es6.reflect.get-prototype-of': 214,
            './modules/es6.reflect.has': 216,
            './modules/es6.reflect.is-extensible': 217,
            './modules/es6.reflect.own-keys': 218,
            './modules/es6.reflect.prevent-extensions': 219,
            './modules/es6.reflect.set': 221,
            './modules/es6.reflect.set-prototype-of': 220,
            './modules/es6.regexp.constructor': 222,
            './modules/es6.regexp.flags': 223,
            './modules/es6.regexp.match': 224,
            './modules/es6.regexp.replace': 225,
            './modules/es6.regexp.search': 226,
            './modules/es6.regexp.split': 227,
            './modules/es6.regexp.to-string': 228,
            './modules/es6.set': 229,
            './modules/es6.string.anchor': 230,
            './modules/es6.string.big': 231,
            './modules/es6.string.blink': 232,
            './modules/es6.string.bold': 233,
            './modules/es6.string.code-point-at': 234,
            './modules/es6.string.ends-with': 235,
            './modules/es6.string.fixed': 236,
            './modules/es6.string.fontcolor': 237,
            './modules/es6.string.fontsize': 238,
            './modules/es6.string.from-code-point': 239,
            './modules/es6.string.includes': 240,
            './modules/es6.string.italics': 241,
            './modules/es6.string.iterator': 242,
            './modules/es6.string.link': 243,
            './modules/es6.string.raw': 244,
            './modules/es6.string.repeat': 245,
            './modules/es6.string.small': 246,
            './modules/es6.string.starts-with': 247,
            './modules/es6.string.strike': 248,
            './modules/es6.string.sub': 249,
            './modules/es6.string.sup': 250,
            './modules/es6.string.trim': 251,
            './modules/es6.symbol': 252,
            './modules/es6.typed.array-buffer': 253,
            './modules/es6.typed.data-view': 254,
            './modules/es6.typed.float32-array': 255,
            './modules/es6.typed.float64-array': 256,
            './modules/es6.typed.int16-array': 257,
            './modules/es6.typed.int32-array': 258,
            './modules/es6.typed.int8-array': 259,
            './modules/es6.typed.uint16-array': 260,
            './modules/es6.typed.uint32-array': 261,
            './modules/es6.typed.uint8-array': 262,
            './modules/es6.typed.uint8-clamped-array': 263,
            './modules/es6.weak-map': 264,
            './modules/es6.weak-set': 265,
            './modules/es7.array.includes': 266,
            './modules/es7.asap': 267,
            './modules/es7.error.is-error': 268,
            './modules/es7.map.to-json': 269,
            './modules/es7.math.iaddh': 270,
            './modules/es7.math.imulh': 271,
            './modules/es7.math.isubh': 272,
            './modules/es7.math.umulh': 273,
            './modules/es7.object.define-getter': 274,
            './modules/es7.object.define-setter': 275,
            './modules/es7.object.entries': 276,
            './modules/es7.object.get-own-property-descriptors': 277,
            './modules/es7.object.lookup-getter': 278,
            './modules/es7.object.lookup-setter': 279,
            './modules/es7.object.values': 280,
            './modules/es7.reflect.define-metadata': 281,
            './modules/es7.reflect.delete-metadata': 282,
            './modules/es7.reflect.get-metadata': 284,
            './modules/es7.reflect.get-metadata-keys': 283,
            './modules/es7.reflect.get-own-metadata': 286,
            './modules/es7.reflect.get-own-metadata-keys': 285,
            './modules/es7.reflect.has-metadata': 287,
            './modules/es7.reflect.has-own-metadata': 288,
            './modules/es7.reflect.metadata': 289,
            './modules/es7.set.to-json': 290,
            './modules/es7.string.at': 291,
            './modules/es7.string.match-all': 292,
            './modules/es7.string.pad-end': 293,
            './modules/es7.string.pad-start': 294,
            './modules/es7.string.trim-left': 295,
            './modules/es7.string.trim-right': 296,
            './modules/es7.symbol.async-iterator': 297,
            './modules/es7.symbol.observable': 298,
            './modules/es7.system.global': 299,
            './modules/web.dom.iterable': 300,
            './modules/web.immediate': 301,
            './modules/web.timers': 302
        }
    ],
    304: [
        function (require, module, exports) {
            var pSlice = Array.prototype.slice;
            var objectKeys = require('./lib/keys.js');
            var isArguments = require('./lib/is_arguments.js');
            var deepEqual = module.exports = function (actual, expected, opts) {
                if (!opts)
                    opts = {};
                if (actual === expected) {
                    return true;
                } else if (actual instanceof Date && expected instanceof Date) {
                    return actual.getTime() === expected.getTime();
                } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {
                    return opts.strict ? actual === expected : actual == expected;
                } else {
                    return objEquiv(actual, expected, opts);
                }
            };
            function isUndefinedOrNull(value) {
                return value === null || value === undefined;
            }
            function isBuffer(x) {
                if (!x || typeof x !== 'object' || typeof x.length !== 'number')
                    return false;
                if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
                    return false;
                }
                if (x.length > 0 && typeof x[0] !== 'number')
                    return false;
                return true;
            }
            function objEquiv(a, b, opts) {
                var i, key;
                if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
                    return false;
                if (a.prototype !== b.prototype)
                    return false;
                if (isArguments(a)) {
                    if (!isArguments(b)) {
                        return false;
                    }
                    a = pSlice.call(a);
                    b = pSlice.call(b);
                    return deepEqual(a, b, opts);
                }
                if (isBuffer(a)) {
                    if (!isBuffer(b)) {
                        return false;
                    }
                    if (a.length !== b.length)
                        return false;
                    for (i = 0; i < a.length; i++) {
                        if (a[i] !== b[i])
                            return false;
                    }
                    return true;
                }
                try {
                    var ka = objectKeys(a), kb = objectKeys(b);
                } catch (e) {
                    return false;
                }
                if (ka.length != kb.length)
                    return false;
                ka.sort();
                kb.sort();
                for (i = ka.length - 1; i >= 0; i--) {
                    if (ka[i] != kb[i])
                        return false;
                }
                for (i = ka.length - 1; i >= 0; i--) {
                    key = ka[i];
                    if (!deepEqual(a[key], b[key], opts))
                        return false;
                }
                return typeof a === typeof b;
            }
        },
        {
            './lib/is_arguments.js': 305,
            './lib/keys.js': 306
        }
    ],
    305: [
        function (require, module, exports) {
            var supportsArgumentsClass = function () {
                return Object.prototype.toString.call(arguments);
            }() == '[object Arguments]';
            exports = module.exports = supportsArgumentsClass ? supported : unsupported;
            exports.supported = supported;
            function supported(object) {
                return Object.prototype.toString.call(object) == '[object Arguments]';
            }
            ;
            exports.unsupported = unsupported;
            function unsupported(object) {
                return object && typeof object == 'object' && typeof object.length == 'number' && Object.prototype.hasOwnProperty.call(object, 'callee') && !Object.prototype.propertyIsEnumerable.call(object, 'callee') || false;
            }
            ;
        },
        {}
    ],
    306: [
        function (require, module, exports) {
            exports = module.exports = typeof Object.keys === 'function' ? Object.keys : shim;
            exports.shim = shim;
            function shim(obj) {
                var keys = [];
                for (var key in obj)
                    keys.push(key);
                return keys;
            }
        },
        {}
    ],
    307: [
        function (require, module, exports) {
            'use strict';
            var keys = require('object-keys');
            var foreach = require('foreach');
            var hasSymbols = typeof Symbol === 'function' && typeof Symbol() === 'symbol';
            var toStr = Object.prototype.toString;
            var isFunction = function (fn) {
                return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
            };
            var arePropertyDescriptorsSupported = function () {
                var obj = {};
                try {
                    Object.defineProperty(obj, 'x', {
                        enumerable: false,
                        value: obj
                    });
                    for (var _ in obj) {
                        return false;
                    }
                    return obj.x === obj;
                } catch (e) {
                    return false;
                }
            };
            var supportsDescriptors = Object.defineProperty && arePropertyDescriptorsSupported();
            var defineProperty = function (object, name, value, predicate) {
                if (name in object && (!isFunction(predicate) || !predicate())) {
                    return;
                }
                if (supportsDescriptors) {
                    Object.defineProperty(object, name, {
                        configurable: true,
                        enumerable: false,
                        value: value,
                        writable: true
                    });
                } else {
                    object[name] = value;
                }
            };
            var defineProperties = function (object, map) {
                var predicates = arguments.length > 2 ? arguments[2] : {};
                var props = keys(map);
                if (hasSymbols) {
                    props = props.concat(Object.getOwnPropertySymbols(map));
                }
                foreach(props, function (name) {
                    defineProperty(object, name, map[name], predicates[name]);
                });
            };
            defineProperties.supportsDescriptors = !!supportsDescriptors;
            module.exports = defineProperties;
        },
        {
            'foreach': 323,
            'object-keys': 334
        }
    ],
    308: [
        function (require, module, exports) {
            var eaw = {};
            if ('undefined' == typeof module) {
                window.eastasianwidth = eaw;
            } else {
                module.exports = eaw;
            }
            eaw.eastAsianWidth = function (character) {
                var x = character.charCodeAt(0);
                var y = character.length == 2 ? character.charCodeAt(1) : 0;
                var codePoint = x;
                if (55296 <= x && x <= 56319 && (56320 <= y && y <= 57343)) {
                    x &= 1023;
                    y &= 1023;
                    codePoint = x << 10 | y;
                    codePoint += 65536;
                }
                if (12288 == codePoint || 65281 <= codePoint && codePoint <= 65376 || 65504 <= codePoint && codePoint <= 65510) {
                    return 'F';
                }
                if (8361 == codePoint || 65377 <= codePoint && codePoint <= 65470 || 65474 <= codePoint && codePoint <= 65479 || 65482 <= codePoint && codePoint <= 65487 || 65490 <= codePoint && codePoint <= 65495 || 65498 <= codePoint && codePoint <= 65500 || 65512 <= codePoint && codePoint <= 65518) {
                    return 'H';
                }
                if (4352 <= codePoint && codePoint <= 4447 || 4515 <= codePoint && codePoint <= 4519 || 4602 <= codePoint && codePoint <= 4607 || 9001 <= codePoint && codePoint <= 9002 || 11904 <= codePoint && codePoint <= 11929 || 11931 <= codePoint && codePoint <= 12019 || 12032 <= codePoint && codePoint <= 12245 || 12272 <= codePoint && codePoint <= 12283 || 12289 <= codePoint && codePoint <= 12350 || 12353 <= codePoint && codePoint <= 12438 || 12441 <= codePoint && codePoint <= 12543 || 12549 <= codePoint && codePoint <= 12589 || 12593 <= codePoint && codePoint <= 12686 || 12688 <= codePoint && codePoint <= 12730 || 12736 <= codePoint && codePoint <= 12771 || 12784 <= codePoint && codePoint <= 12830 || 12832 <= codePoint && codePoint <= 12871 || 12880 <= codePoint && codePoint <= 13054 || 13056 <= codePoint && codePoint <= 19903 || 19968 <= codePoint && codePoint <= 42124 || 42128 <= codePoint && codePoint <= 42182 || 43360 <= codePoint && codePoint <= 43388 || 44032 <= codePoint && codePoint <= 55203 || 55216 <= codePoint && codePoint <= 55238 || 55243 <= codePoint && codePoint <= 55291 || 63744 <= codePoint && codePoint <= 64255 || 65040 <= codePoint && codePoint <= 65049 || 65072 <= codePoint && codePoint <= 65106 || 65108 <= codePoint && codePoint <= 65126 || 65128 <= codePoint && codePoint <= 65131 || 110592 <= codePoint && codePoint <= 110593 || 127488 <= codePoint && codePoint <= 127490 || 127504 <= codePoint && codePoint <= 127546 || 127552 <= codePoint && codePoint <= 127560 || 127568 <= codePoint && codePoint <= 127569 || 131072 <= codePoint && codePoint <= 194367 || 177984 <= codePoint && codePoint <= 196605 || 196608 <= codePoint && codePoint <= 262141) {
                    return 'W';
                }
                if (32 <= codePoint && codePoint <= 126 || 162 <= codePoint && codePoint <= 163 || 165 <= codePoint && codePoint <= 166 || 172 == codePoint || 175 == codePoint || 10214 <= codePoint && codePoint <= 10221 || 10629 <= codePoint && codePoint <= 10630) {
                    return 'Na';
                }
                if (161 == codePoint || 164 == codePoint || 167 <= codePoint && codePoint <= 168 || 170 == codePoint || 173 <= codePoint && codePoint <= 174 || 176 <= codePoint && codePoint <= 180 || 182 <= codePoint && codePoint <= 186 || 188 <= codePoint && codePoint <= 191 || 198 == codePoint || 208 == codePoint || 215 <= codePoint && codePoint <= 216 || 222 <= codePoint && codePoint <= 225 || 230 == codePoint || 232 <= codePoint && codePoint <= 234 || 236 <= codePoint && codePoint <= 237 || 240 == codePoint || 242 <= codePoint && codePoint <= 243 || 247 <= codePoint && codePoint <= 250 || 252 == codePoint || 254 == codePoint || 257 == codePoint || 273 == codePoint || 275 == codePoint || 283 == codePoint || 294 <= codePoint && codePoint <= 295 || 299 == codePoint || 305 <= codePoint && codePoint <= 307 || 312 == codePoint || 319 <= codePoint && codePoint <= 322 || 324 == codePoint || 328 <= codePoint && codePoint <= 331 || 333 == codePoint || 338 <= codePoint && codePoint <= 339 || 358 <= codePoint && codePoint <= 359 || 363 == codePoint || 462 == codePoint || 464 == codePoint || 466 == codePoint || 468 == codePoint || 470 == codePoint || 472 == codePoint || 474 == codePoint || 476 == codePoint || 593 == codePoint || 609 == codePoint || 708 == codePoint || 711 == codePoint || 713 <= codePoint && codePoint <= 715 || 717 == codePoint || 720 == codePoint || 728 <= codePoint && codePoint <= 731 || 733 == codePoint || 735 == codePoint || 768 <= codePoint && codePoint <= 879 || 913 <= codePoint && codePoint <= 929 || 931 <= codePoint && codePoint <= 937 || 945 <= codePoint && codePoint <= 961 || 963 <= codePoint && codePoint <= 969 || 1025 == codePoint || 1040 <= codePoint && codePoint <= 1103 || 1105 == codePoint || 8208 == codePoint || 8211 <= codePoint && codePoint <= 8214 || 8216 <= codePoint && codePoint <= 8217 || 8220 <= codePoint && codePoint <= 8221 || 8224 <= codePoint && codePoint <= 8226 || 8228 <= codePoint && codePoint <= 8231 || 8240 == codePoint || 8242 <= codePoint && codePoint <= 8243 || 8245 == codePoint || 8251 == codePoint || 8254 == codePoint || 8308 == codePoint || 8319 == codePoint || 8321 <= codePoint && codePoint <= 8324 || 8364 == codePoint || 8451 == codePoint || 8453 == codePoint || 8457 == codePoint || 8467 == codePoint || 8470 == codePoint || 8481 <= codePoint && codePoint <= 8482 || 8486 == codePoint || 8491 == codePoint || 8531 <= codePoint && codePoint <= 8532 || 8539 <= codePoint && codePoint <= 8542 || 8544 <= codePoint && codePoint <= 8555 || 8560 <= codePoint && codePoint <= 8569 || 8585 == codePoint || 8592 <= codePoint && codePoint <= 8601 || 8632 <= codePoint && codePoint <= 8633 || 8658 == codePoint || 8660 == codePoint || 8679 == codePoint || 8704 == codePoint || 8706 <= codePoint && codePoint <= 8707 || 8711 <= codePoint && codePoint <= 8712 || 8715 == codePoint || 8719 == codePoint || 8721 == codePoint || 8725 == codePoint || 8730 == codePoint || 8733 <= codePoint && codePoint <= 8736 || 8739 == codePoint || 8741 == codePoint || 8743 <= codePoint && codePoint <= 8748 || 8750 == codePoint || 8756 <= codePoint && codePoint <= 8759 || 8764 <= codePoint && codePoint <= 8765 || 8776 == codePoint || 8780 == codePoint || 8786 == codePoint || 8800 <= codePoint && codePoint <= 8801 || 8804 <= codePoint && codePoint <= 8807 || 8810 <= codePoint && codePoint <= 8811 || 8814 <= codePoint && codePoint <= 8815 || 8834 <= codePoint && codePoint <= 8835 || 8838 <= codePoint && codePoint <= 8839 || 8853 == codePoint || 8857 == codePoint || 8869 == codePoint || 8895 == codePoint || 8978 == codePoint || 9312 <= codePoint && codePoint <= 9449 || 9451 <= codePoint && codePoint <= 9547 || 9552 <= codePoint && codePoint <= 9587 || 9600 <= codePoint && codePoint <= 9615 || 9618 <= codePoint && codePoint <= 9621 || 9632 <= codePoint && codePoint <= 9633 || 9635 <= codePoint && codePoint <= 9641 || 9650 <= codePoint && codePoint <= 9651 || 9654 <= codePoint && codePoint <= 9655 || 9660 <= codePoint && codePoint <= 9661 || 9664 <= codePoint && codePoint <= 9665 || 9670 <= codePoint && codePoint <= 9672 || 9675 == codePoint || 9678 <= codePoint && codePoint <= 9681 || 9698 <= codePoint && codePoint <= 9701 || 9711 == codePoint || 9733 <= codePoint && codePoint <= 9734 || 9737 == codePoint || 9742 <= codePoint && codePoint <= 9743 || 9748 <= codePoint && codePoint <= 9749 || 9756 == codePoint || 9758 == codePoint || 9792 == codePoint || 9794 == codePoint || 9824 <= codePoint && codePoint <= 9825 || 9827 <= codePoint && codePoint <= 9829 || 9831 <= codePoint && codePoint <= 9834 || 9836 <= codePoint && codePoint <= 9837 || 9839 == codePoint || 9886 <= codePoint && codePoint <= 9887 || 9918 <= codePoint && codePoint <= 9919 || 9924 <= codePoint && codePoint <= 9933 || 9935 <= codePoint && codePoint <= 9953 || 9955 == codePoint || 9960 <= codePoint && codePoint <= 9983 || 10045 == codePoint || 10071 == codePoint || 10102 <= codePoint && codePoint <= 10111 || 11093 <= codePoint && codePoint <= 11097 || 12872 <= codePoint && codePoint <= 12879 || 57344 <= codePoint && codePoint <= 63743 || 65024 <= codePoint && codePoint <= 65039 || 65533 == codePoint || 127232 <= codePoint && codePoint <= 127242 || 127248 <= codePoint && codePoint <= 127277 || 127280 <= codePoint && codePoint <= 127337 || 127344 <= codePoint && codePoint <= 127386 || 917760 <= codePoint && codePoint <= 917999 || 983040 <= codePoint && codePoint <= 1048573 || 1048576 <= codePoint && codePoint <= 1114109) {
                    return 'A';
                }
                return 'N';
            };
            eaw.characterLength = function (character) {
                var code = this.eastAsianWidth(character);
                if (code == 'F' || code == 'W' || code == 'A') {
                    return 2;
                } else {
                    return 1;
                }
            };
            eaw.length = function (string) {
                var len = 0;
                for (var i = 0; i < string.length; i++) {
                    len = len + this.characterLength(string.charAt(i));
                }
                return len;
            };
            eaw.slice = function (text, start, end) {
                start = start ? start : 0;
                end = end ? end : 1;
                var result = '';
                for (var i = 0; i < text.length; i++) {
                    var char = text.charAt(i);
                    var eawLen = eaw.length(result + char);
                    if (eawLen >= 1 + start && eawLen < 1 + end) {
                        result += char;
                    }
                }
                return result;
            };
        },
        {}
    ],
    309: [
        function (require, module, exports) {
            var defaultOptions = require('./lib/default-options');
            var Decorator = require('./lib/decorator');
            var capturable = require('./lib/capturable');
            var create = require('object-create');
            var slice = Array.prototype.slice;
            var extend = require('xtend/mutable');
            var define = require('define-properties');
            function empower(assert, formatter, options) {
                var typeOfAssert = typeof assert;
                var enhancedAssert;
                if (typeOfAssert !== 'object' && typeOfAssert !== 'function' || assert === null) {
                    throw new TypeError('empower argument should be a function or object.');
                }
                if (isEmpowered(assert)) {
                    return assert;
                }
                switch (typeOfAssert) {
                case 'function':
                    enhancedAssert = empowerAssertFunction(assert, formatter, options);
                    break;
                case 'object':
                    enhancedAssert = empowerAssertObject(assert, formatter, options);
                    break;
                default:
                    throw new Error('Cannot be here');
                }
                define(enhancedAssert, capturable());
                return enhancedAssert;
            }
            function empowerAssertObject(assertObject, formatter, options) {
                var config = extend(defaultOptions(), options);
                var target = config.destructive ? assertObject : create(assertObject);
                var decorator = new Decorator(target, formatter, config);
                return extend(target, decorator.enhancement());
            }
            function empowerAssertFunction(assertFunction, formatter, options) {
                var config = extend(defaultOptions(), options);
                if (config.destructive) {
                    throw new Error('cannot use destructive:true to function.');
                }
                var decorator = new Decorator(assertFunction, formatter, config);
                var enhancement = decorator.enhancement();
                var powerAssert;
                if (typeof enhancement === 'function') {
                    powerAssert = function powerAssert() {
                        return enhancement.apply(null, slice.apply(arguments));
                    };
                } else {
                    powerAssert = function powerAssert() {
                        return assertFunction.apply(null, slice.apply(arguments));
                    };
                }
                extend(powerAssert, assertFunction);
                return extend(powerAssert, enhancement);
            }
            function isEmpowered(assertObjectOrFunction) {
                return typeof assertObjectOrFunction._capt === 'function' && typeof assertObjectOrFunction._expr === 'function';
            }
            empower.defaultOptions = defaultOptions;
            module.exports = empower;
        },
        {
            './lib/capturable': 310,
            './lib/decorator': 312,
            './lib/default-options': 313,
            'define-properties': 307,
            'object-create': 332,
            'xtend/mutable': 358
        }
    ],
    310: [
        function (require, module, exports) {
            'use strict';
            module.exports = function capturable() {
                var events = [];
                function _capt(value, espath) {
                    events.push({
                        value: value,
                        espath: espath
                    });
                    return value;
                }
                function _expr(value, args) {
                    var captured = events;
                    events = [];
                    var source = {
                        content: args.content,
                        filepath: args.filepath,
                        line: args.line
                    };
                    if (args.generator) {
                        source.generator = true;
                    }
                    if (args.async) {
                        source.async = true;
                    }
                    return {
                        powerAssertContext: {
                            value: value,
                            events: captured
                        },
                        source: source
                    };
                }
                return {
                    _capt: _capt,
                    _expr: _expr
                };
            };
        },
        {}
    ],
    311: [
        function (require, module, exports) {
            'use strict';
            var slice = Array.prototype.slice;
            var map = require('array-map');
            var some = require('array-some');
            function decorate(callSpec, decorator) {
                var func = callSpec.func;
                var thisObj = callSpec.thisObj;
                var numArgsToCapture = callSpec.numArgsToCapture;
                return function decoratedAssert() {
                    var context, message, args = slice.apply(arguments);
                    if (some(args, isCaptured)) {
                        var values = map(args.slice(0, numArgsToCapture), function (arg) {
                            if (isNotCaptured(arg)) {
                                return arg;
                            }
                            if (!context) {
                                context = {
                                    source: arg.source,
                                    args: []
                                };
                            }
                            context.args.push({
                                value: arg.powerAssertContext.value,
                                events: arg.powerAssertContext.events
                            });
                            return arg.powerAssertContext.value;
                        });
                        if (numArgsToCapture === args.length - 1) {
                            message = args[args.length - 1];
                        }
                        var invocation = {
                            thisObj: thisObj,
                            func: func,
                            values: values,
                            message: message
                        };
                        return decorator.concreteAssert(invocation, context);
                    } else {
                        return func.apply(thisObj, args);
                    }
                };
            }
            function isNotCaptured(value) {
                return !isCaptured(value);
            }
            function isCaptured(value) {
                return typeof value === 'object' && value !== null && typeof value.powerAssertContext !== 'undefined';
            }
            module.exports = decorate;
        },
        {
            'array-map': 8,
            'array-some': 11
        }
    ],
    312: [
        function (require, module, exports) {
            'use strict';
            var escallmatch = require('escallmatch');
            var extend = require('xtend/mutable');
            var forEach = require('array-foreach');
            var map = require('array-map');
            var filter = require('array-filter');
            var decorate = require('./decorate');
            function Decorator(receiver, formatter, config) {
                this.receiver = receiver;
                this.formatter = formatter;
                this.config = config;
                this.matchers = map(config.patterns, escallmatch);
                this.eagerEvaluation = !(config.modifyMessageOnRethrow || config.saveContextOnRethrow);
            }
            Decorator.prototype.enhancement = function () {
                var that = this;
                var container = this.container();
                forEach(filter(this.matchers, methodCall), function (matcher) {
                    var methodName = detectMethodName(matcher.calleeAst());
                    if (typeof that.receiver[methodName] === 'function') {
                        var callSpec = {
                            thisObj: that.receiver,
                            func: that.receiver[methodName],
                            numArgsToCapture: numberOfArgumentsToCapture(matcher)
                        };
                        container[methodName] = decorate(callSpec, that);
                    }
                });
                return container;
            };
            Decorator.prototype.container = function () {
                var basement = {};
                if (typeof this.receiver === 'function') {
                    var candidates = filter(this.matchers, functionCall);
                    if (candidates.length === 1) {
                        var callSpec = {
                            thisObj: null,
                            func: this.receiver,
                            numArgsToCapture: numberOfArgumentsToCapture(candidates[0])
                        };
                        basement = decorate(callSpec, this);
                    }
                }
                return basement;
            };
            Decorator.prototype.concreteAssert = function (invocation, context) {
                var func = invocation.func;
                var thisObj = invocation.thisObj;
                var args = invocation.values;
                var message = invocation.message;
                if (this.eagerEvaluation) {
                    var poweredMessage = this.buildPowerAssertText(message, context);
                    return func.apply(thisObj, args.concat(poweredMessage));
                }
                try {
                    return func.apply(thisObj, args.concat(message));
                } catch (e) {
                    throw this.errorToRethrow(e, message, context);
                }
            };
            Decorator.prototype.errorToRethrow = function (e, originalMessage, context) {
                if (e.name !== 'AssertionError') {
                    return e;
                }
                if (typeof this.receiver.AssertionError !== 'function') {
                    return e;
                }
                var f = new this.receiver.AssertionError({
                    actual: e.actual,
                    expected: e.expected,
                    operator: e.operator,
                    message: this.config.modifyMessageOnRethrow ? this.buildPowerAssertText(originalMessage, context) : e.message,
                    stackStartFunction: Decorator.prototype.concreteAssert
                });
                if (this.config.saveContextOnRethrow) {
                    f.powerAssertContext = context;
                }
                return f;
            };
            Decorator.prototype.buildPowerAssertText = function (message, context) {
                var powerAssertText = this.formatter(context);
                return message ? message + ' ' + powerAssertText : powerAssertText;
            };
            function numberOfArgumentsToCapture(matcher) {
                var argSpecs = matcher.argumentSignatures();
                var len = argSpecs.length;
                var lastArg;
                if (0 < len) {
                    lastArg = argSpecs[len - 1];
                    if (lastArg.name === 'message' && lastArg.kind === 'optional') {
                        len -= 1;
                    }
                }
                return len;
            }
            function detectMethodName(node) {
                if (node.type === 'MemberExpression') {
                    return node.property.name;
                }
                return null;
            }
            function functionCall(matcher) {
                return matcher.calleeAst().type === 'Identifier';
            }
            function methodCall(matcher) {
                return matcher.calleeAst().type === 'MemberExpression';
            }
            module.exports = Decorator;
        },
        {
            './decorate': 311,
            'array-filter': 6,
            'array-foreach': 7,
            'array-map': 8,
            'escallmatch': 314,
            'xtend/mutable': 358
        }
    ],
    313: [
        function (require, module, exports) {
            'use strict';
            module.exports = function defaultOptions() {
                return {
                    destructive: false,
                    modifyMessageOnRethrow: false,
                    saveContextOnRethrow: false,
                    patterns: [
                        'assert(value, [message])',
                        'assert.ok(value, [message])',
                        'assert.equal(actual, expected, [message])',
                        'assert.notEqual(actual, expected, [message])',
                        'assert.strictEqual(actual, expected, [message])',
                        'assert.notStrictEqual(actual, expected, [message])',
                        'assert.deepEqual(actual, expected, [message])',
                        'assert.notDeepEqual(actual, expected, [message])',
                        'assert.deepStrictEqual(actual, expected, [message])',
                        'assert.notDeepStrictEqual(actual, expected, [message])'
                    ]
                };
            };
        },
        {}
    ],
    314: [
        function (require, module, exports) {
            'use strict';
            var esprima = require('esprima');
            var estraverse = require('estraverse');
            var espurify = require('espurify');
            var syntax = estraverse.Syntax;
            var hasOwn = Object.prototype.hasOwnProperty;
            var forEach = require('array-foreach');
            var map = require('array-map');
            var filter = require('array-filter');
            var reduce = require('array-reduce');
            var indexOf = require('indexof');
            var deepEqual = require('deep-equal');
            var notCallExprMessage = 'Argument should be in the form of CallExpression';
            var duplicatedArgMessage = 'Duplicate argument name: ';
            var invalidFormMessage = 'Argument should be in the form of `name` or `[name]`';
            function createMatcher(signatureStr, options) {
                var ast = extractExpressionFrom(esprima.parse(signatureStr));
                return new Matcher(ast, options || {});
            }
            function Matcher(signatureAst, options) {
                this.visitorKeys = options.visitorKeys || estraverse.VisitorKeys;
                this.signatureAst = signatureAst;
                this.signatureCalleeDepth = astDepth(signatureAst.callee, this.visitorKeys);
                this.numMaxArgs = this.signatureAst.arguments.length;
                this.numMinArgs = filter(this.signatureAst.arguments, identifiers).length;
            }
            Matcher.prototype.test = function (currentNode) {
                var calleeMatched = this.isCalleeMatched(currentNode);
                var numArgs;
                if (calleeMatched) {
                    numArgs = currentNode.arguments.length;
                    return this.numMinArgs <= numArgs && numArgs <= this.numMaxArgs;
                }
                return false;
            };
            Matcher.prototype.matchArgument = function (currentNode, parentNode) {
                if (isCalleeOfParent(currentNode, parentNode)) {
                    return null;
                }
                if (this.test(parentNode)) {
                    var indexOfCurrentArg = indexOf(parentNode.arguments, currentNode);
                    var numOptional = parentNode.arguments.length - this.numMinArgs;
                    var matchedSignatures = reduce(this.argumentSignatures(), function (accum, argSig) {
                        if (argSig.kind === 'mandatory') {
                            accum.push(argSig);
                        }
                        if (argSig.kind === 'optional' && 0 < numOptional) {
                            numOptional -= 1;
                            accum.push(argSig);
                        }
                        return accum;
                    }, []);
                    return matchedSignatures[indexOfCurrentArg];
                }
                return null;
            };
            Matcher.prototype.calleeAst = function () {
                return espurify(this.signatureAst.callee);
            };
            Matcher.prototype.argumentSignatures = function () {
                return map(this.signatureAst.arguments, toArgumentSignature);
            };
            Matcher.prototype.isCalleeMatched = function (node) {
                if (!isCallExpression(node)) {
                    return false;
                }
                if (!this.isSameDepthAsSignatureCallee(node.callee)) {
                    return false;
                }
                return deepEqual(espurify(this.signatureAst.callee), espurify(node.callee));
            };
            Matcher.prototype.isSameDepthAsSignatureCallee = function (ast) {
                var depth = this.signatureCalleeDepth;
                var currentDepth = 0;
                estraverse.traverse(ast, {
                    keys: this.visitorKeys,
                    enter: function (currentNode, parentNode) {
                        var path = this.path();
                        var pathDepth = path ? path.length : 0;
                        if (currentDepth < pathDepth) {
                            currentDepth = pathDepth;
                        }
                        if (depth < currentDepth) {
                            this['break']();
                        }
                    }
                });
                return depth === currentDepth;
            };
            function toArgumentSignature(argSignatureNode) {
                switch (argSignatureNode.type) {
                case syntax.Identifier:
                    return {
                        name: argSignatureNode.name,
                        kind: 'mandatory'
                    };
                case syntax.ArrayExpression:
                    return {
                        name: argSignatureNode.elements[0].name,
                        kind: 'optional'
                    };
                default:
                    return null;
                }
            }
            function astDepth(ast, visitorKeys) {
                var maxDepth = 0;
                estraverse.traverse(ast, {
                    keys: visitorKeys,
                    enter: function (currentNode, parentNode) {
                        var path = this.path();
                        var pathDepth = path ? path.length : 0;
                        if (maxDepth < pathDepth) {
                            maxDepth = pathDepth;
                        }
                    }
                });
                return maxDepth;
            }
            function isCallExpression(node) {
                return node && node.type === syntax.CallExpression;
            }
            function isCalleeOfParent(currentNode, parentNode) {
                return parentNode && currentNode && parentNode.type === syntax.CallExpression && parentNode.callee === currentNode;
            }
            function identifiers(node) {
                return node.type === syntax.Identifier;
            }
            function validateApiExpression(callExpression) {
                if (callExpression.type !== syntax.CallExpression) {
                    throw new Error(notCallExprMessage);
                }
                var names = {};
                forEach(callExpression.arguments, function (arg) {
                    var name = validateArg(arg);
                    if (hasOwn.call(names, name)) {
                        throw new Error(duplicatedArgMessage + name);
                    } else {
                        names[name] = name;
                    }
                });
            }
            function validateArg(arg) {
                var inner;
                switch (arg.type) {
                case syntax.Identifier:
                    return arg.name;
                case syntax.ArrayExpression:
                    if (arg.elements.length !== 1) {
                        throw new Error(invalidFormMessage);
                    }
                    inner = arg.elements[0];
                    if (inner.type !== syntax.Identifier) {
                        throw new Error(invalidFormMessage);
                    }
                    return inner.name;
                default:
                    throw new Error(invalidFormMessage);
                }
            }
            function extractExpressionFrom(tree) {
                var statement, expression;
                statement = tree.body[0];
                if (statement.type !== syntax.ExpressionStatement) {
                    throw new Error(notCallExprMessage);
                }
                expression = statement.expression;
                validateApiExpression(expression);
                return expression;
            }
            module.exports = createMatcher;
        },
        {
            'array-filter': 6,
            'array-foreach': 7,
            'array-map': 8,
            'array-reduce': 10,
            'deep-equal': 304,
            'esprima': 315,
            'espurify': 316,
            'estraverse': 320,
            'indexof': 328
        }
    ],
    315: [
        function (require, module, exports) {
            (function (root, factory) {
                'use strict';
                if (typeof define === 'function' && define.amd) {
                    define(['exports'], factory);
                } else if (typeof exports !== 'undefined') {
                    factory(exports);
                } else {
                    factory(root.esprima = {});
                }
            }(this, function (exports) {
                'use strict';
                var Token, TokenName, FnExprTokens, Syntax, PlaceHolders, Messages, Regex, source, strict, index, lineNumber, lineStart, hasLineTerminator, lastIndex, lastLineNumber, lastLineStart, startIndex, startLineNumber, startLineStart, scanning, length, lookahead, state, extra, isBindingElement, isAssignmentTarget, firstCoverInitializedNameError;
                Token = {
                    BooleanLiteral: 1,
                    EOF: 2,
                    Identifier: 3,
                    Keyword: 4,
                    NullLiteral: 5,
                    NumericLiteral: 6,
                    Punctuator: 7,
                    StringLiteral: 8,
                    RegularExpression: 9,
                    Template: 10
                };
                TokenName = {};
                TokenName[Token.BooleanLiteral] = 'Boolean';
                TokenName[Token.EOF] = '<end>';
                TokenName[Token.Identifier] = 'Identifier';
                TokenName[Token.Keyword] = 'Keyword';
                TokenName[Token.NullLiteral] = 'Null';
                TokenName[Token.NumericLiteral] = 'Numeric';
                TokenName[Token.Punctuator] = 'Punctuator';
                TokenName[Token.StringLiteral] = 'String';
                TokenName[Token.RegularExpression] = 'RegularExpression';
                TokenName[Token.Template] = 'Template';
                FnExprTokens = [
                    '(',
                    '{',
                    '[',
                    'in',
                    'typeof',
                    'instanceof',
                    'new',
                    'return',
                    'case',
                    'delete',
                    'throw',
                    'void',
                    '=',
                    '+=',
                    '-=',
                    '*=',
                    '/=',
                    '%=',
                    '<<=',
                    '>>=',
                    '>>>=',
                    '&=',
                    '|=',
                    '^=',
                    ',',
                    '+',
                    '-',
                    '*',
                    '/',
                    '%',
                    '++',
                    '--',
                    '<<',
                    '>>',
                    '>>>',
                    '&',
                    '|',
                    '^',
                    '!',
                    '~',
                    '&&',
                    '||',
                    '?',
                    ':',
                    '===',
                    '==',
                    '>=',
                    '<=',
                    '<',
                    '>',
                    '!=',
                    '!=='
                ];
                Syntax = {
                    AssignmentExpression: 'AssignmentExpression',
                    AssignmentPattern: 'AssignmentPattern',
                    ArrayExpression: 'ArrayExpression',
                    ArrayPattern: 'ArrayPattern',
                    ArrowFunctionExpression: 'ArrowFunctionExpression',
                    BlockStatement: 'BlockStatement',
                    BinaryExpression: 'BinaryExpression',
                    BreakStatement: 'BreakStatement',
                    CallExpression: 'CallExpression',
                    CatchClause: 'CatchClause',
                    ClassBody: 'ClassBody',
                    ClassDeclaration: 'ClassDeclaration',
                    ClassExpression: 'ClassExpression',
                    ConditionalExpression: 'ConditionalExpression',
                    ContinueStatement: 'ContinueStatement',
                    DoWhileStatement: 'DoWhileStatement',
                    DebuggerStatement: 'DebuggerStatement',
                    EmptyStatement: 'EmptyStatement',
                    ExportAllDeclaration: 'ExportAllDeclaration',
                    ExportDefaultDeclaration: 'ExportDefaultDeclaration',
                    ExportNamedDeclaration: 'ExportNamedDeclaration',
                    ExportSpecifier: 'ExportSpecifier',
                    ExpressionStatement: 'ExpressionStatement',
                    ForStatement: 'ForStatement',
                    ForOfStatement: 'ForOfStatement',
                    ForInStatement: 'ForInStatement',
                    FunctionDeclaration: 'FunctionDeclaration',
                    FunctionExpression: 'FunctionExpression',
                    Identifier: 'Identifier',
                    IfStatement: 'IfStatement',
                    ImportDeclaration: 'ImportDeclaration',
                    ImportDefaultSpecifier: 'ImportDefaultSpecifier',
                    ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',
                    ImportSpecifier: 'ImportSpecifier',
                    Literal: 'Literal',
                    LabeledStatement: 'LabeledStatement',
                    LogicalExpression: 'LogicalExpression',
                    MemberExpression: 'MemberExpression',
                    MetaProperty: 'MetaProperty',
                    MethodDefinition: 'MethodDefinition',
                    NewExpression: 'NewExpression',
                    ObjectExpression: 'ObjectExpression',
                    ObjectPattern: 'ObjectPattern',
                    Program: 'Program',
                    Property: 'Property',
                    RestElement: 'RestElement',
                    ReturnStatement: 'ReturnStatement',
                    SequenceExpression: 'SequenceExpression',
                    SpreadElement: 'SpreadElement',
                    Super: 'Super',
                    SwitchCase: 'SwitchCase',
                    SwitchStatement: 'SwitchStatement',
                    TaggedTemplateExpression: 'TaggedTemplateExpression',
                    TemplateElement: 'TemplateElement',
                    TemplateLiteral: 'TemplateLiteral',
                    ThisExpression: 'ThisExpression',
                    ThrowStatement: 'ThrowStatement',
                    TryStatement: 'TryStatement',
                    UnaryExpression: 'UnaryExpression',
                    UpdateExpression: 'UpdateExpression',
                    VariableDeclaration: 'VariableDeclaration',
                    VariableDeclarator: 'VariableDeclarator',
                    WhileStatement: 'WhileStatement',
                    WithStatement: 'WithStatement',
                    YieldExpression: 'YieldExpression'
                };
                PlaceHolders = { ArrowParameterPlaceHolder: 'ArrowParameterPlaceHolder' };
                Messages = {
                    UnexpectedToken: 'Unexpected token %0',
                    UnexpectedNumber: 'Unexpected number',
                    UnexpectedString: 'Unexpected string',
                    UnexpectedIdentifier: 'Unexpected identifier',
                    UnexpectedReserved: 'Unexpected reserved word',
                    UnexpectedTemplate: 'Unexpected quasi %0',
                    UnexpectedEOS: 'Unexpected end of input',
                    NewlineAfterThrow: 'Illegal newline after throw',
                    InvalidRegExp: 'Invalid regular expression',
                    UnterminatedRegExp: 'Invalid regular expression: missing /',
                    InvalidLHSInAssignment: 'Invalid left-hand side in assignment',
                    InvalidLHSInForIn: 'Invalid left-hand side in for-in',
                    InvalidLHSInForLoop: 'Invalid left-hand side in for-loop',
                    MultipleDefaultsInSwitch: 'More than one default clause in switch statement',
                    NoCatchOrFinally: 'Missing catch or finally after try',
                    UnknownLabel: 'Undefined label \'%0\'',
                    Redeclaration: '%0 \'%1\' has already been declared',
                    IllegalContinue: 'Illegal continue statement',
                    IllegalBreak: 'Illegal break statement',
                    IllegalReturn: 'Illegal return statement',
                    StrictModeWith: 'Strict mode code may not include a with statement',
                    StrictCatchVariable: 'Catch variable may not be eval or arguments in strict mode',
                    StrictVarName: 'Variable name may not be eval or arguments in strict mode',
                    StrictParamName: 'Parameter name eval or arguments is not allowed in strict mode',
                    StrictParamDupe: 'Strict mode function may not have duplicate parameter names',
                    StrictFunctionName: 'Function name may not be eval or arguments in strict mode',
                    StrictOctalLiteral: 'Octal literals are not allowed in strict mode.',
                    StrictDelete: 'Delete of an unqualified identifier in strict mode.',
                    StrictLHSAssignment: 'Assignment to eval or arguments is not allowed in strict mode',
                    StrictLHSPostfix: 'Postfix increment/decrement may not have eval or arguments operand in strict mode',
                    StrictLHSPrefix: 'Prefix increment/decrement may not have eval or arguments operand in strict mode',
                    StrictReservedWord: 'Use of future reserved word in strict mode',
                    TemplateOctalLiteral: 'Octal literals are not allowed in template strings.',
                    ParameterAfterRestParameter: 'Rest parameter must be last formal parameter',
                    DefaultRestParameter: 'Unexpected token =',
                    ObjectPatternAsRestParameter: 'Unexpected token {',
                    DuplicateProtoProperty: 'Duplicate __proto__ fields are not allowed in object literals',
                    ConstructorSpecialMethod: 'Class constructor may not be an accessor',
                    DuplicateConstructor: 'A class may only have one constructor',
                    StaticPrototype: 'Classes may not have static property named prototype',
                    MissingFromClause: 'Unexpected token',
                    NoAsAfterImportNamespace: 'Unexpected token',
                    InvalidModuleSpecifier: 'Unexpected token',
                    IllegalImportDeclaration: 'Unexpected token',
                    IllegalExportDeclaration: 'Unexpected token',
                    DuplicateBinding: 'Duplicate binding %0'
                };
                Regex = {
                    NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B2\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDE00-\uDE11\uDE13-\uDE2B\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDE00-\uDE2F\uDE44\uDE80-\uDEAA]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF98]|\uD809[\uDC00-\uDC6E]|[\uD80C\uD840-\uD868\uD86A-\uD86C][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D]|\uD87E[\uDC00-\uDE1D]/,
                    NonAsciiIdentifierPart: /[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B2\u08E4-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA69D\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2D\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDD0-\uDDDA\uDE00-\uDE11\uDE13-\uDE37\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF01-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF98]|\uD809[\uDC00-\uDC6E]|[\uD80C\uD840-\uD868\uD86A-\uD86C][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/
                };
                function assert(condition, message) {
                    if (!condition) {
                        throw new Error('ASSERT: ' + message);
                    }
                }
                function isDecimalDigit(ch) {
                    return ch >= 48 && ch <= 57;
                }
                function isHexDigit(ch) {
                    return '0123456789abcdefABCDEF'.indexOf(ch) >= 0;
                }
                function isOctalDigit(ch) {
                    return '01234567'.indexOf(ch) >= 0;
                }
                function octalToDecimal(ch) {
                    var octal = ch !== '0', code = '01234567'.indexOf(ch);
                    if (index < length && isOctalDigit(source[index])) {
                        octal = true;
                        code = code * 8 + '01234567'.indexOf(source[index++]);
                        if ('0123'.indexOf(ch) >= 0 && index < length && isOctalDigit(source[index])) {
                            code = code * 8 + '01234567'.indexOf(source[index++]);
                        }
                    }
                    return {
                        code: code,
                        octal: octal
                    };
                }
                function isWhiteSpace(ch) {
                    return ch === 32 || ch === 9 || ch === 11 || ch === 12 || ch === 160 || ch >= 5760 && [
                        5760,
                        6158,
                        8192,
                        8193,
                        8194,
                        8195,
                        8196,
                        8197,
                        8198,
                        8199,
                        8200,
                        8201,
                        8202,
                        8239,
                        8287,
                        12288,
                        65279
                    ].indexOf(ch) >= 0;
                }
                function isLineTerminator(ch) {
                    return ch === 10 || ch === 13 || ch === 8232 || ch === 8233;
                }
                function fromCodePoint(cp) {
                    return cp < 65536 ? String.fromCharCode(cp) : String.fromCharCode(55296 + (cp - 65536 >> 10)) + String.fromCharCode(56320 + (cp - 65536 & 1023));
                }
                function isIdentifierStart(ch) {
                    return ch === 36 || ch === 95 || ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122 || ch === 92 || ch >= 128 && Regex.NonAsciiIdentifierStart.test(fromCodePoint(ch));
                }
                function isIdentifierPart(ch) {
                    return ch === 36 || ch === 95 || ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122 || ch >= 48 && ch <= 57 || ch === 92 || ch >= 128 && Regex.NonAsciiIdentifierPart.test(fromCodePoint(ch));
                }
                function isFutureReservedWord(id) {
                    switch (id) {
                    case 'enum':
                    case 'export':
                    case 'import':
                    case 'super':
                        return true;
                    default:
                        return false;
                    }
                }
                function isStrictModeReservedWord(id) {
                    switch (id) {
                    case 'implements':
                    case 'interface':
                    case 'package':
                    case 'private':
                    case 'protected':
                    case 'public':
                    case 'static':
                    case 'yield':
                    case 'let':
                        return true;
                    default:
                        return false;
                    }
                }
                function isRestrictedWord(id) {
                    return id === 'eval' || id === 'arguments';
                }
                function isKeyword(id) {
                    switch (id.length) {
                    case 2:
                        return id === 'if' || id === 'in' || id === 'do';
                    case 3:
                        return id === 'var' || id === 'for' || id === 'new' || id === 'try' || id === 'let';
                    case 4:
                        return id === 'this' || id === 'else' || id === 'case' || id === 'void' || id === 'with' || id === 'enum';
                    case 5:
                        return id === 'while' || id === 'break' || id === 'catch' || id === 'throw' || id === 'const' || id === 'yield' || id === 'class' || id === 'super';
                    case 6:
                        return id === 'return' || id === 'typeof' || id === 'delete' || id === 'switch' || id === 'export' || id === 'import';
                    case 7:
                        return id === 'default' || id === 'finally' || id === 'extends';
                    case 8:
                        return id === 'function' || id === 'continue' || id === 'debugger';
                    case 10:
                        return id === 'instanceof';
                    default:
                        return false;
                    }
                }
                function addComment(type, value, start, end, loc) {
                    var comment;
                    assert(assert._expr(assert._capt(assert._capt(typeof start, 'arguments/0/left') === 'number', 'arguments/0'), {
                        content: 'assert(typeof start === \'number\', \'Comment must have valid position\')',
                        filepath: 'node_modules/esprima/esprima.js',
                        line: 392
                    }), 'Comment must have valid position');
                    state.lastCommentStart = start;
                    comment = {
                        type: type,
                        value: value
                    };
                    if (extra.range) {
                        comment.range = [
                            start,
                            end
                        ];
                    }
                    if (extra.loc) {
                        comment.loc = loc;
                    }
                    extra.comments.push(comment);
                    if (extra.attachComment) {
                        extra.leadingComments.push(comment);
                        extra.trailingComments.push(comment);
                    }
                    if (extra.tokenize) {
                        comment.type = comment.type + 'Comment';
                        if (extra.delegate) {
                            comment = extra.delegate(comment);
                        }
                        extra.tokens.push(comment);
                    }
                }
                function skipSingleLineComment(offset) {
                    var start, loc, ch, comment;
                    start = index - offset;
                    loc = {
                        start: {
                            line: lineNumber,
                            column: index - lineStart - offset
                        }
                    };
                    while (index < length) {
                        ch = source.charCodeAt(index);
                        ++index;
                        if (isLineTerminator(ch)) {
                            hasLineTerminator = true;
                            if (extra.comments) {
                                comment = source.slice(start + offset, index - 1);
                                loc.end = {
                                    line: lineNumber,
                                    column: index - lineStart - 1
                                };
                                addComment('Line', comment, start, index - 1, loc);
                            }
                            if (ch === 13 && source.charCodeAt(index) === 10) {
                                ++index;
                            }
                            ++lineNumber;
                            lineStart = index;
                            return;
                        }
                    }
                    if (extra.comments) {
                        comment = source.slice(start + offset, index);
                        loc.end = {
                            line: lineNumber,
                            column: index - lineStart
                        };
                        addComment('Line', comment, start, index, loc);
                    }
                }
                function skipMultiLineComment() {
                    var start, loc, ch, comment;
                    if (extra.comments) {
                        start = index - 2;
                        loc = {
                            start: {
                                line: lineNumber,
                                column: index - lineStart - 2
                            }
                        };
                    }
                    while (index < length) {
                        ch = source.charCodeAt(index);
                        if (isLineTerminator(ch)) {
                            if (ch === 13 && source.charCodeAt(index + 1) === 10) {
                                ++index;
                            }
                            hasLineTerminator = true;
                            ++lineNumber;
                            ++index;
                            lineStart = index;
                        } else if (ch === 42) {
                            if (source.charCodeAt(index + 1) === 47) {
                                ++index;
                                ++index;
                                if (extra.comments) {
                                    comment = source.slice(start + 2, index - 2);
                                    loc.end = {
                                        line: lineNumber,
                                        column: index - lineStart
                                    };
                                    addComment('Block', comment, start, index, loc);
                                }
                                return;
                            }
                            ++index;
                        } else {
                            ++index;
                        }
                    }
                    if (extra.comments) {
                        loc.end = {
                            line: lineNumber,
                            column: index - lineStart
                        };
                        comment = source.slice(start + 2, index);
                        addComment('Block', comment, start, index, loc);
                    }
                    tolerateUnexpectedToken();
                }
                function skipComment() {
                    var ch, start;
                    hasLineTerminator = false;
                    start = index === 0;
                    while (index < length) {
                        ch = source.charCodeAt(index);
                        if (isWhiteSpace(ch)) {
                            ++index;
                        } else if (isLineTerminator(ch)) {
                            hasLineTerminator = true;
                            ++index;
                            if (ch === 13 && source.charCodeAt(index) === 10) {
                                ++index;
                            }
                            ++lineNumber;
                            lineStart = index;
                            start = true;
                        } else if (ch === 47) {
                            ch = source.charCodeAt(index + 1);
                            if (ch === 47) {
                                ++index;
                                ++index;
                                skipSingleLineComment(2);
                                start = true;
                            } else if (ch === 42) {
                                ++index;
                                ++index;
                                skipMultiLineComment();
                            } else {
                                break;
                            }
                        } else if (start && ch === 45) {
                            if (source.charCodeAt(index + 1) === 45 && source.charCodeAt(index + 2) === 62) {
                                index += 3;
                                skipSingleLineComment(3);
                            } else {
                                break;
                            }
                        } else if (ch === 60) {
                            if (source.slice(index + 1, index + 4) === '!--') {
                                ++index;
                                ++index;
                                ++index;
                                ++index;
                                skipSingleLineComment(4);
                            } else {
                                break;
                            }
                        } else {
                            break;
                        }
                    }
                }
                function scanHexEscape(prefix) {
                    var i, len, ch, code = 0;
                    len = prefix === 'u' ? 4 : 2;
                    for (i = 0; i < len; ++i) {
                        if (index < length && isHexDigit(source[index])) {
                            ch = source[index++];
                            code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());
                        } else {
                            return '';
                        }
                    }
                    return String.fromCharCode(code);
                }
                function scanUnicodeCodePointEscape() {
                    var ch, code;
                    ch = source[index];
                    code = 0;
                    if (ch === '}') {
                        throwUnexpectedToken();
                    }
                    while (index < length) {
                        ch = source[index++];
                        if (!isHexDigit(ch)) {
                            break;
                        }
                        code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());
                    }
                    if (code > 1114111 || ch !== '}') {
                        throwUnexpectedToken();
                    }
                    return fromCodePoint(code);
                }
                function codePointAt(i) {
                    var cp, first, second;
                    cp = source.charCodeAt(i);
                    if (cp >= 55296 && cp <= 56319) {
                        second = source.charCodeAt(i + 1);
                        if (second >= 56320 && second <= 57343) {
                            first = cp;
                            cp = (first - 55296) * 1024 + second - 56320 + 65536;
                        }
                    }
                    return cp;
                }
                function getComplexIdentifier() {
                    var cp, ch, id;
                    cp = codePointAt(index);
                    id = fromCodePoint(cp);
                    index += id.length;
                    if (cp === 92) {
                        if (source.charCodeAt(index) !== 117) {
                            throwUnexpectedToken();
                        }
                        ++index;
                        if (source[index] === '{') {
                            ++index;
                            ch = scanUnicodeCodePointEscape();
                        } else {
                            ch = scanHexEscape('u');
                            cp = ch.charCodeAt(0);
                            if (!ch || ch === '\\' || !isIdentifierStart(cp)) {
                                throwUnexpectedToken();
                            }
                        }
                        id = ch;
                    }
                    while (index < length) {
                        cp = codePointAt(index);
                        if (!isIdentifierPart(cp)) {
                            break;
                        }
                        ch = fromCodePoint(cp);
                        id += ch;
                        index += ch.length;
                        if (cp === 92) {
                            id = id.substr(0, id.length - 1);
                            if (source.charCodeAt(index) !== 117) {
                                throwUnexpectedToken();
                            }
                            ++index;
                            if (source[index] === '{') {
                                ++index;
                                ch = scanUnicodeCodePointEscape();
                            } else {
                                ch = scanHexEscape('u');
                                cp = ch.charCodeAt(0);
                                if (!ch || ch === '\\' || !isIdentifierPart(cp)) {
                                    throwUnexpectedToken();
                                }
                            }
                            id += ch;
                        }
                    }
                    return id;
                }
                function getIdentifier() {
                    var start, ch;
                    start = index++;
                    while (index < length) {
                        ch = source.charCodeAt(index);
                        if (ch === 92) {
                            index = start;
                            return getComplexIdentifier();
                        } else if (ch >= 55296 && ch < 57343) {
                            index = start;
                            return getComplexIdentifier();
                        }
                        if (isIdentifierPart(ch)) {
                            ++index;
                        } else {
                            break;
                        }
                    }
                    return source.slice(start, index);
                }
                function scanIdentifier() {
                    var start, id, type;
                    start = index;
                    id = source.charCodeAt(index) === 92 ? getComplexIdentifier() : getIdentifier();
                    if (id.length === 1) {
                        type = Token.Identifier;
                    } else if (isKeyword(id)) {
                        type = Token.Keyword;
                    } else if (id === 'null') {
                        type = Token.NullLiteral;
                    } else if (id === 'true' || id === 'false') {
                        type = Token.BooleanLiteral;
                    } else {
                        type = Token.Identifier;
                    }
                    return {
                        type: type,
                        value: id,
                        lineNumber: lineNumber,
                        lineStart: lineStart,
                        start: start,
                        end: index
                    };
                }
                function scanPunctuator() {
                    var token, str;
                    token = {
                        type: Token.Punctuator,
                        value: '',
                        lineNumber: lineNumber,
                        lineStart: lineStart,
                        start: index,
                        end: index
                    };
                    str = source[index];
                    switch (str) {
                    case '(':
                        if (extra.tokenize) {
                            extra.openParenToken = extra.tokenValues.length;
                        }
                        ++index;
                        break;
                    case '{':
                        if (extra.tokenize) {
                            extra.openCurlyToken = extra.tokenValues.length;
                        }
                        state.curlyStack.push('{');
                        ++index;
                        break;
                    case '.':
                        ++index;
                        if (source[index] === '.' && source[index + 1] === '.') {
                            index += 2;
                            str = '...';
                        }
                        break;
                    case '}':
                        ++index;
                        state.curlyStack.pop();
                        break;
                    case ')':
                    case ';':
                    case ',':
                    case '[':
                    case ']':
                    case ':':
                    case '?':
                    case '~':
                        ++index;
                        break;
                    default:
                        str = source.substr(index, 4);
                        if (str === '>>>=') {
                            index += 4;
                        } else {
                            str = str.substr(0, 3);
                            if (str === '===' || str === '!==' || str === '>>>' || str === '<<=' || str === '>>=') {
                                index += 3;
                            } else {
                                str = str.substr(0, 2);
                                if (str === '&&' || str === '||' || str === '==' || str === '!=' || str === '+=' || str === '-=' || str === '*=' || str === '/=' || str === '++' || str === '--' || str === '<<' || str === '>>' || str === '&=' || str === '|=' || str === '^=' || str === '%=' || str === '<=' || str === '>=' || str === '=>') {
                                    index += 2;
                                } else {
                                    str = source[index];
                                    if ('<>=!+-*%&|^/'.indexOf(str) >= 0) {
                                        ++index;
                                    }
                                }
                            }
                        }
                    }
                    if (index === token.start) {
                        throwUnexpectedToken();
                    }
                    token.end = index;
                    token.value = str;
                    return token;
                }
                function scanHexLiteral(start) {
                    var number = '';
                    while (index < length) {
                        if (!isHexDigit(source[index])) {
                            break;
                        }
                        number += source[index++];
                    }
                    if (number.length === 0) {
                        throwUnexpectedToken();
                    }
                    if (isIdentifierStart(source.charCodeAt(index))) {
                        throwUnexpectedToken();
                    }
                    return {
                        type: Token.NumericLiteral,
                        value: parseInt('0x' + number, 16),
                        lineNumber: lineNumber,
                        lineStart: lineStart,
                        start: start,
                        end: index
                    };
                }
                function scanBinaryLiteral(start) {
                    var ch, number;
                    number = '';
                    while (index < length) {
                        ch = source[index];
                        if (ch !== '0' && ch !== '1') {
                            break;
                        }
                        number += source[index++];
                    }
                    if (number.length === 0) {
                        throwUnexpectedToken();
                    }
                    if (index < length) {
                        ch = source.charCodeAt(index);
                        if (isIdentifierStart(ch) || isDecimalDigit(ch)) {
                            throwUnexpectedToken();
                        }
                    }
                    return {
                        type: Token.NumericLiteral,
                        value: parseInt(number, 2),
                        lineNumber: lineNumber,
                        lineStart: lineStart,
                        start: start,
                        end: index
                    };
                }
                function scanOctalLiteral(prefix, start) {
                    var number, octal;
                    if (isOctalDigit(prefix)) {
                        octal = true;
                        number = '0' + source[index++];
                    } else {
                        octal = false;
                        ++index;
                        number = '';
                    }
                    while (index < length) {
                        if (!isOctalDigit(source[index])) {
                            break;
                        }
                        number += source[index++];
                    }
                    if (!octal && number.length === 0) {
                        throwUnexpectedToken();
                    }
                    if (isIdentifierStart(source.charCodeAt(index)) || isDecimalDigit(source.charCodeAt(index))) {
                        throwUnexpectedToken();
                    }
                    return {
                        type: Token.NumericLiteral,
                        value: parseInt(number, 8),
                        octal: octal,
                        lineNumber: lineNumber,
                        lineStart: lineStart,
                        start: start,
                        end: index
                    };
                }
                function isImplicitOctalLiteral() {
                    var i, ch;
                    for (i = index + 1; i < length; ++i) {
                        ch = source[i];
                        if (ch === '8' || ch === '9') {
                            return false;
                        }
                        if (!isOctalDigit(ch)) {
                            return true;
                        }
                    }
                    return true;
                }
                function scanNumericLiteral() {
                    var number, start, ch;
                    ch = source[index];
                    assert(assert._expr(assert._capt(assert._capt(isDecimalDigit(assert._capt(assert._capt(ch, 'arguments/0/left/arguments/0/callee/object').charCodeAt(0), 'arguments/0/left/arguments/0')), 'arguments/0/left') || assert._capt(assert._capt(ch, 'arguments/0/right/left') === '.', 'arguments/0/right'), 'arguments/0'), {
                        content: 'assert(isDecimalDigit(ch.charCodeAt(0)) || ch === \'.\', \'Numeric literal must start with a decimal digit or a decimal point\')',
                        filepath: 'node_modules/esprima/esprima.js',
                        line: 977
                    }), 'Numeric literal must start with a decimal digit or a decimal point');
                    start = index;
                    number = '';
                    if (ch !== '.') {
                        number = source[index++];
                        ch = source[index];
                        if (number === '0') {
                            if (ch === 'x' || ch === 'X') {
                                ++index;
                                return scanHexLiteral(start);
                            }
                            if (ch === 'b' || ch === 'B') {
                                ++index;
                                return scanBinaryLiteral(start);
                            }
                            if (ch === 'o' || ch === 'O') {
                                return scanOctalLiteral(ch, start);
                            }
                            if (isOctalDigit(ch)) {
                                if (isImplicitOctalLiteral()) {
                                    return scanOctalLiteral(ch, start);
                                }
                            }
                        }
                        while (isDecimalDigit(source.charCodeAt(index))) {
                            number += source[index++];
                        }
                        ch = source[index];
                    }
                    if (ch === '.') {
                        number += source[index++];
                        while (isDecimalDigit(source.charCodeAt(index))) {
                            number += source[index++];
                        }
                        ch = source[index];
                    }
                    if (ch === 'e' || ch === 'E') {
                        number += source[index++];
                        ch = source[index];
                        if (ch === '+' || ch === '-') {
                            number += source[index++];
                        }
                        if (isDecimalDigit(source.charCodeAt(index))) {
                            while (isDecimalDigit(source.charCodeAt(index))) {
                                number += source[index++];
                            }
                        } else {
                            throwUnexpectedToken();
                        }
                    }
                    if (isIdentifierStart(source.charCodeAt(index))) {
                        throwUnexpectedToken();
                    }
                    return {
                        type: Token.NumericLiteral,
                        value: parseFloat(number),
                        lineNumber: lineNumber,
                        lineStart: lineStart,
                        start: start,
                        end: index
                    };
                }
                function scanStringLiteral() {
                    var str = '', quote, start, ch, unescaped, octToDec, octal = false;
                    quote = source[index];
                    assert(assert._expr(assert._capt(assert._capt(assert._capt(quote, 'arguments/0/left/left') === '\'', 'arguments/0/left') || assert._capt(assert._capt(quote, 'arguments/0/right/left') === '"', 'arguments/0/right'), 'arguments/0'), {
                        content: 'assert(quote === \'\\\'\' || quote === \'"\', \'String literal must starts with a quote\')',
                        filepath: 'node_modules/esprima/esprima.js',
                        line: 1060
                    }), 'String literal must starts with a quote');
                    start = index;
                    ++index;
                    while (index < length) {
                        ch = source[index++];
                        if (ch === quote) {
                            quote = '';
                            break;
                        } else if (ch === '\\') {
                            ch = source[index++];
                            if (!ch || !isLineTerminator(ch.charCodeAt(0))) {
                                switch (ch) {
                                case 'u':
                                case 'x':
                                    if (source[index] === '{') {
                                        ++index;
                                        str += scanUnicodeCodePointEscape();
                                    } else {
                                        unescaped = scanHexEscape(ch);
                                        if (!unescaped) {
                                            throw throwUnexpectedToken();
                                        }
                                        str += unescaped;
                                    }
                                    break;
                                case 'n':
                                    str += '\n';
                                    break;
                                case 'r':
                                    str += '\r';
                                    break;
                                case 't':
                                    str += '\t';
                                    break;
                                case 'b':
                                    str += '\b';
                                    break;
                                case 'f':
                                    str += '\f';
                                    break;
                                case 'v':
                                    str += '\x0B';
                                    break;
                                case '8':
                                case '9':
                                    str += ch;
                                    tolerateUnexpectedToken();
                                    break;
                                default:
                                    if (isOctalDigit(ch)) {
                                        octToDec = octalToDecimal(ch);
                                        octal = octToDec.octal || octal;
                                        str += String.fromCharCode(octToDec.code);
                                    } else {
                                        str += ch;
                                    }
                                    break;
                                }
                            } else {
                                ++lineNumber;
                                if (ch === '\r' && source[index] === '\n') {
                                    ++index;
                                }
                                lineStart = index;
                            }
                        } else if (isLineTerminator(ch.charCodeAt(0))) {
                            break;
                        } else {
                            str += ch;
                        }
                    }
                    if (quote !== '') {
                        index = start;
                        throwUnexpectedToken();
                    }
                    return {
                        type: Token.StringLiteral,
                        value: str,
                        octal: octal,
                        lineNumber: startLineNumber,
                        lineStart: startLineStart,
                        start: start,
                        end: index
                    };
                }
                function scanTemplate() {
                    var cooked = '', ch, start, rawOffset, terminated, head, tail, restore, unescaped;
                    terminated = false;
                    tail = false;
                    start = index;
                    head = source[index] === '`';
                    rawOffset = 2;
                    ++index;
                    while (index < length) {
                        ch = source[index++];
                        if (ch === '`') {
                            rawOffset = 1;
                            tail = true;
                            terminated = true;
                            break;
                        } else if (ch === '$') {
                            if (source[index] === '{') {
                                state.curlyStack.push('${');
                                ++index;
                                terminated = true;
                                break;
                            }
                            cooked += ch;
                        } else if (ch === '\\') {
                            ch = source[index++];
                            if (!isLineTerminator(ch.charCodeAt(0))) {
                                switch (ch) {
                                case 'n':
                                    cooked += '\n';
                                    break;
                                case 'r':
                                    cooked += '\r';
                                    break;
                                case 't':
                                    cooked += '\t';
                                    break;
                                case 'u':
                                case 'x':
                                    if (source[index] === '{') {
                                        ++index;
                                        cooked += scanUnicodeCodePointEscape();
                                    } else {
                                        restore = index;
                                        unescaped = scanHexEscape(ch);
                                        if (unescaped) {
                                            cooked += unescaped;
                                        } else {
                                            index = restore;
                                            cooked += ch;
                                        }
                                    }
                                    break;
                                case 'b':
                                    cooked += '\b';
                                    break;
                                case 'f':
                                    cooked += '\f';
                                    break;
                                case 'v':
                                    cooked += '\x0B';
                                    break;
                                default:
                                    if (ch === '0') {
                                        if (isDecimalDigit(source.charCodeAt(index))) {
                                            throwError(Messages.TemplateOctalLiteral);
                                        }
                                        cooked += '\0';
                                    } else if (isOctalDigit(ch)) {
                                        throwError(Messages.TemplateOctalLiteral);
                                    } else {
                                        cooked += ch;
                                    }
                                    break;
                                }
                            } else {
                                ++lineNumber;
                                if (ch === '\r' && source[index] === '\n') {
                                    ++index;
                                }
                                lineStart = index;
                            }
                        } else if (isLineTerminator(ch.charCodeAt(0))) {
                            ++lineNumber;
                            if (ch === '\r' && source[index] === '\n') {
                                ++index;
                            }
                            lineStart = index;
                            cooked += '\n';
                        } else {
                            cooked += ch;
                        }
                    }
                    if (!terminated) {
                        throwUnexpectedToken();
                    }
                    if (!head) {
                        state.curlyStack.pop();
                    }
                    return {
                        type: Token.Template,
                        value: {
                            cooked: cooked,
                            raw: source.slice(start + 1, index - rawOffset)
                        },
                        head: head,
                        tail: tail,
                        lineNumber: lineNumber,
                        lineStart: lineStart,
                        start: start,
                        end: index
                    };
                }
                function testRegExp(pattern, flags) {
                    var astralSubstitute = '\uFFFF', tmp = pattern;
                    if (flags.indexOf('u') >= 0) {
                        tmp = tmp.replace(/\\u\{([0-9a-fA-F]+)\}|\\u([a-fA-F0-9]{4})/g, function ($0, $1, $2) {
                            var codePoint = parseInt($1 || $2, 16);
                            if (codePoint > 1114111) {
                                throwUnexpectedToken(null, Messages.InvalidRegExp);
                            }
                            if (codePoint <= 65535) {
                                return String.fromCharCode(codePoint);
                            }
                            return astralSubstitute;
                        }).replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, astralSubstitute);
                    }
                    try {
                        RegExp(tmp);
                    } catch (e) {
                        throwUnexpectedToken(null, Messages.InvalidRegExp);
                    }
                    try {
                        return new RegExp(pattern, flags);
                    } catch (exception) {
                        return null;
                    }
                }
                function scanRegExpBody() {
                    var ch, str, classMarker, terminated, body;
                    ch = source[index];
                    assert(assert._expr(assert._capt(assert._capt(ch, 'arguments/0/left') === '/', 'arguments/0'), {
                        content: 'assert(ch === \'/\', \'Regular expression literal must start with a slash\')',
                        filepath: 'node_modules/esprima/esprima.js',
                        line: 1336
                    }), 'Regular expression literal must start with a slash');
                    str = source[index++];
                    classMarker = false;
                    terminated = false;
                    while (index < length) {
                        ch = source[index++];
                        str += ch;
                        if (ch === '\\') {
                            ch = source[index++];
                            if (isLineTerminator(ch.charCodeAt(0))) {
                                throwUnexpectedToken(null, Messages.UnterminatedRegExp);
                            }
                            str += ch;
                        } else if (isLineTerminator(ch.charCodeAt(0))) {
                            throwUnexpectedToken(null, Messages.UnterminatedRegExp);
                        } else if (classMarker) {
                            if (ch === ']') {
                                classMarker = false;
                            }
                        } else {
                            if (ch === '/') {
                                terminated = true;
                                break;
                            } else if (ch === '[') {
                                classMarker = true;
                            }
                        }
                    }
                    if (!terminated) {
                        throwUnexpectedToken(null, Messages.UnterminatedRegExp);
                    }
                    body = str.substr(1, str.length - 2);
                    return {
                        value: body,
                        literal: str
                    };
                }
                function scanRegExpFlags() {
                    var ch, str, flags, restore;
                    str = '';
                    flags = '';
                    while (index < length) {
                        ch = source[index];
                        if (!isIdentifierPart(ch.charCodeAt(0))) {
                            break;
                        }
                        ++index;
                        if (ch === '\\' && index < length) {
                            ch = source[index];
                            if (ch === 'u') {
                                ++index;
                                restore = index;
                                ch = scanHexEscape('u');
                                if (ch) {
                                    flags += ch;
                                    for (str += '\\u'; restore < index; ++restore) {
                                        str += source[restore];
                                    }
                                } else {
                                    index = restore;
                                    flags += 'u';
                                    str += '\\u';
                                }
                                tolerateUnexpectedToken();
                            } else {
                                str += '\\';
                                tolerateUnexpectedToken();
                            }
                        } else {
                            flags += ch;
                            str += ch;
                        }
                    }
                    return {
                        value: flags,
                        literal: str
                    };
                }
                function scanRegExp() {
                    var start, body, flags, value;
                    scanning = true;
                    lookahead = null;
                    skipComment();
                    start = index;
                    body = scanRegExpBody();
                    flags = scanRegExpFlags();
                    value = testRegExp(body.value, flags.value);
                    scanning = false;
                    if (extra.tokenize) {
                        return {
                            type: Token.RegularExpression,
                            value: value,
                            regex: {
                                pattern: body.value,
                                flags: flags.value
                            },
                            lineNumber: lineNumber,
                            lineStart: lineStart,
                            start: start,
                            end: index
                        };
                    }
                    return {
                        literal: body.literal + flags.literal,
                        value: value,
                        regex: {
                            pattern: body.value,
                            flags: flags.value
                        },
                        start: start,
                        end: index
                    };
                }
                function collectRegex() {
                    var pos, loc, regex, token;
                    skipComment();
                    pos = index;
                    loc = {
                        start: {
                            line: lineNumber,
                            column: index - lineStart
                        }
                    };
                    regex = scanRegExp();
                    loc.end = {
                        line: lineNumber,
                        column: index - lineStart
                    };
                    if (!extra.tokenize) {
                        if (extra.tokens.length > 0) {
                            token = extra.tokens[extra.tokens.length - 1];
                            if (token.range[0] === pos && token.type === 'Punctuator') {
                                if (token.value === '/' || token.value === '/=') {
                                    extra.tokens.pop();
                                }
                            }
                        }
                        extra.tokens.push({
                            type: 'RegularExpression',
                            value: regex.literal,
                            regex: regex.regex,
                            range: [
                                pos,
                                index
                            ],
                            loc: loc
                        });
                    }
                    return regex;
                }
                function isIdentifierName(token) {
                    return token.type === Token.Identifier || token.type === Token.Keyword || token.type === Token.BooleanLiteral || token.type === Token.NullLiteral;
                }
                function advanceSlash() {
                    var regex, previous, check;
                    function testKeyword(value) {
                        return value && value.length > 1 && value[0] >= 'a' && value[0] <= 'z';
                    }
                    previous = extra.tokenValues[extra.tokens.length - 1];
                    regex = previous !== null;
                    switch (previous) {
                    case 'this':
                    case ']':
                        regex = false;
                        break;
                    case ')':
                        check = extra.tokenValues[extra.openParenToken - 1];
                        regex = check === 'if' || check === 'while' || check === 'for' || check === 'with';
                        break;
                    case '}':
                        regex = false;
                        if (testKeyword(extra.tokenValues[extra.openCurlyToken - 3])) {
                            check = extra.tokenValues[extra.openCurlyToken - 4];
                            regex = check ? FnExprTokens.indexOf(check) < 0 : false;
                        } else if (testKeyword(extra.tokenValues[extra.openCurlyToken - 4])) {
                            check = extra.tokenValues[extra.openCurlyToken - 5];
                            regex = check ? FnExprTokens.indexOf(check) < 0 : true;
                        }
                    }
                    return regex ? collectRegex() : scanPunctuator();
                }
                function advance() {
                    var cp, token;
                    if (index >= length) {
                        return {
                            type: Token.EOF,
                            lineNumber: lineNumber,
                            lineStart: lineStart,
                            start: index,
                            end: index
                        };
                    }
                    cp = source.charCodeAt(index);
                    if (isIdentifierStart(cp)) {
                        token = scanIdentifier();
                        if (strict && isStrictModeReservedWord(token.value)) {
                            token.type = Token.Keyword;
                        }
                        return token;
                    }
                    if (cp === 40 || cp === 41 || cp === 59) {
                        return scanPunctuator();
                    }
                    if (cp === 39 || cp === 34) {
                        return scanStringLiteral();
                    }
                    if (cp === 46) {
                        if (isDecimalDigit(source.charCodeAt(index + 1))) {
                            return scanNumericLiteral();
                        }
                        return scanPunctuator();
                    }
                    if (isDecimalDigit(cp)) {
                        return scanNumericLiteral();
                    }
                    if (extra.tokenize && cp === 47) {
                        return advanceSlash();
                    }
                    if (cp === 96 || cp === 125 && state.curlyStack[state.curlyStack.length - 1] === '${') {
                        return scanTemplate();
                    }
                    if (cp >= 55296 && cp < 57343) {
                        cp = codePointAt(index);
                        if (isIdentifierStart(cp)) {
                            return scanIdentifier();
                        }
                    }
                    return scanPunctuator();
                }
                function collectToken() {
                    var loc, token, value, entry;
                    loc = {
                        start: {
                            line: lineNumber,
                            column: index - lineStart
                        }
                    };
                    token = advance();
                    loc.end = {
                        line: lineNumber,
                        column: index - lineStart
                    };
                    if (token.type !== Token.EOF) {
                        value = source.slice(token.start, token.end);
                        entry = {
                            type: TokenName[token.type],
                            value: value,
                            range: [
                                token.start,
                                token.end
                            ],
                            loc: loc
                        };
                        if (token.regex) {
                            entry.regex = {
                                pattern: token.regex.pattern,
                                flags: token.regex.flags
                            };
                        }
                        if (extra.tokenValues) {
                            extra.tokenValues.push(entry.type === 'Punctuator' || entry.type === 'Keyword' ? entry.value : null);
                        }
                        if (extra.tokenize) {
                            if (!extra.range) {
                                delete entry.range;
                            }
                            if (!extra.loc) {
                                delete entry.loc;
                            }
                            if (extra.delegate) {
                                entry = extra.delegate(entry);
                            }
                        }
                        extra.tokens.push(entry);
                    }
                    return token;
                }
                function lex() {
                    var token;
                    scanning = true;
                    lastIndex = index;
                    lastLineNumber = lineNumber;
                    lastLineStart = lineStart;
                    skipComment();
                    token = lookahead;
                    startIndex = index;
                    startLineNumber = lineNumber;
                    startLineStart = lineStart;
                    lookahead = typeof extra.tokens !== 'undefined' ? collectToken() : advance();
                    scanning = false;
                    return token;
                }
                function peek() {
                    scanning = true;
                    skipComment();
                    lastIndex = index;
                    lastLineNumber = lineNumber;
                    lastLineStart = lineStart;
                    startIndex = index;
                    startLineNumber = lineNumber;
                    startLineStart = lineStart;
                    lookahead = typeof extra.tokens !== 'undefined' ? collectToken() : advance();
                    scanning = false;
                }
                function Position() {
                    this.line = startLineNumber;
                    this.column = startIndex - startLineStart;
                }
                function SourceLocation() {
                    this.start = new Position();
                    this.end = null;
                }
                function WrappingSourceLocation(startToken) {
                    this.start = {
                        line: startToken.lineNumber,
                        column: startToken.start - startToken.lineStart
                    };
                    this.end = null;
                }
                function Node() {
                    if (extra.range) {
                        this.range = [
                            startIndex,
                            0
                        ];
                    }
                    if (extra.loc) {
                        this.loc = new SourceLocation();
                    }
                }
                function WrappingNode(startToken) {
                    if (extra.range) {
                        this.range = [
                            startToken.start,
                            0
                        ];
                    }
                    if (extra.loc) {
                        this.loc = new WrappingSourceLocation(startToken);
                    }
                }
                WrappingNode.prototype = Node.prototype = {
                    processComment: function () {
                        var lastChild, innerComments, leadingComments, trailingComments, bottomRight = extra.bottomRightStack, i, comment, last = bottomRight[bottomRight.length - 1];
                        if (this.type === Syntax.Program) {
                            if (this.body.length > 0) {
                                return;
                            }
                        }
                        if (this.type === Syntax.BlockStatement && this.body.length === 0) {
                            innerComments = [];
                            for (i = extra.leadingComments.length - 1; i >= 0; --i) {
                                comment = extra.leadingComments[i];
                                if (this.range[1] >= comment.range[1]) {
                                    innerComments.unshift(comment);
                                    extra.leadingComments.splice(i, 1);
                                    extra.trailingComments.splice(i, 1);
                                }
                            }
                            if (innerComments.length) {
                                this.innerComments = innerComments;
                                return;
                            }
                        }
                        if (extra.trailingComments.length > 0) {
                            trailingComments = [];
                            for (i = extra.trailingComments.length - 1; i >= 0; --i) {
                                comment = extra.trailingComments[i];
                                if (comment.range[0] >= this.range[1]) {
                                    trailingComments.unshift(comment);
                                    extra.trailingComments.splice(i, 1);
                                }
                            }
                            extra.trailingComments = [];
                        } else {
                            if (last && last.trailingComments && last.trailingComments[0].range[0] >= this.range[1]) {
                                trailingComments = last.trailingComments;
                                delete last.trailingComments;
                            }
                        }
                        while (last && last.range[0] >= this.range[0]) {
                            lastChild = bottomRight.pop();
                            last = bottomRight[bottomRight.length - 1];
                        }
                        if (lastChild) {
                            if (lastChild.leadingComments) {
                                leadingComments = [];
                                for (i = lastChild.leadingComments.length - 1; i >= 0; --i) {
                                    comment = lastChild.leadingComments[i];
                                    if (comment.range[1] <= this.range[0]) {
                                        leadingComments.unshift(comment);
                                        lastChild.leadingComments.splice(i, 1);
                                    }
                                }
                                if (!lastChild.leadingComments.length) {
                                    lastChild.leadingComments = undefined;
                                }
                            }
                        } else if (extra.leadingComments.length > 0) {
                            leadingComments = [];
                            for (i = extra.leadingComments.length - 1; i >= 0; --i) {
                                comment = extra.leadingComments[i];
                                if (comment.range[1] <= this.range[0]) {
                                    leadingComments.unshift(comment);
                                    extra.leadingComments.splice(i, 1);
                                }
                            }
                        }
                        if (leadingComments && leadingComments.length > 0) {
                            this.leadingComments = leadingComments;
                        }
                        if (trailingComments && trailingComments.length > 0) {
                            this.trailingComments = trailingComments;
                        }
                        bottomRight.push(this);
                    },
                    finish: function () {
                        if (extra.range) {
                            this.range[1] = lastIndex;
                        }
                        if (extra.loc) {
                            this.loc.end = {
                                line: lastLineNumber,
                                column: lastIndex - lastLineStart
                            };
                            if (extra.source) {
                                this.loc.source = extra.source;
                            }
                        }
                        if (extra.attachComment) {
                            this.processComment();
                        }
                    },
                    finishArrayExpression: function (elements) {
                        this.type = Syntax.ArrayExpression;
                        this.elements = elements;
                        this.finish();
                        return this;
                    },
                    finishArrayPattern: function (elements) {
                        this.type = Syntax.ArrayPattern;
                        this.elements = elements;
                        this.finish();
                        return this;
                    },
                    finishArrowFunctionExpression: function (params, defaults, body, expression) {
                        this.type = Syntax.ArrowFunctionExpression;
                        this.id = null;
                        this.params = params;
                        this.defaults = defaults;
                        this.body = body;
                        this.generator = false;
                        this.expression = expression;
                        this.finish();
                        return this;
                    },
                    finishAssignmentExpression: function (operator, left, right) {
                        this.type = Syntax.AssignmentExpression;
                        this.operator = operator;
                        this.left = left;
                        this.right = right;
                        this.finish();
                        return this;
                    },
                    finishAssignmentPattern: function (left, right) {
                        this.type = Syntax.AssignmentPattern;
                        this.left = left;
                        this.right = right;
                        this.finish();
                        return this;
                    },
                    finishBinaryExpression: function (operator, left, right) {
                        this.type = operator === '||' || operator === '&&' ? Syntax.LogicalExpression : Syntax.BinaryExpression;
                        this.operator = operator;
                        this.left = left;
                        this.right = right;
                        this.finish();
                        return this;
                    },
                    finishBlockStatement: function (body) {
                        this.type = Syntax.BlockStatement;
                        this.body = body;
                        this.finish();
                        return this;
                    },
                    finishBreakStatement: function (label) {
                        this.type = Syntax.BreakStatement;
                        this.label = label;
                        this.finish();
                        return this;
                    },
                    finishCallExpression: function (callee, args) {
                        this.type = Syntax.CallExpression;
                        this.callee = callee;
                        this.arguments = args;
                        this.finish();
                        return this;
                    },
                    finishCatchClause: function (param, body) {
                        this.type = Syntax.CatchClause;
                        this.param = param;
                        this.body = body;
                        this.finish();
                        return this;
                    },
                    finishClassBody: function (body) {
                        this.type = Syntax.ClassBody;
                        this.body = body;
                        this.finish();
                        return this;
                    },
                    finishClassDeclaration: function (id, superClass, body) {
                        this.type = Syntax.ClassDeclaration;
                        this.id = id;
                        this.superClass = superClass;
                        this.body = body;
                        this.finish();
                        return this;
                    },
                    finishClassExpression: function (id, superClass, body) {
                        this.type = Syntax.ClassExpression;
                        this.id = id;
                        this.superClass = superClass;
                        this.body = body;
                        this.finish();
                        return this;
                    },
                    finishConditionalExpression: function (test, consequent, alternate) {
                        this.type = Syntax.ConditionalExpression;
                        this.test = test;
                        this.consequent = consequent;
                        this.alternate = alternate;
                        this.finish();
                        return this;
                    },
                    finishContinueStatement: function (label) {
                        this.type = Syntax.ContinueStatement;
                        this.label = label;
                        this.finish();
                        return this;
                    },
                    finishDebuggerStatement: function () {
                        this.type = Syntax.DebuggerStatement;
                        this.finish();
                        return this;
                    },
                    finishDoWhileStatement: function (body, test) {
                        this.type = Syntax.DoWhileStatement;
                        this.body = body;
                        this.test = test;
                        this.finish();
                        return this;
                    },
                    finishEmptyStatement: function () {
                        this.type = Syntax.EmptyStatement;
                        this.finish();
                        return this;
                    },
                    finishExpressionStatement: function (expression) {
                        this.type = Syntax.ExpressionStatement;
                        this.expression = expression;
                        this.finish();
                        return this;
                    },
                    finishForStatement: function (init, test, update, body) {
                        this.type = Syntax.ForStatement;
                        this.init = init;
                        this.test = test;
                        this.update = update;
                        this.body = body;
                        this.finish();
                        return this;
                    },
                    finishForOfStatement: function (left, right, body) {
                        this.type = Syntax.ForOfStatement;
                        this.left = left;
                        this.right = right;
                        this.body = body;
                        this.finish();
                        return this;
                    },
                    finishForInStatement: function (left, right, body) {
                        this.type = Syntax.ForInStatement;
                        this.left = left;
                        this.right = right;
                        this.body = body;
                        this.each = false;
                        this.finish();
                        return this;
                    },
                    finishFunctionDeclaration: function (id, params, defaults, body, generator) {
                        this.type = Syntax.FunctionDeclaration;
                        this.id = id;
                        this.params = params;
                        this.defaults = defaults;
                        this.body = body;
                        this.generator = generator;
                        this.expression = false;
                        this.finish();
                        return this;
                    },
                    finishFunctionExpression: function (id, params, defaults, body, generator) {
                        this.type = Syntax.FunctionExpression;
                        this.id = id;
                        this.params = params;
                        this.defaults = defaults;
                        this.body = body;
                        this.generator = generator;
                        this.expression = false;
                        this.finish();
                        return this;
                    },
                    finishIdentifier: function (name) {
                        this.type = Syntax.Identifier;
                        this.name = name;
                        this.finish();
                        return this;
                    },
                    finishIfStatement: function (test, consequent, alternate) {
                        this.type = Syntax.IfStatement;
                        this.test = test;
                        this.consequent = consequent;
                        this.alternate = alternate;
                        this.finish();
                        return this;
                    },
                    finishLabeledStatement: function (label, body) {
                        this.type = Syntax.LabeledStatement;
                        this.label = label;
                        this.body = body;
                        this.finish();
                        return this;
                    },
                    finishLiteral: function (token) {
                        this.type = Syntax.Literal;
                        this.value = token.value;
                        this.raw = source.slice(token.start, token.end);
                        if (token.regex) {
                            this.regex = token.regex;
                        }
                        this.finish();
                        return this;
                    },
                    finishMemberExpression: function (accessor, object, property) {
                        this.type = Syntax.MemberExpression;
                        this.computed = accessor === '[';
                        this.object = object;
                        this.property = property;
                        this.finish();
                        return this;
                    },
                    finishMetaProperty: function (meta, property) {
                        this.type = Syntax.MetaProperty;
                        this.meta = meta;
                        this.property = property;
                        this.finish();
                        return this;
                    },
                    finishNewExpression: function (callee, args) {
                        this.type = Syntax.NewExpression;
                        this.callee = callee;
                        this.arguments = args;
                        this.finish();
                        return this;
                    },
                    finishObjectExpression: function (properties) {
                        this.type = Syntax.ObjectExpression;
                        this.properties = properties;
                        this.finish();
                        return this;
                    },
                    finishObjectPattern: function (properties) {
                        this.type = Syntax.ObjectPattern;
                        this.properties = properties;
                        this.finish();
                        return this;
                    },
                    finishPostfixExpression: function (operator, argument) {
                        this.type = Syntax.UpdateExpression;
                        this.operator = operator;
                        this.argument = argument;
                        this.prefix = false;
                        this.finish();
                        return this;
                    },
                    finishProgram: function (body, sourceType) {
                        this.type = Syntax.Program;
                        this.body = body;
                        this.sourceType = sourceType;
                        this.finish();
                        return this;
                    },
                    finishProperty: function (kind, key, computed, value, method, shorthand) {
                        this.type = Syntax.Property;
                        this.key = key;
                        this.computed = computed;
                        this.value = value;
                        this.kind = kind;
                        this.method = method;
                        this.shorthand = shorthand;
                        this.finish();
                        return this;
                    },
                    finishRestElement: function (argument) {
                        this.type = Syntax.RestElement;
                        this.argument = argument;
                        this.finish();
                        return this;
                    },
                    finishReturnStatement: function (argument) {
                        this.type = Syntax.ReturnStatement;
                        this.argument = argument;
                        this.finish();
                        return this;
                    },
                    finishSequenceExpression: function (expressions) {
                        this.type = Syntax.SequenceExpression;
                        this.expressions = expressions;
                        this.finish();
                        return this;
                    },
                    finishSpreadElement: function (argument) {
                        this.type = Syntax.SpreadElement;
                        this.argument = argument;
                        this.finish();
                        return this;
                    },
                    finishSwitchCase: function (test, consequent) {
                        this.type = Syntax.SwitchCase;
                        this.test = test;
                        this.consequent = consequent;
                        this.finish();
                        return this;
                    },
                    finishSuper: function () {
                        this.type = Syntax.Super;
                        this.finish();
                        return this;
                    },
                    finishSwitchStatement: function (discriminant, cases) {
                        this.type = Syntax.SwitchStatement;
                        this.discriminant = discriminant;
                        this.cases = cases;
                        this.finish();
                        return this;
                    },
                    finishTaggedTemplateExpression: function (tag, quasi) {
                        this.type = Syntax.TaggedTemplateExpression;
                        this.tag = tag;
                        this.quasi = quasi;
                        this.finish();
                        return this;
                    },
                    finishTemplateElement: function (value, tail) {
                        this.type = Syntax.TemplateElement;
                        this.value = value;
                        this.tail = tail;
                        this.finish();
                        return this;
                    },
                    finishTemplateLiteral: function (quasis, expressions) {
                        this.type = Syntax.TemplateLiteral;
                        this.quasis = quasis;
                        this.expressions = expressions;
                        this.finish();
                        return this;
                    },
                    finishThisExpression: function () {
                        this.type = Syntax.ThisExpression;
                        this.finish();
                        return this;
                    },
                    finishThrowStatement: function (argument) {
                        this.type = Syntax.ThrowStatement;
                        this.argument = argument;
                        this.finish();
                        return this;
                    },
                    finishTryStatement: function (block, handler, finalizer) {
                        this.type = Syntax.TryStatement;
                        this.block = block;
                        this.guardedHandlers = [];
                        this.handlers = handler ? [handler] : [];
                        this.handler = handler;
                        this.finalizer = finalizer;
                        this.finish();
                        return this;
                    },
                    finishUnaryExpression: function (operator, argument) {
                        this.type = operator === '++' || operator === '--' ? Syntax.UpdateExpression : Syntax.UnaryExpression;
                        this.operator = operator;
                        this.argument = argument;
                        this.prefix = true;
                        this.finish();
                        return this;
                    },
                    finishVariableDeclaration: function (declarations) {
                        this.type = Syntax.VariableDeclaration;
                        this.declarations = declarations;
                        this.kind = 'var';
                        this.finish();
                        return this;
                    },
                    finishLexicalDeclaration: function (declarations, kind) {
                        this.type = Syntax.VariableDeclaration;
                        this.declarations = declarations;
                        this.kind = kind;
                        this.finish();
                        return this;
                    },
                    finishVariableDeclarator: function (id, init) {
                        this.type = Syntax.VariableDeclarator;
                        this.id = id;
                        this.init = init;
                        this.finish();
                        return this;
                    },
                    finishWhileStatement: function (test, body) {
                        this.type = Syntax.WhileStatement;
                        this.test = test;
                        this.body = body;
                        this.finish();
                        return this;
                    },
                    finishWithStatement: function (object, body) {
                        this.type = Syntax.WithStatement;
                        this.object = object;
                        this.body = body;
                        this.finish();
                        return this;
                    },
                    finishExportSpecifier: function (local, exported) {
                        this.type = Syntax.ExportSpecifier;
                        this.exported = exported || local;
                        this.local = local;
                        this.finish();
                        return this;
                    },
                    finishImportDefaultSpecifier: function (local) {
                        this.type = Syntax.ImportDefaultSpecifier;
                        this.local = local;
                        this.finish();
                        return this;
                    },
                    finishImportNamespaceSpecifier: function (local) {
                        this.type = Syntax.ImportNamespaceSpecifier;
                        this.local = local;
                        this.finish();
                        return this;
                    },
                    finishExportNamedDeclaration: function (declaration, specifiers, src) {
                        this.type = Syntax.ExportNamedDeclaration;
                        this.declaration = declaration;
                        this.specifiers = specifiers;
                        this.source = src;
                        this.finish();
                        return this;
                    },
                    finishExportDefaultDeclaration: function (declaration) {
                        this.type = Syntax.ExportDefaultDeclaration;
                        this.declaration = declaration;
                        this.finish();
                        return this;
                    },
                    finishExportAllDeclaration: function (src) {
                        this.type = Syntax.ExportAllDeclaration;
                        this.source = src;
                        this.finish();
                        return this;
                    },
                    finishImportSpecifier: function (local, imported) {
                        this.type = Syntax.ImportSpecifier;
                        this.local = local || imported;
                        this.imported = imported;
                        this.finish();
                        return this;
                    },
                    finishImportDeclaration: function (specifiers, src) {
                        this.type = Syntax.ImportDeclaration;
                        this.specifiers = specifiers;
                        this.source = src;
                        this.finish();
                        return this;
                    },
                    finishYieldExpression: function (argument, delegate) {
                        this.type = Syntax.YieldExpression;
                        this.argument = argument;
                        this.delegate = delegate;
                        this.finish();
                        return this;
                    }
                };
                function recordError(error) {
                    var e, existing;
                    for (e = 0; e < extra.errors.length; e++) {
                        existing = extra.errors[e];
                        if (existing.index === error.index && existing.message === error.message) {
                            return;
                        }
                    }
                    extra.errors.push(error);
                }
                function constructError(msg, column) {
                    var error = new Error(msg);
                    try {
                        throw error;
                    } catch (base) {
                        if (Object.create && Object.defineProperty) {
                            error = Object.create(base);
                            Object.defineProperty(error, 'column', { value: column });
                        }
                    } finally {
                        return error;
                    }
                }
                function createError(line, pos, description) {
                    var msg, column, error;
                    msg = 'Line ' + line + ': ' + description;
                    column = pos - (scanning ? lineStart : lastLineStart) + 1;
                    error = constructError(msg, column);
                    error.lineNumber = line;
                    error.description = description;
                    error.index = pos;
                    return error;
                }
                function throwError(messageFormat) {
                    var args, msg;
                    args = Array.prototype.slice.call(arguments, 1);
                    msg = messageFormat.replace(/%(\d)/g, function (whole, idx) {
                        assert(assert._expr(assert._capt(assert._capt(idx, 'arguments/0/left') < assert._capt(assert._capt(args, 'arguments/0/right/object').length, 'arguments/0/right'), 'arguments/0'), {
                            content: 'assert(idx < args.length, \'Message reference must be in range\')',
                            filepath: 'node_modules/esprima/esprima.js',
                            line: 2440
                        }), 'Message reference must be in range');
                        return args[idx];
                    });
                    throw createError(lastLineNumber, lastIndex, msg);
                }
                function tolerateError(messageFormat) {
                    var args, msg, error;
                    args = Array.prototype.slice.call(arguments, 1);
                    msg = messageFormat.replace(/%(\d)/g, function (whole, idx) {
                        assert(assert._expr(assert._capt(assert._capt(idx, 'arguments/0/left') < assert._capt(assert._capt(args, 'arguments/0/right/object').length, 'arguments/0/right'), 'arguments/0'), {
                            content: 'assert(idx < args.length, \'Message reference must be in range\')',
                            filepath: 'node_modules/esprima/esprima.js',
                            line: 2455
                        }), 'Message reference must be in range');
                        return args[idx];
                    });
                    error = createError(lineNumber, lastIndex, msg);
                    if (extra.errors) {
                        recordError(error);
                    } else {
                        throw error;
                    }
                }
                function unexpectedTokenError(token, message) {
                    var value, msg = message || Messages.UnexpectedToken;
                    if (token) {
                        if (!message) {
                            msg = token.type === Token.EOF ? Messages.UnexpectedEOS : token.type === Token.Identifier ? Messages.UnexpectedIdentifier : token.type === Token.NumericLiteral ? Messages.UnexpectedNumber : token.type === Token.StringLiteral ? Messages.UnexpectedString : token.type === Token.Template ? Messages.UnexpectedTemplate : Messages.UnexpectedToken;
                            if (token.type === Token.Keyword) {
                                if (isFutureReservedWord(token.value)) {
                                    msg = Messages.UnexpectedReserved;
                                } else if (strict && isStrictModeReservedWord(token.value)) {
                                    msg = Messages.StrictReservedWord;
                                }
                            }
                        }
                        value = token.type === Token.Template ? token.value.raw : token.value;
                    } else {
                        value = 'ILLEGAL';
                    }
                    msg = msg.replace('%0', value);
                    return token && typeof token.lineNumber === 'number' ? createError(token.lineNumber, token.start, msg) : createError(scanning ? lineNumber : lastLineNumber, scanning ? index : lastIndex, msg);
                }
                function throwUnexpectedToken(token, message) {
                    throw unexpectedTokenError(token, message);
                }
                function tolerateUnexpectedToken(token, message) {
                    var error = unexpectedTokenError(token, message);
                    if (extra.errors) {
                        recordError(error);
                    } else {
                        throw error;
                    }
                }
                function expect(value) {
                    var token = lex();
                    if (token.type !== Token.Punctuator || token.value !== value) {
                        throwUnexpectedToken(token);
                    }
                }
                function expectCommaSeparator() {
                    var token;
                    if (extra.errors) {
                        token = lookahead;
                        if (token.type === Token.Punctuator && token.value === ',') {
                            lex();
                        } else if (token.type === Token.Punctuator && token.value === ';') {
                            lex();
                            tolerateUnexpectedToken(token);
                        } else {
                            tolerateUnexpectedToken(token, Messages.UnexpectedToken);
                        }
                    } else {
                        expect(',');
                    }
                }
                function expectKeyword(keyword) {
                    var token = lex();
                    if (token.type !== Token.Keyword || token.value !== keyword) {
                        throwUnexpectedToken(token);
                    }
                }
                function match(value) {
                    return lookahead.type === Token.Punctuator && lookahead.value === value;
                }
                function matchKeyword(keyword) {
                    return lookahead.type === Token.Keyword && lookahead.value === keyword;
                }
                function matchContextualKeyword(keyword) {
                    return lookahead.type === Token.Identifier && lookahead.value === keyword;
                }
                function matchAssign() {
                    var op;
                    if (lookahead.type !== Token.Punctuator) {
                        return false;
                    }
                    op = lookahead.value;
                    return op === '=' || op === '*=' || op === '/=' || op === '%=' || op === '+=' || op === '-=' || op === '<<=' || op === '>>=' || op === '>>>=' || op === '&=' || op === '^=' || op === '|=';
                }
                function consumeSemicolon() {
                    if (source.charCodeAt(startIndex) === 59 || match(';')) {
                        lex();
                        return;
                    }
                    if (hasLineTerminator) {
                        return;
                    }
                    lastIndex = startIndex;
                    lastLineNumber = startLineNumber;
                    lastLineStart = startLineStart;
                    if (lookahead.type !== Token.EOF && !match('}')) {
                        throwUnexpectedToken(lookahead);
                    }
                }
                function isolateCoverGrammar(parser) {
                    var oldIsBindingElement = isBindingElement, oldIsAssignmentTarget = isAssignmentTarget, oldFirstCoverInitializedNameError = firstCoverInitializedNameError, result;
                    isBindingElement = true;
                    isAssignmentTarget = true;
                    firstCoverInitializedNameError = null;
                    result = parser();
                    if (firstCoverInitializedNameError !== null) {
                        throwUnexpectedToken(firstCoverInitializedNameError);
                    }
                    isBindingElement = oldIsBindingElement;
                    isAssignmentTarget = oldIsAssignmentTarget;
                    firstCoverInitializedNameError = oldFirstCoverInitializedNameError;
                    return result;
                }
                function inheritCoverGrammar(parser) {
                    var oldIsBindingElement = isBindingElement, oldIsAssignmentTarget = isAssignmentTarget, oldFirstCoverInitializedNameError = firstCoverInitializedNameError, result;
                    isBindingElement = true;
                    isAssignmentTarget = true;
                    firstCoverInitializedNameError = null;
                    result = parser();
                    isBindingElement = isBindingElement && oldIsBindingElement;
                    isAssignmentTarget = isAssignmentTarget && oldIsAssignmentTarget;
                    firstCoverInitializedNameError = oldFirstCoverInitializedNameError || firstCoverInitializedNameError;
                    return result;
                }
                function parseArrayPattern(params, kind) {
                    var node = new Node(), elements = [], rest, restNode;
                    expect('[');
                    while (!match(']')) {
                        if (match(',')) {
                            lex();
                            elements.push(null);
                        } else {
                            if (match('...')) {
                                restNode = new Node();
                                lex();
                                params.push(lookahead);
                                rest = parseVariableIdentifier(kind);
                                elements.push(restNode.finishRestElement(rest));
                                break;
                            } else {
                                elements.push(parsePatternWithDefault(params, kind));
                            }
                            if (!match(']')) {
                                expect(',');
                            }
                        }
                    }
                    expect(']');
                    return node.finishArrayPattern(elements);
                }
                function parsePropertyPattern(params, kind) {
                    var node = new Node(), key, keyToken, computed = match('['), init;
                    if (lookahead.type === Token.Identifier) {
                        keyToken = lookahead;
                        key = parseVariableIdentifier();
                        if (match('=')) {
                            params.push(keyToken);
                            lex();
                            init = parseAssignmentExpression();
                            return node.finishProperty('init', key, false, new WrappingNode(keyToken).finishAssignmentPattern(key, init), false, true);
                        } else if (!match(':')) {
                            params.push(keyToken);
                            return node.finishProperty('init', key, false, key, false, true);
                        }
                    } else {
                        key = parseObjectPropertyKey();
                    }
                    expect(':');
                    init = parsePatternWithDefault(params, kind);
                    return node.finishProperty('init', key, computed, init, false, false);
                }
                function parseObjectPattern(params, kind) {
                    var node = new Node(), properties = [];
                    expect('{');
                    while (!match('}')) {
                        properties.push(parsePropertyPattern(params, kind));
                        if (!match('}')) {
                            expect(',');
                        }
                    }
                    lex();
                    return node.finishObjectPattern(properties);
                }
                function parsePattern(params, kind) {
                    if (match('[')) {
                        return parseArrayPattern(params, kind);
                    } else if (match('{')) {
                        return parseObjectPattern(params, kind);
                    } else if (matchKeyword('let')) {
                        if (kind === 'const' || kind === 'let') {
                            tolerateUnexpectedToken(lookahead, Messages.UnexpectedToken);
                        }
                    }
                    params.push(lookahead);
                    return parseVariableIdentifier(kind);
                }
                function parsePatternWithDefault(params, kind) {
                    var startToken = lookahead, pattern, previousAllowYield, right;
                    pattern = parsePattern(params, kind);
                    if (match('=')) {
                        lex();
                        previousAllowYield = state.allowYield;
                        state.allowYield = true;
                        right = isolateCoverGrammar(parseAssignmentExpression);
                        state.allowYield = previousAllowYield;
                        pattern = new WrappingNode(startToken).finishAssignmentPattern(pattern, right);
                    }
                    return pattern;
                }
                function parseArrayInitializer() {
                    var elements = [], node = new Node(), restSpread;
                    expect('[');
                    while (!match(']')) {
                        if (match(',')) {
                            lex();
                            elements.push(null);
                        } else if (match('...')) {
                            restSpread = new Node();
                            lex();
                            restSpread.finishSpreadElement(inheritCoverGrammar(parseAssignmentExpression));
                            if (!match(']')) {
                                isAssignmentTarget = isBindingElement = false;
                                expect(',');
                            }
                            elements.push(restSpread);
                        } else {
                            elements.push(inheritCoverGrammar(parseAssignmentExpression));
                            if (!match(']')) {
                                expect(',');
                            }
                        }
                    }
                    lex();
                    return node.finishArrayExpression(elements);
                }
                function parsePropertyFunction(node, paramInfo, isGenerator) {
                    var previousStrict, body;
                    isAssignmentTarget = isBindingElement = false;
                    previousStrict = strict;
                    body = isolateCoverGrammar(parseFunctionSourceElements);
                    if (strict && paramInfo.firstRestricted) {
                        tolerateUnexpectedToken(paramInfo.firstRestricted, paramInfo.message);
                    }
                    if (strict && paramInfo.stricted) {
                        tolerateUnexpectedToken(paramInfo.stricted, paramInfo.message);
                    }
                    strict = previousStrict;
                    return node.finishFunctionExpression(null, paramInfo.params, paramInfo.defaults, body, isGenerator);
                }
                function parsePropertyMethodFunction() {
                    var params, method, node = new Node(), previousAllowYield = state.allowYield;
                    state.allowYield = false;
                    params = parseParams();
                    state.allowYield = previousAllowYield;
                    state.allowYield = false;
                    method = parsePropertyFunction(node, params, false);
                    state.allowYield = previousAllowYield;
                    return method;
                }
                function parseObjectPropertyKey() {
                    var token, node = new Node(), expr;
                    token = lex();
                    switch (token.type) {
                    case Token.StringLiteral:
                    case Token.NumericLiteral:
                        if (strict && token.octal) {
                            tolerateUnexpectedToken(token, Messages.StrictOctalLiteral);
                        }
                        return node.finishLiteral(token);
                    case Token.Identifier:
                    case Token.BooleanLiteral:
                    case Token.NullLiteral:
                    case Token.Keyword:
                        return node.finishIdentifier(token.value);
                    case Token.Punctuator:
                        if (token.value === '[') {
                            expr = isolateCoverGrammar(parseAssignmentExpression);
                            expect(']');
                            return expr;
                        }
                        break;
                    }
                    throwUnexpectedToken(token);
                }
                function lookaheadPropertyName() {
                    switch (lookahead.type) {
                    case Token.Identifier:
                    case Token.StringLiteral:
                    case Token.BooleanLiteral:
                    case Token.NullLiteral:
                    case Token.NumericLiteral:
                    case Token.Keyword:
                        return true;
                    case Token.Punctuator:
                        return lookahead.value === '[';
                    }
                    return false;
                }
                function tryParseMethodDefinition(token, key, computed, node) {
                    var value, options, methodNode, params, previousAllowYield = state.allowYield;
                    if (token.type === Token.Identifier) {
                        if (token.value === 'get' && lookaheadPropertyName()) {
                            computed = match('[');
                            key = parseObjectPropertyKey();
                            methodNode = new Node();
                            expect('(');
                            expect(')');
                            state.allowYield = false;
                            value = parsePropertyFunction(methodNode, {
                                params: [],
                                defaults: [],
                                stricted: null,
                                firstRestricted: null,
                                message: null
                            }, false);
                            state.allowYield = previousAllowYield;
                            return node.finishProperty('get', key, computed, value, false, false);
                        } else if (token.value === 'set' && lookaheadPropertyName()) {
                            computed = match('[');
                            key = parseObjectPropertyKey();
                            methodNode = new Node();
                            expect('(');
                            options = {
                                params: [],
                                defaultCount: 0,
                                defaults: [],
                                firstRestricted: null,
                                paramSet: {}
                            };
                            if (match(')')) {
                                tolerateUnexpectedToken(lookahead);
                            } else {
                                state.allowYield = false;
                                parseParam(options);
                                state.allowYield = previousAllowYield;
                                if (options.defaultCount === 0) {
                                    options.defaults = [];
                                }
                            }
                            expect(')');
                            state.allowYield = false;
                            value = parsePropertyFunction(methodNode, options, false);
                            state.allowYield = previousAllowYield;
                            return node.finishProperty('set', key, computed, value, false, false);
                        }
                    } else if (token.type === Token.Punctuator && token.value === '*' && lookaheadPropertyName()) {
                        computed = match('[');
                        key = parseObjectPropertyKey();
                        methodNode = new Node();
                        state.allowYield = true;
                        params = parseParams();
                        state.allowYield = previousAllowYield;
                        state.allowYield = false;
                        value = parsePropertyFunction(methodNode, params, true);
                        state.allowYield = previousAllowYield;
                        return node.finishProperty('init', key, computed, value, true, false);
                    }
                    if (key && match('(')) {
                        value = parsePropertyMethodFunction();
                        return node.finishProperty('init', key, computed, value, true, false);
                    }
                    return null;
                }
                function parseObjectProperty(hasProto) {
                    var token = lookahead, node = new Node(), computed, key, maybeMethod, proto, value;
                    computed = match('[');
                    if (match('*')) {
                        lex();
                    } else {
                        key = parseObjectPropertyKey();
                    }
                    maybeMethod = tryParseMethodDefinition(token, key, computed, node);
                    if (maybeMethod) {
                        return maybeMethod;
                    }
                    if (!key) {
                        throwUnexpectedToken(lookahead);
                    }
                    if (!computed) {
                        proto = key.type === Syntax.Identifier && key.name === '__proto__' || key.type === Syntax.Literal && key.value === '__proto__';
                        if (hasProto.value && proto) {
                            tolerateError(Messages.DuplicateProtoProperty);
                        }
                        hasProto.value |= proto;
                    }
                    if (match(':')) {
                        lex();
                        value = inheritCoverGrammar(parseAssignmentExpression);
                        return node.finishProperty('init', key, computed, value, false, false);
                    }
                    if (token.type === Token.Identifier) {
                        if (match('=')) {
                            firstCoverInitializedNameError = lookahead;
                            lex();
                            value = isolateCoverGrammar(parseAssignmentExpression);
                            return node.finishProperty('init', key, computed, new WrappingNode(token).finishAssignmentPattern(key, value), false, true);
                        }
                        return node.finishProperty('init', key, computed, key, false, true);
                    }
                    throwUnexpectedToken(lookahead);
                }
                function parseObjectInitializer() {
                    var properties = [], hasProto = { value: false }, node = new Node();
                    expect('{');
                    while (!match('}')) {
                        properties.push(parseObjectProperty(hasProto));
                        if (!match('}')) {
                            expectCommaSeparator();
                        }
                    }
                    expect('}');
                    return node.finishObjectExpression(properties);
                }
                function reinterpretExpressionAsPattern(expr) {
                    var i;
                    switch (expr.type) {
                    case Syntax.Identifier:
                    case Syntax.MemberExpression:
                    case Syntax.RestElement:
                    case Syntax.AssignmentPattern:
                        break;
                    case Syntax.SpreadElement:
                        expr.type = Syntax.RestElement;
                        reinterpretExpressionAsPattern(expr.argument);
                        break;
                    case Syntax.ArrayExpression:
                        expr.type = Syntax.ArrayPattern;
                        for (i = 0; i < expr.elements.length; i++) {
                            if (expr.elements[i] !== null) {
                                reinterpretExpressionAsPattern(expr.elements[i]);
                            }
                        }
                        break;
                    case Syntax.ObjectExpression:
                        expr.type = Syntax.ObjectPattern;
                        for (i = 0; i < expr.properties.length; i++) {
                            reinterpretExpressionAsPattern(expr.properties[i].value);
                        }
                        break;
                    case Syntax.AssignmentExpression:
                        expr.type = Syntax.AssignmentPattern;
                        reinterpretExpressionAsPattern(expr.left);
                        break;
                    default:
                        break;
                    }
                }
                function parseTemplateElement(option) {
                    var node, token;
                    if (lookahead.type !== Token.Template || option.head && !lookahead.head) {
                        throwUnexpectedToken();
                    }
                    node = new Node();
                    token = lex();
                    return node.finishTemplateElement({
                        raw: token.value.raw,
                        cooked: token.value.cooked
                    }, token.tail);
                }
                function parseTemplateLiteral() {
                    var quasi, quasis, expressions, node = new Node();
                    quasi = parseTemplateElement({ head: true });
                    quasis = [quasi];
                    expressions = [];
                    while (!quasi.tail) {
                        expressions.push(parseExpression());
                        quasi = parseTemplateElement({ head: false });
                        quasis.push(quasi);
                    }
                    return node.finishTemplateLiteral(quasis, expressions);
                }
                function parseGroupExpression() {
                    var expr, expressions, startToken, i, params = [];
                    expect('(');
                    if (match(')')) {
                        lex();
                        if (!match('=>')) {
                            expect('=>');
                        }
                        return {
                            type: PlaceHolders.ArrowParameterPlaceHolder,
                            params: [],
                            rawParams: []
                        };
                    }
                    startToken = lookahead;
                    if (match('...')) {
                        expr = parseRestElement(params);
                        expect(')');
                        if (!match('=>')) {
                            expect('=>');
                        }
                        return {
                            type: PlaceHolders.ArrowParameterPlaceHolder,
                            params: [expr]
                        };
                    }
                    isBindingElement = true;
                    expr = inheritCoverGrammar(parseAssignmentExpression);
                    if (match(',')) {
                        isAssignmentTarget = false;
                        expressions = [expr];
                        while (startIndex < length) {
                            if (!match(',')) {
                                break;
                            }
                            lex();
                            if (match('...')) {
                                if (!isBindingElement) {
                                    throwUnexpectedToken(lookahead);
                                }
                                expressions.push(parseRestElement(params));
                                expect(')');
                                if (!match('=>')) {
                                    expect('=>');
                                }
                                isBindingElement = false;
                                for (i = 0; i < expressions.length; i++) {
                                    reinterpretExpressionAsPattern(expressions[i]);
                                }
                                return {
                                    type: PlaceHolders.ArrowParameterPlaceHolder,
                                    params: expressions
                                };
                            }
                            expressions.push(inheritCoverGrammar(parseAssignmentExpression));
                        }
                        expr = new WrappingNode(startToken).finishSequenceExpression(expressions);
                    }
                    expect(')');
                    if (match('=>')) {
                        if (expr.type === Syntax.Identifier && expr.name === 'yield') {
                            return {
                                type: PlaceHolders.ArrowParameterPlaceHolder,
                                params: [expr]
                            };
                        }
                        if (!isBindingElement) {
                            throwUnexpectedToken(lookahead);
                        }
                        if (expr.type === Syntax.SequenceExpression) {
                            for (i = 0; i < expr.expressions.length; i++) {
                                reinterpretExpressionAsPattern(expr.expressions[i]);
                            }
                        } else {
                            reinterpretExpressionAsPattern(expr);
                        }
                        expr = {
                            type: PlaceHolders.ArrowParameterPlaceHolder,
                            params: expr.type === Syntax.SequenceExpression ? expr.expressions : [expr]
                        };
                    }
                    isBindingElement = false;
                    return expr;
                }
                function parsePrimaryExpression() {
                    var type, token, expr, node;
                    if (match('(')) {
                        isBindingElement = false;
                        return inheritCoverGrammar(parseGroupExpression);
                    }
                    if (match('[')) {
                        return inheritCoverGrammar(parseArrayInitializer);
                    }
                    if (match('{')) {
                        return inheritCoverGrammar(parseObjectInitializer);
                    }
                    type = lookahead.type;
                    node = new Node();
                    if (type === Token.Identifier) {
                        if (state.sourceType === 'module' && lookahead.value === 'await') {
                            tolerateUnexpectedToken(lookahead);
                        }
                        expr = node.finishIdentifier(lex().value);
                    } else if (type === Token.StringLiteral || type === Token.NumericLiteral) {
                        isAssignmentTarget = isBindingElement = false;
                        if (strict && lookahead.octal) {
                            tolerateUnexpectedToken(lookahead, Messages.StrictOctalLiteral);
                        }
                        expr = node.finishLiteral(lex());
                    } else if (type === Token.Keyword) {
                        if (!strict && state.allowYield && matchKeyword('yield')) {
                            return parseNonComputedProperty();
                        }
                        if (!strict && matchKeyword('let')) {
                            return node.finishIdentifier(lex().value);
                        }
                        isAssignmentTarget = isBindingElement = false;
                        if (matchKeyword('function')) {
                            return parseFunctionExpression();
                        }
                        if (matchKeyword('this')) {
                            lex();
                            return node.finishThisExpression();
                        }
                        if (matchKeyword('class')) {
                            return parseClassExpression();
                        }
                        throwUnexpectedToken(lex());
                    } else if (type === Token.BooleanLiteral) {
                        isAssignmentTarget = isBindingElement = false;
                        token = lex();
                        token.value = token.value === 'true';
                        expr = node.finishLiteral(token);
                    } else if (type === Token.NullLiteral) {
                        isAssignmentTarget = isBindingElement = false;
                        token = lex();
                        token.value = null;
                        expr = node.finishLiteral(token);
                    } else if (match('/') || match('/=')) {
                        isAssignmentTarget = isBindingElement = false;
                        index = startIndex;
                        if (typeof extra.tokens !== 'undefined') {
                            token = collectRegex();
                        } else {
                            token = scanRegExp();
                        }
                        lex();
                        expr = node.finishLiteral(token);
                    } else if (type === Token.Template) {
                        expr = parseTemplateLiteral();
                    } else {
                        throwUnexpectedToken(lex());
                    }
                    return expr;
                }
                function parseArguments() {
                    var args = [], expr;
                    expect('(');
                    if (!match(')')) {
                        while (startIndex < length) {
                            if (match('...')) {
                                expr = new Node();
                                lex();
                                expr.finishSpreadElement(isolateCoverGrammar(parseAssignmentExpression));
                            } else {
                                expr = isolateCoverGrammar(parseAssignmentExpression);
                            }
                            args.push(expr);
                            if (match(')')) {
                                break;
                            }
                            expectCommaSeparator();
                        }
                    }
                    expect(')');
                    return args;
                }
                function parseNonComputedProperty() {
                    var token, node = new Node();
                    token = lex();
                    if (!isIdentifierName(token)) {
                        throwUnexpectedToken(token);
                    }
                    return node.finishIdentifier(token.value);
                }
                function parseNonComputedMember() {
                    expect('.');
                    return parseNonComputedProperty();
                }
                function parseComputedMember() {
                    var expr;
                    expect('[');
                    expr = isolateCoverGrammar(parseExpression);
                    expect(']');
                    return expr;
                }
                function parseNewExpression() {
                    var callee, args, node = new Node();
                    expectKeyword('new');
                    if (match('.')) {
                        lex();
                        if (lookahead.type === Token.Identifier && lookahead.value === 'target') {
                            if (state.inFunctionBody) {
                                lex();
                                return node.finishMetaProperty('new', 'target');
                            }
                        }
                        throwUnexpectedToken(lookahead);
                    }
                    callee = isolateCoverGrammar(parseLeftHandSideExpression);
                    args = match('(') ? parseArguments() : [];
                    isAssignmentTarget = isBindingElement = false;
                    return node.finishNewExpression(callee, args);
                }
                function parseLeftHandSideExpressionAllowCall() {
                    var quasi, expr, args, property, startToken, previousAllowIn = state.allowIn;
                    startToken = lookahead;
                    state.allowIn = true;
                    if (matchKeyword('super') && state.inFunctionBody) {
                        expr = new Node();
                        lex();
                        expr = expr.finishSuper();
                        if (!match('(') && !match('.') && !match('[')) {
                            throwUnexpectedToken(lookahead);
                        }
                    } else {
                        expr = inheritCoverGrammar(matchKeyword('new') ? parseNewExpression : parsePrimaryExpression);
                    }
                    for (;;) {
                        if (match('.')) {
                            isBindingElement = false;
                            isAssignmentTarget = true;
                            property = parseNonComputedMember();
                            expr = new WrappingNode(startToken).finishMemberExpression('.', expr, property);
                        } else if (match('(')) {
                            isBindingElement = false;
                            isAssignmentTarget = false;
                            args = parseArguments();
                            expr = new WrappingNode(startToken).finishCallExpression(expr, args);
                        } else if (match('[')) {
                            isBindingElement = false;
                            isAssignmentTarget = true;
                            property = parseComputedMember();
                            expr = new WrappingNode(startToken).finishMemberExpression('[', expr, property);
                        } else if (lookahead.type === Token.Template && lookahead.head) {
                            quasi = parseTemplateLiteral();
                            expr = new WrappingNode(startToken).finishTaggedTemplateExpression(expr, quasi);
                        } else {
                            break;
                        }
                    }
                    state.allowIn = previousAllowIn;
                    return expr;
                }
                function parseLeftHandSideExpression() {
                    var quasi, expr, property, startToken;
                    assert(assert._expr(assert._capt(assert._capt(state, 'arguments/0/object').allowIn, 'arguments/0'), {
                        content: 'assert(state.allowIn, \'callee of new expression always allow in keyword.\')',
                        filepath: 'node_modules/esprima/esprima.js',
                        line: 3448
                    }), 'callee of new expression always allow in keyword.');
                    startToken = lookahead;
                    if (matchKeyword('super') && state.inFunctionBody) {
                        expr = new Node();
                        lex();
                        expr = expr.finishSuper();
                        if (!match('[') && !match('.')) {
                            throwUnexpectedToken(lookahead);
                        }
                    } else {
                        expr = inheritCoverGrammar(matchKeyword('new') ? parseNewExpression : parsePrimaryExpression);
                    }
                    for (;;) {
                        if (match('[')) {
                            isBindingElement = false;
                            isAssignmentTarget = true;
                            property = parseComputedMember();
                            expr = new WrappingNode(startToken).finishMemberExpression('[', expr, property);
                        } else if (match('.')) {
                            isBindingElement = false;
                            isAssignmentTarget = true;
                            property = parseNonComputedMember();
                            expr = new WrappingNode(startToken).finishMemberExpression('.', expr, property);
                        } else if (lookahead.type === Token.Template && lookahead.head) {
                            quasi = parseTemplateLiteral();
                            expr = new WrappingNode(startToken).finishTaggedTemplateExpression(expr, quasi);
                        } else {
                            break;
                        }
                    }
                    return expr;
                }
                function parsePostfixExpression() {
                    var expr, token, startToken = lookahead;
                    expr = inheritCoverGrammar(parseLeftHandSideExpressionAllowCall);
                    if (!hasLineTerminator && lookahead.type === Token.Punctuator) {
                        if (match('++') || match('--')) {
                            if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {
                                tolerateError(Messages.StrictLHSPostfix);
                            }
                            if (!isAssignmentTarget) {
                                tolerateError(Messages.InvalidLHSInAssignment);
                            }
                            isAssignmentTarget = isBindingElement = false;
                            token = lex();
                            expr = new WrappingNode(startToken).finishPostfixExpression(token.value, expr);
                        }
                    }
                    return expr;
                }
                function parseUnaryExpression() {
                    var token, expr, startToken;
                    if (lookahead.type !== Token.Punctuator && lookahead.type !== Token.Keyword) {
                        expr = parsePostfixExpression();
                    } else if (match('++') || match('--')) {
                        startToken = lookahead;
                        token = lex();
                        expr = inheritCoverGrammar(parseUnaryExpression);
                        if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {
                            tolerateError(Messages.StrictLHSPrefix);
                        }
                        if (!isAssignmentTarget) {
                            tolerateError(Messages.InvalidLHSInAssignment);
                        }
                        expr = new WrappingNode(startToken).finishUnaryExpression(token.value, expr);
                        isAssignmentTarget = isBindingElement = false;
                    } else if (match('+') || match('-') || match('~') || match('!')) {
                        startToken = lookahead;
                        token = lex();
                        expr = inheritCoverGrammar(parseUnaryExpression);
                        expr = new WrappingNode(startToken).finishUnaryExpression(token.value, expr);
                        isAssignmentTarget = isBindingElement = false;
                    } else if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {
                        startToken = lookahead;
                        token = lex();
                        expr = inheritCoverGrammar(parseUnaryExpression);
                        expr = new WrappingNode(startToken).finishUnaryExpression(token.value, expr);
                        if (strict && expr.operator === 'delete' && expr.argument.type === Syntax.Identifier) {
                            tolerateError(Messages.StrictDelete);
                        }
                        isAssignmentTarget = isBindingElement = false;
                    } else {
                        expr = parsePostfixExpression();
                    }
                    return expr;
                }
                function binaryPrecedence(token, allowIn) {
                    var prec = 0;
                    if (token.type !== Token.Punctuator && token.type !== Token.Keyword) {
                        return 0;
                    }
                    switch (token.value) {
                    case '||':
                        prec = 1;
                        break;
                    case '&&':
                        prec = 2;
                        break;
                    case '|':
                        prec = 3;
                        break;
                    case '^':
                        prec = 4;
                        break;
                    case '&':
                        prec = 5;
                        break;
                    case '==':
                    case '!=':
                    case '===':
                    case '!==':
                        prec = 6;
                        break;
                    case '<':
                    case '>':
                    case '<=':
                    case '>=':
                    case 'instanceof':
                        prec = 7;
                        break;
                    case 'in':
                        prec = allowIn ? 7 : 0;
                        break;
                    case '<<':
                    case '>>':
                    case '>>>':
                        prec = 8;
                        break;
                    case '+':
                    case '-':
                        prec = 9;
                        break;
                    case '*':
                    case '/':
                    case '%':
                        prec = 11;
                        break;
                    default:
                        break;
                    }
                    return prec;
                }
                function parseBinaryExpression() {
                    var marker, markers, expr, token, prec, stack, right, operator, left, i;
                    marker = lookahead;
                    left = inheritCoverGrammar(parseUnaryExpression);
                    token = lookahead;
                    prec = binaryPrecedence(token, state.allowIn);
                    if (prec === 0) {
                        return left;
                    }
                    isAssignmentTarget = isBindingElement = false;
                    token.prec = prec;
                    lex();
                    markers = [
                        marker,
                        lookahead
                    ];
                    right = isolateCoverGrammar(parseUnaryExpression);
                    stack = [
                        left,
                        token,
                        right
                    ];
                    while ((prec = binaryPrecedence(lookahead, state.allowIn)) > 0) {
                        while (stack.length > 2 && prec <= stack[stack.length - 2].prec) {
                            right = stack.pop();
                            operator = stack.pop().value;
                            left = stack.pop();
                            markers.pop();
                            expr = new WrappingNode(markers[markers.length - 1]).finishBinaryExpression(operator, left, right);
                            stack.push(expr);
                        }
                        token = lex();
                        token.prec = prec;
                        stack.push(token);
                        markers.push(lookahead);
                        expr = isolateCoverGrammar(parseUnaryExpression);
                        stack.push(expr);
                    }
                    i = stack.length - 1;
                    expr = stack[i];
                    markers.pop();
                    while (i > 1) {
                        expr = new WrappingNode(markers.pop()).finishBinaryExpression(stack[i - 1].value, stack[i - 2], expr);
                        i -= 2;
                    }
                    return expr;
                }
                function parseConditionalExpression() {
                    var expr, previousAllowIn, consequent, alternate, startToken;
                    startToken = lookahead;
                    expr = inheritCoverGrammar(parseBinaryExpression);
                    if (match('?')) {
                        lex();
                        previousAllowIn = state.allowIn;
                        state.allowIn = true;
                        consequent = isolateCoverGrammar(parseAssignmentExpression);
                        state.allowIn = previousAllowIn;
                        expect(':');
                        alternate = isolateCoverGrammar(parseAssignmentExpression);
                        expr = new WrappingNode(startToken).finishConditionalExpression(expr, consequent, alternate);
                        isAssignmentTarget = isBindingElement = false;
                    }
                    return expr;
                }
                function parseConciseBody() {
                    if (match('{')) {
                        return parseFunctionSourceElements();
                    }
                    return isolateCoverGrammar(parseAssignmentExpression);
                }
                function checkPatternParam(options, param) {
                    var i;
                    switch (param.type) {
                    case Syntax.Identifier:
                        validateParam(options, param, param.name);
                        break;
                    case Syntax.RestElement:
                        checkPatternParam(options, param.argument);
                        break;
                    case Syntax.AssignmentPattern:
                        checkPatternParam(options, param.left);
                        break;
                    case Syntax.ArrayPattern:
                        for (i = 0; i < param.elements.length; i++) {
                            if (param.elements[i] !== null) {
                                checkPatternParam(options, param.elements[i]);
                            }
                        }
                        break;
                    case Syntax.YieldExpression:
                        break;
                    default:
                        assert(assert._expr(assert._capt(assert._capt(assert._capt(param, 'arguments/0/left/object').type, 'arguments/0/left') === assert._capt(assert._capt(Syntax, 'arguments/0/right/object').ObjectPattern, 'arguments/0/right'), 'arguments/0'), {
                            content: 'assert(param.type === Syntax.ObjectPattern, \'Invalid type\')',
                            filepath: 'node_modules/esprima/esprima.js',
                            line: 3743
                        }), 'Invalid type');
                        for (i = 0; i < param.properties.length; i++) {
                            checkPatternParam(options, param.properties[i].value);
                        }
                        break;
                    }
                }
                function reinterpretAsCoverFormalsList(expr) {
                    var i, len, param, params, defaults, defaultCount, options, token;
                    defaults = [];
                    defaultCount = 0;
                    params = [expr];
                    switch (expr.type) {
                    case Syntax.Identifier:
                        break;
                    case PlaceHolders.ArrowParameterPlaceHolder:
                        params = expr.params;
                        break;
                    default:
                        return null;
                    }
                    options = { paramSet: {} };
                    for (i = 0, len = params.length; i < len; i += 1) {
                        param = params[i];
                        switch (param.type) {
                        case Syntax.AssignmentPattern:
                            params[i] = param.left;
                            if (param.right.type === Syntax.YieldExpression) {
                                if (param.right.argument) {
                                    throwUnexpectedToken(lookahead);
                                }
                                param.right.type = Syntax.Identifier;
                                param.right.name = 'yield';
                                delete param.right.argument;
                                delete param.right.delegate;
                            }
                            defaults.push(param.right);
                            ++defaultCount;
                            checkPatternParam(options, param.left);
                            break;
                        default:
                            checkPatternParam(options, param);
                            params[i] = param;
                            defaults.push(null);
                            break;
                        }
                    }
                    if (strict || !state.allowYield) {
                        for (i = 0, len = params.length; i < len; i += 1) {
                            param = params[i];
                            if (param.type === Syntax.YieldExpression) {
                                throwUnexpectedToken(lookahead);
                            }
                        }
                    }
                    if (options.message === Messages.StrictParamDupe) {
                        token = strict ? options.stricted : options.firstRestricted;
                        throwUnexpectedToken(token, options.message);
                    }
                    if (defaultCount === 0) {
                        defaults = [];
                    }
                    return {
                        params: params,
                        defaults: defaults,
                        stricted: options.stricted,
                        firstRestricted: options.firstRestricted,
                        message: options.message
                    };
                }
                function parseArrowFunctionExpression(options, node) {
                    var previousStrict, previousAllowYield, body;
                    if (hasLineTerminator) {
                        tolerateUnexpectedToken(lookahead);
                    }
                    expect('=>');
                    previousStrict = strict;
                    previousAllowYield = state.allowYield;
                    state.allowYield = true;
                    body = parseConciseBody();
                    if (strict && options.firstRestricted) {
                        throwUnexpectedToken(options.firstRestricted, options.message);
                    }
                    if (strict && options.stricted) {
                        tolerateUnexpectedToken(options.stricted, options.message);
                    }
                    strict = previousStrict;
                    state.allowYield = previousAllowYield;
                    return node.finishArrowFunctionExpression(options.params, options.defaults, body, body.type !== Syntax.BlockStatement);
                }
                function parseYieldExpression() {
                    var argument, expr, delegate, previousAllowYield;
                    argument = null;
                    expr = new Node();
                    delegate = false;
                    expectKeyword('yield');
                    if (!hasLineTerminator) {
                        previousAllowYield = state.allowYield;
                        state.allowYield = false;
                        delegate = match('*');
                        if (delegate) {
                            lex();
                            argument = parseAssignmentExpression();
                        } else {
                            if (!match(';') && !match('}') && !match(')') && lookahead.type !== Token.EOF) {
                                argument = parseAssignmentExpression();
                            }
                        }
                        state.allowYield = previousAllowYield;
                    }
                    return expr.finishYieldExpression(argument, delegate);
                }
                function parseAssignmentExpression() {
                    var token, expr, right, list, startToken;
                    startToken = lookahead;
                    token = lookahead;
                    if (!state.allowYield && matchKeyword('yield')) {
                        return parseYieldExpression();
                    }
                    expr = parseConditionalExpression();
                    if (expr.type === PlaceHolders.ArrowParameterPlaceHolder || match('=>')) {
                        isAssignmentTarget = isBindingElement = false;
                        list = reinterpretAsCoverFormalsList(expr);
                        if (list) {
                            firstCoverInitializedNameError = null;
                            return parseArrowFunctionExpression(list, new WrappingNode(startToken));
                        }
                        return expr;
                    }
                    if (matchAssign()) {
                        if (!isAssignmentTarget) {
                            tolerateError(Messages.InvalidLHSInAssignment);
                        }
                        if (strict && expr.type === Syntax.Identifier) {
                            if (isRestrictedWord(expr.name)) {
                                tolerateUnexpectedToken(token, Messages.StrictLHSAssignment);
                            }
                            if (isStrictModeReservedWord(expr.name)) {
                                tolerateUnexpectedToken(token, Messages.StrictReservedWord);
                            }
                        }
                        if (!match('=')) {
                            isAssignmentTarget = isBindingElement = false;
                        } else {
                            reinterpretExpressionAsPattern(expr);
                        }
                        token = lex();
                        right = isolateCoverGrammar(parseAssignmentExpression);
                        expr = new WrappingNode(startToken).finishAssignmentExpression(token.value, expr, right);
                        firstCoverInitializedNameError = null;
                    }
                    return expr;
                }
                function parseExpression() {
                    var expr, startToken = lookahead, expressions;
                    expr = isolateCoverGrammar(parseAssignmentExpression);
                    if (match(',')) {
                        expressions = [expr];
                        while (startIndex < length) {
                            if (!match(',')) {
                                break;
                            }
                            lex();
                            expressions.push(isolateCoverGrammar(parseAssignmentExpression));
                        }
                        expr = new WrappingNode(startToken).finishSequenceExpression(expressions);
                    }
                    return expr;
                }
                function parseStatementListItem() {
                    if (lookahead.type === Token.Keyword) {
                        switch (lookahead.value) {
                        case 'export':
                            if (state.sourceType !== 'module') {
                                tolerateUnexpectedToken(lookahead, Messages.IllegalExportDeclaration);
                            }
                            return parseExportDeclaration();
                        case 'import':
                            if (state.sourceType !== 'module') {
                                tolerateUnexpectedToken(lookahead, Messages.IllegalImportDeclaration);
                            }
                            return parseImportDeclaration();
                        case 'const':
                            return parseLexicalDeclaration({ inFor: false });
                        case 'function':
                            return parseFunctionDeclaration(new Node());
                        case 'class':
                            return parseClassDeclaration();
                        }
                    }
                    if (matchKeyword('let') && isLexicalDeclaration()) {
                        return parseLexicalDeclaration({ inFor: false });
                    }
                    return parseStatement();
                }
                function parseStatementList() {
                    var list = [];
                    while (startIndex < length) {
                        if (match('}')) {
                            break;
                        }
                        list.push(parseStatementListItem());
                    }
                    return list;
                }
                function parseBlock() {
                    var block, node = new Node();
                    expect('{');
                    block = parseStatementList();
                    expect('}');
                    return node.finishBlockStatement(block);
                }
                function parseVariableIdentifier(kind) {
                    var token, node = new Node();
                    token = lex();
                    if (token.type === Token.Keyword && token.value === 'yield') {
                        if (strict) {
                            tolerateUnexpectedToken(token, Messages.StrictReservedWord);
                        }
                        if (!state.allowYield) {
                            throwUnexpectedToken(token);
                        }
                    } else if (token.type !== Token.Identifier) {
                        if (strict && token.type === Token.Keyword && isStrictModeReservedWord(token.value)) {
                            tolerateUnexpectedToken(token, Messages.StrictReservedWord);
                        } else {
                            if (strict || token.value !== 'let' || kind !== 'var') {
                                throwUnexpectedToken(token);
                            }
                        }
                    } else if (state.sourceType === 'module' && token.type === Token.Identifier && token.value === 'await') {
                        tolerateUnexpectedToken(token);
                    }
                    return node.finishIdentifier(token.value);
                }
                function parseVariableDeclaration(options) {
                    var init = null, id, node = new Node(), params = [];
                    id = parsePattern(params, 'var');
                    if (strict && isRestrictedWord(id.name)) {
                        tolerateError(Messages.StrictVarName);
                    }
                    if (match('=')) {
                        lex();
                        init = isolateCoverGrammar(parseAssignmentExpression);
                    } else if (id.type !== Syntax.Identifier && !options.inFor) {
                        expect('=');
                    }
                    return node.finishVariableDeclarator(id, init);
                }
                function parseVariableDeclarationList(options) {
                    var opt, list;
                    opt = { inFor: options.inFor };
                    list = [parseVariableDeclaration(opt)];
                    while (match(',')) {
                        lex();
                        list.push(parseVariableDeclaration(opt));
                    }
                    return list;
                }
                function parseVariableStatement(node) {
                    var declarations;
                    expectKeyword('var');
                    declarations = parseVariableDeclarationList({ inFor: false });
                    consumeSemicolon();
                    return node.finishVariableDeclaration(declarations);
                }
                function parseLexicalBinding(kind, options) {
                    var init = null, id, node = new Node(), params = [];
                    id = parsePattern(params, kind);
                    if (strict && id.type === Syntax.Identifier && isRestrictedWord(id.name)) {
                        tolerateError(Messages.StrictVarName);
                    }
                    if (kind === 'const') {
                        if (!matchKeyword('in') && !matchContextualKeyword('of')) {
                            expect('=');
                            init = isolateCoverGrammar(parseAssignmentExpression);
                        }
                    } else if (!options.inFor && id.type !== Syntax.Identifier || match('=')) {
                        expect('=');
                        init = isolateCoverGrammar(parseAssignmentExpression);
                    }
                    return node.finishVariableDeclarator(id, init);
                }
                function parseBindingList(kind, options) {
                    var list = [parseLexicalBinding(kind, options)];
                    while (match(',')) {
                        lex();
                        list.push(parseLexicalBinding(kind, options));
                    }
                    return list;
                }
                function tokenizerState() {
                    return {
                        index: index,
                        lineNumber: lineNumber,
                        lineStart: lineStart,
                        hasLineTerminator: hasLineTerminator,
                        lastIndex: lastIndex,
                        lastLineNumber: lastLineNumber,
                        lastLineStart: lastLineStart,
                        startIndex: startIndex,
                        startLineNumber: startLineNumber,
                        startLineStart: startLineStart,
                        lookahead: lookahead,
                        tokenCount: extra.tokens ? extra.tokens.length : 0
                    };
                }
                function resetTokenizerState(ts) {
                    index = ts.index;
                    lineNumber = ts.lineNumber;
                    lineStart = ts.lineStart;
                    hasLineTerminator = ts.hasLineTerminator;
                    lastIndex = ts.lastIndex;
                    lastLineNumber = ts.lastLineNumber;
                    lastLineStart = ts.lastLineStart;
                    startIndex = ts.startIndex;
                    startLineNumber = ts.startLineNumber;
                    startLineStart = ts.startLineStart;
                    lookahead = ts.lookahead;
                    if (extra.tokens) {
                        extra.tokens.splice(ts.tokenCount, extra.tokens.length);
                    }
                }
                function isLexicalDeclaration() {
                    var lexical, ts;
                    ts = tokenizerState();
                    lex();
                    lexical = lookahead.type === Token.Identifier || match('[') || match('{') || matchKeyword('let') || matchKeyword('yield');
                    resetTokenizerState(ts);
                    return lexical;
                }
                function parseLexicalDeclaration(options) {
                    var kind, declarations, node = new Node();
                    kind = lex().value;
                    assert(assert._expr(assert._capt(assert._capt(assert._capt(kind, 'arguments/0/left/left') === 'let', 'arguments/0/left') || assert._capt(assert._capt(kind, 'arguments/0/right/left') === 'const', 'arguments/0/right'), 'arguments/0'), {
                        content: 'assert(kind === \'let\' || kind === \'const\', \'Lexical declaration must be either let or const\')',
                        filepath: 'node_modules/esprima/esprima.js',
                        line: 4178
                    }), 'Lexical declaration must be either let or const');
                    declarations = parseBindingList(kind, options);
                    consumeSemicolon();
                    return node.finishLexicalDeclaration(declarations, kind);
                }
                function parseRestElement(params) {
                    var param, node = new Node();
                    lex();
                    if (match('{')) {
                        throwError(Messages.ObjectPatternAsRestParameter);
                    }
                    params.push(lookahead);
                    param = parseVariableIdentifier();
                    if (match('=')) {
                        throwError(Messages.DefaultRestParameter);
                    }
                    if (!match(')')) {
                        throwError(Messages.ParameterAfterRestParameter);
                    }
                    return node.finishRestElement(param);
                }
                function parseEmptyStatement(node) {
                    expect(';');
                    return node.finishEmptyStatement();
                }
                function parseExpressionStatement(node) {
                    var expr = parseExpression();
                    consumeSemicolon();
                    return node.finishExpressionStatement(expr);
                }
                function parseIfStatement(node) {
                    var test, consequent, alternate;
                    expectKeyword('if');
                    expect('(');
                    test = parseExpression();
                    expect(')');
                    consequent = parseStatement();
                    if (matchKeyword('else')) {
                        lex();
                        alternate = parseStatement();
                    } else {
                        alternate = null;
                    }
                    return node.finishIfStatement(test, consequent, alternate);
                }
                function parseDoWhileStatement(node) {
                    var body, test, oldInIteration;
                    expectKeyword('do');
                    oldInIteration = state.inIteration;
                    state.inIteration = true;
                    body = parseStatement();
                    state.inIteration = oldInIteration;
                    expectKeyword('while');
                    expect('(');
                    test = parseExpression();
                    expect(')');
                    if (match(';')) {
                        lex();
                    }
                    return node.finishDoWhileStatement(body, test);
                }
                function parseWhileStatement(node) {
                    var test, body, oldInIteration;
                    expectKeyword('while');
                    expect('(');
                    test = parseExpression();
                    expect(')');
                    oldInIteration = state.inIteration;
                    state.inIteration = true;
                    body = parseStatement();
                    state.inIteration = oldInIteration;
                    return node.finishWhileStatement(test, body);
                }
                function parseForStatement(node) {
                    var init, forIn, initSeq, initStartToken, test, update, left, right, kind, declarations, body, oldInIteration, previousAllowIn = state.allowIn;
                    init = test = update = null;
                    forIn = true;
                    expectKeyword('for');
                    expect('(');
                    if (match(';')) {
                        lex();
                    } else {
                        if (matchKeyword('var')) {
                            init = new Node();
                            lex();
                            state.allowIn = false;
                            declarations = parseVariableDeclarationList({ inFor: true });
                            state.allowIn = previousAllowIn;
                            if (declarations.length === 1 && matchKeyword('in')) {
                                init = init.finishVariableDeclaration(declarations);
                                lex();
                                left = init;
                                right = parseExpression();
                                init = null;
                            } else if (declarations.length === 1 && declarations[0].init === null && matchContextualKeyword('of')) {
                                init = init.finishVariableDeclaration(declarations);
                                lex();
                                left = init;
                                right = parseAssignmentExpression();
                                init = null;
                                forIn = false;
                            } else {
                                init = init.finishVariableDeclaration(declarations);
                                expect(';');
                            }
                        } else if (matchKeyword('const') || matchKeyword('let')) {
                            init = new Node();
                            kind = lex().value;
                            if (!strict && lookahead.value === 'in') {
                                init = init.finishIdentifier(kind);
                                lex();
                                left = init;
                                right = parseExpression();
                                init = null;
                            } else {
                                state.allowIn = false;
                                declarations = parseBindingList(kind, { inFor: true });
                                state.allowIn = previousAllowIn;
                                if (declarations.length === 1 && declarations[0].init === null && matchKeyword('in')) {
                                    init = init.finishLexicalDeclaration(declarations, kind);
                                    lex();
                                    left = init;
                                    right = parseExpression();
                                    init = null;
                                } else if (declarations.length === 1 && declarations[0].init === null && matchContextualKeyword('of')) {
                                    init = init.finishLexicalDeclaration(declarations, kind);
                                    lex();
                                    left = init;
                                    right = parseAssignmentExpression();
                                    init = null;
                                    forIn = false;
                                } else {
                                    consumeSemicolon();
                                    init = init.finishLexicalDeclaration(declarations, kind);
                                }
                            }
                        } else {
                            initStartToken = lookahead;
                            state.allowIn = false;
                            init = inheritCoverGrammar(parseAssignmentExpression);
                            state.allowIn = previousAllowIn;
                            if (matchKeyword('in')) {
                                if (!isAssignmentTarget) {
                                    tolerateError(Messages.InvalidLHSInForIn);
                                }
                                lex();
                                reinterpretExpressionAsPattern(init);
                                left = init;
                                right = parseExpression();
                                init = null;
                            } else if (matchContextualKeyword('of')) {
                                if (!isAssignmentTarget) {
                                    tolerateError(Messages.InvalidLHSInForLoop);
                                }
                                lex();
                                reinterpretExpressionAsPattern(init);
                                left = init;
                                right = parseAssignmentExpression();
                                init = null;
                                forIn = false;
                            } else {
                                if (match(',')) {
                                    initSeq = [init];
                                    while (match(',')) {
                                        lex();
                                        initSeq.push(isolateCoverGrammar(parseAssignmentExpression));
                                    }
                                    init = new WrappingNode(initStartToken).finishSequenceExpression(initSeq);
                                }
                                expect(';');
                            }
                        }
                    }
                    if (typeof left === 'undefined') {
                        if (!match(';')) {
                            test = parseExpression();
                        }
                        expect(';');
                        if (!match(')')) {
                            update = parseExpression();
                        }
                    }
                    expect(')');
                    oldInIteration = state.inIteration;
                    state.inIteration = true;
                    body = isolateCoverGrammar(parseStatement);
                    state.inIteration = oldInIteration;
                    return typeof left === 'undefined' ? node.finishForStatement(init, test, update, body) : forIn ? node.finishForInStatement(left, right, body) : node.finishForOfStatement(left, right, body);
                }
                function parseContinueStatement(node) {
                    var label = null, key;
                    expectKeyword('continue');
                    if (source.charCodeAt(startIndex) === 59) {
                        lex();
                        if (!state.inIteration) {
                            throwError(Messages.IllegalContinue);
                        }
                        return node.finishContinueStatement(null);
                    }
                    if (hasLineTerminator) {
                        if (!state.inIteration) {
                            throwError(Messages.IllegalContinue);
                        }
                        return node.finishContinueStatement(null);
                    }
                    if (lookahead.type === Token.Identifier) {
                        label = parseVariableIdentifier();
                        key = '$' + label.name;
                        if (!Object.prototype.hasOwnProperty.call(state.labelSet, key)) {
                            throwError(Messages.UnknownLabel, label.name);
                        }
                    }
                    consumeSemicolon();
                    if (label === null && !state.inIteration) {
                        throwError(Messages.IllegalContinue);
                    }
                    return node.finishContinueStatement(label);
                }
                function parseBreakStatement(node) {
                    var label = null, key;
                    expectKeyword('break');
                    if (source.charCodeAt(lastIndex) === 59) {
                        lex();
                        if (!(state.inIteration || state.inSwitch)) {
                            throwError(Messages.IllegalBreak);
                        }
                        return node.finishBreakStatement(null);
                    }
                    if (hasLineTerminator) {
                        if (!(state.inIteration || state.inSwitch)) {
                            throwError(Messages.IllegalBreak);
                        }
                    } else if (lookahead.type === Token.Identifier) {
                        label = parseVariableIdentifier();
                        key = '$' + label.name;
                        if (!Object.prototype.hasOwnProperty.call(state.labelSet, key)) {
                            throwError(Messages.UnknownLabel, label.name);
                        }
                    }
                    consumeSemicolon();
                    if (label === null && !(state.inIteration || state.inSwitch)) {
                        throwError(Messages.IllegalBreak);
                    }
                    return node.finishBreakStatement(label);
                }
                function parseReturnStatement(node) {
                    var argument = null;
                    expectKeyword('return');
                    if (!state.inFunctionBody) {
                        tolerateError(Messages.IllegalReturn);
                    }
                    if (source.charCodeAt(lastIndex) === 32) {
                        if (isIdentifierStart(source.charCodeAt(lastIndex + 1))) {
                            argument = parseExpression();
                            consumeSemicolon();
                            return node.finishReturnStatement(argument);
                        }
                    }
                    if (hasLineTerminator) {
                        return node.finishReturnStatement(null);
                    }
                    if (!match(';')) {
                        if (!match('}') && lookahead.type !== Token.EOF) {
                            argument = parseExpression();
                        }
                    }
                    consumeSemicolon();
                    return node.finishReturnStatement(argument);
                }
                function parseWithStatement(node) {
                    var object, body;
                    if (strict) {
                        tolerateError(Messages.StrictModeWith);
                    }
                    expectKeyword('with');
                    expect('(');
                    object = parseExpression();
                    expect(')');
                    body = parseStatement();
                    return node.finishWithStatement(object, body);
                }
                function parseSwitchCase() {
                    var test, consequent = [], statement, node = new Node();
                    if (matchKeyword('default')) {
                        lex();
                        test = null;
                    } else {
                        expectKeyword('case');
                        test = parseExpression();
                    }
                    expect(':');
                    while (startIndex < length) {
                        if (match('}') || matchKeyword('default') || matchKeyword('case')) {
                            break;
                        }
                        statement = parseStatementListItem();
                        consequent.push(statement);
                    }
                    return node.finishSwitchCase(test, consequent);
                }
                function parseSwitchStatement(node) {
                    var discriminant, cases, clause, oldInSwitch, defaultFound;
                    expectKeyword('switch');
                    expect('(');
                    discriminant = parseExpression();
                    expect(')');
                    expect('{');
                    cases = [];
                    if (match('}')) {
                        lex();
                        return node.finishSwitchStatement(discriminant, cases);
                    }
                    oldInSwitch = state.inSwitch;
                    state.inSwitch = true;
                    defaultFound = false;
                    while (startIndex < length) {
                        if (match('}')) {
                            break;
                        }
                        clause = parseSwitchCase();
                        if (clause.test === null) {
                            if (defaultFound) {
                                throwError(Messages.MultipleDefaultsInSwitch);
                            }
                            defaultFound = true;
                        }
                        cases.push(clause);
                    }
                    state.inSwitch = oldInSwitch;
                    expect('}');
                    return node.finishSwitchStatement(discriminant, cases);
                }
                function parseThrowStatement(node) {
                    var argument;
                    expectKeyword('throw');
                    if (hasLineTerminator) {
                        throwError(Messages.NewlineAfterThrow);
                    }
                    argument = parseExpression();
                    consumeSemicolon();
                    return node.finishThrowStatement(argument);
                }
                function parseCatchClause() {
                    var param, params = [], paramMap = {}, key, i, body, node = new Node();
                    expectKeyword('catch');
                    expect('(');
                    if (match(')')) {
                        throwUnexpectedToken(lookahead);
                    }
                    param = parsePattern(params);
                    for (i = 0; i < params.length; i++) {
                        key = '$' + params[i].value;
                        if (Object.prototype.hasOwnProperty.call(paramMap, key)) {
                            tolerateError(Messages.DuplicateBinding, params[i].value);
                        }
                        paramMap[key] = true;
                    }
                    if (strict && isRestrictedWord(param.name)) {
                        tolerateError(Messages.StrictCatchVariable);
                    }
                    expect(')');
                    body = parseBlock();
                    return node.finishCatchClause(param, body);
                }
                function parseTryStatement(node) {
                    var block, handler = null, finalizer = null;
                    expectKeyword('try');
                    block = parseBlock();
                    if (matchKeyword('catch')) {
                        handler = parseCatchClause();
                    }
                    if (matchKeyword('finally')) {
                        lex();
                        finalizer = parseBlock();
                    }
                    if (!handler && !finalizer) {
                        throwError(Messages.NoCatchOrFinally);
                    }
                    return node.finishTryStatement(block, handler, finalizer);
                }
                function parseDebuggerStatement(node) {
                    expectKeyword('debugger');
                    consumeSemicolon();
                    return node.finishDebuggerStatement();
                }
                function parseStatement() {
                    var type = lookahead.type, expr, labeledBody, key, node;
                    if (type === Token.EOF) {
                        throwUnexpectedToken(lookahead);
                    }
                    if (type === Token.Punctuator && lookahead.value === '{') {
                        return parseBlock();
                    }
                    isAssignmentTarget = isBindingElement = true;
                    node = new Node();
                    if (type === Token.Punctuator) {
                        switch (lookahead.value) {
                        case ';':
                            return parseEmptyStatement(node);
                        case '(':
                            return parseExpressionStatement(node);
                        default:
                            break;
                        }
                    } else if (type === Token.Keyword) {
                        switch (lookahead.value) {
                        case 'break':
                            return parseBreakStatement(node);
                        case 'continue':
                            return parseContinueStatement(node);
                        case 'debugger':
                            return parseDebuggerStatement(node);
                        case 'do':
                            return parseDoWhileStatement(node);
                        case 'for':
                            return parseForStatement(node);
                        case 'function':
                            return parseFunctionDeclaration(node);
                        case 'if':
                            return parseIfStatement(node);
                        case 'return':
                            return parseReturnStatement(node);
                        case 'switch':
                            return parseSwitchStatement(node);
                        case 'throw':
                            return parseThrowStatement(node);
                        case 'try':
                            return parseTryStatement(node);
                        case 'var':
                            return parseVariableStatement(node);
                        case 'while':
                            return parseWhileStatement(node);
                        case 'with':
                            return parseWithStatement(node);
                        default:
                            break;
                        }
                    }
                    expr = parseExpression();
                    if (expr.type === Syntax.Identifier && match(':')) {
                        lex();
                        key = '$' + expr.name;
                        if (Object.prototype.hasOwnProperty.call(state.labelSet, key)) {
                            throwError(Messages.Redeclaration, 'Label', expr.name);
                        }
                        state.labelSet[key] = true;
                        labeledBody = parseStatement();
                        delete state.labelSet[key];
                        return node.finishLabeledStatement(expr, labeledBody);
                    }
                    consumeSemicolon();
                    return node.finishExpressionStatement(expr);
                }
                function parseFunctionSourceElements() {
                    var statement, body = [], token, directive, firstRestricted, oldLabelSet, oldInIteration, oldInSwitch, oldInFunctionBody, node = new Node();
                    expect('{');
                    while (startIndex < length) {
                        if (lookahead.type !== Token.StringLiteral) {
                            break;
                        }
                        token = lookahead;
                        statement = parseStatementListItem();
                        body.push(statement);
                        if (statement.expression.type !== Syntax.Literal) {
                            break;
                        }
                        directive = source.slice(token.start + 1, token.end - 1);
                        if (directive === 'use strict') {
                            strict = true;
                            if (firstRestricted) {
                                tolerateUnexpectedToken(firstRestricted, Messages.StrictOctalLiteral);
                            }
                        } else {
                            if (!firstRestricted && token.octal) {
                                firstRestricted = token;
                            }
                        }
                    }
                    oldLabelSet = state.labelSet;
                    oldInIteration = state.inIteration;
                    oldInSwitch = state.inSwitch;
                    oldInFunctionBody = state.inFunctionBody;
                    state.labelSet = {};
                    state.inIteration = false;
                    state.inSwitch = false;
                    state.inFunctionBody = true;
                    while (startIndex < length) {
                        if (match('}')) {
                            break;
                        }
                        body.push(parseStatementListItem());
                    }
                    expect('}');
                    state.labelSet = oldLabelSet;
                    state.inIteration = oldInIteration;
                    state.inSwitch = oldInSwitch;
                    state.inFunctionBody = oldInFunctionBody;
                    return node.finishBlockStatement(body);
                }
                function validateParam(options, param, name) {
                    var key = '$' + name;
                    if (strict) {
                        if (isRestrictedWord(name)) {
                            options.stricted = param;
                            options.message = Messages.StrictParamName;
                        }
                        if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {
                            options.stricted = param;
                            options.message = Messages.StrictParamDupe;
                        }
                    } else if (!options.firstRestricted) {
                        if (isRestrictedWord(name)) {
                            options.firstRestricted = param;
                            options.message = Messages.StrictParamName;
                        } else if (isStrictModeReservedWord(name)) {
                            options.firstRestricted = param;
                            options.message = Messages.StrictReservedWord;
                        } else if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {
                            options.stricted = param;
                            options.message = Messages.StrictParamDupe;
                        }
                    }
                    options.paramSet[key] = true;
                }
                function parseParam(options) {
                    var token, param, params = [], i, def;
                    token = lookahead;
                    if (token.value === '...') {
                        param = parseRestElement(params);
                        validateParam(options, param.argument, param.argument.name);
                        options.params.push(param);
                        options.defaults.push(null);
                        return false;
                    }
                    param = parsePatternWithDefault(params);
                    for (i = 0; i < params.length; i++) {
                        validateParam(options, params[i], params[i].value);
                    }
                    if (param.type === Syntax.AssignmentPattern) {
                        def = param.right;
                        param = param.left;
                        ++options.defaultCount;
                    }
                    options.params.push(param);
                    options.defaults.push(def);
                    return !match(')');
                }
                function parseParams(firstRestricted) {
                    var options;
                    options = {
                        params: [],
                        defaultCount: 0,
                        defaults: [],
                        firstRestricted: firstRestricted
                    };
                    expect('(');
                    if (!match(')')) {
                        options.paramSet = {};
                        while (startIndex < length) {
                            if (!parseParam(options)) {
                                break;
                            }
                            expect(',');
                        }
                    }
                    expect(')');
                    if (options.defaultCount === 0) {
                        options.defaults = [];
                    }
                    return {
                        params: options.params,
                        defaults: options.defaults,
                        stricted: options.stricted,
                        firstRestricted: options.firstRestricted,
                        message: options.message
                    };
                }
                function parseFunctionDeclaration(node, identifierIsOptional) {
                    var id = null, params = [], defaults = [], body, token, stricted, tmp, firstRestricted, message, previousStrict, isGenerator, previousAllowYield;
                    previousAllowYield = state.allowYield;
                    expectKeyword('function');
                    isGenerator = match('*');
                    if (isGenerator) {
                        lex();
                    }
                    if (!identifierIsOptional || !match('(')) {
                        token = lookahead;
                        id = parseVariableIdentifier();
                        if (strict) {
                            if (isRestrictedWord(token.value)) {
                                tolerateUnexpectedToken(token, Messages.StrictFunctionName);
                            }
                        } else {
                            if (isRestrictedWord(token.value)) {
                                firstRestricted = token;
                                message = Messages.StrictFunctionName;
                            } else if (isStrictModeReservedWord(token.value)) {
                                firstRestricted = token;
                                message = Messages.StrictReservedWord;
                            }
                        }
                    }
                    state.allowYield = !isGenerator;
                    tmp = parseParams(firstRestricted);
                    params = tmp.params;
                    defaults = tmp.defaults;
                    stricted = tmp.stricted;
                    firstRestricted = tmp.firstRestricted;
                    if (tmp.message) {
                        message = tmp.message;
                    }
                    previousStrict = strict;
                    body = parseFunctionSourceElements();
                    if (strict && firstRestricted) {
                        throwUnexpectedToken(firstRestricted, message);
                    }
                    if (strict && stricted) {
                        tolerateUnexpectedToken(stricted, message);
                    }
                    strict = previousStrict;
                    state.allowYield = previousAllowYield;
                    return node.finishFunctionDeclaration(id, params, defaults, body, isGenerator);
                }
                function parseFunctionExpression() {
                    var token, id = null, stricted, firstRestricted, message, tmp, params = [], defaults = [], body, previousStrict, node = new Node(), isGenerator, previousAllowYield;
                    previousAllowYield = state.allowYield;
                    expectKeyword('function');
                    isGenerator = match('*');
                    if (isGenerator) {
                        lex();
                    }
                    state.allowYield = !isGenerator;
                    if (!match('(')) {
                        token = lookahead;
                        id = !strict && !isGenerator && matchKeyword('yield') ? parseNonComputedProperty() : parseVariableIdentifier();
                        if (strict) {
                            if (isRestrictedWord(token.value)) {
                                tolerateUnexpectedToken(token, Messages.StrictFunctionName);
                            }
                        } else {
                            if (isRestrictedWord(token.value)) {
                                firstRestricted = token;
                                message = Messages.StrictFunctionName;
                            } else if (isStrictModeReservedWord(token.value)) {
                                firstRestricted = token;
                                message = Messages.StrictReservedWord;
                            }
                        }
                    }
                    tmp = parseParams(firstRestricted);
                    params = tmp.params;
                    defaults = tmp.defaults;
                    stricted = tmp.stricted;
                    firstRestricted = tmp.firstRestricted;
                    if (tmp.message) {
                        message = tmp.message;
                    }
                    previousStrict = strict;
                    body = parseFunctionSourceElements();
                    if (strict && firstRestricted) {
                        throwUnexpectedToken(firstRestricted, message);
                    }
                    if (strict && stricted) {
                        tolerateUnexpectedToken(stricted, message);
                    }
                    strict = previousStrict;
                    state.allowYield = previousAllowYield;
                    return node.finishFunctionExpression(id, params, defaults, body, isGenerator);
                }
                function parseClassBody() {
                    var classBody, token, isStatic, hasConstructor = false, body, method, computed, key;
                    classBody = new Node();
                    expect('{');
                    body = [];
                    while (!match('}')) {
                        if (match(';')) {
                            lex();
                        } else {
                            method = new Node();
                            token = lookahead;
                            isStatic = false;
                            computed = match('[');
                            if (match('*')) {
                                lex();
                            } else {
                                key = parseObjectPropertyKey();
                                if (key.name === 'static' && (lookaheadPropertyName() || match('*'))) {
                                    token = lookahead;
                                    isStatic = true;
                                    computed = match('[');
                                    if (match('*')) {
                                        lex();
                                    } else {
                                        key = parseObjectPropertyKey();
                                    }
                                }
                            }
                            method = tryParseMethodDefinition(token, key, computed, method);
                            if (method) {
                                method['static'] = isStatic;
                                if (method.kind === 'init') {
                                    method.kind = 'method';
                                }
                                if (!isStatic) {
                                    if (!method.computed && (method.key.name || method.key.value.toString()) === 'constructor') {
                                        if (method.kind !== 'method' || !method.method || method.value.generator) {
                                            throwUnexpectedToken(token, Messages.ConstructorSpecialMethod);
                                        }
                                        if (hasConstructor) {
                                            throwUnexpectedToken(token, Messages.DuplicateConstructor);
                                        } else {
                                            hasConstructor = true;
                                        }
                                        method.kind = 'constructor';
                                    }
                                } else {
                                    if (!method.computed && (method.key.name || method.key.value.toString()) === 'prototype') {
                                        throwUnexpectedToken(token, Messages.StaticPrototype);
                                    }
                                }
                                method.type = Syntax.MethodDefinition;
                                delete method.method;
                                delete method.shorthand;
                                body.push(method);
                            } else {
                                throwUnexpectedToken(lookahead);
                            }
                        }
                    }
                    lex();
                    return classBody.finishClassBody(body);
                }
                function parseClassDeclaration(identifierIsOptional) {
                    var id = null, superClass = null, classNode = new Node(), classBody, previousStrict = strict;
                    strict = true;
                    expectKeyword('class');
                    if (!identifierIsOptional || lookahead.type === Token.Identifier) {
                        id = parseVariableIdentifier();
                    }
                    if (matchKeyword('extends')) {
                        lex();
                        superClass = isolateCoverGrammar(parseLeftHandSideExpressionAllowCall);
                    }
                    classBody = parseClassBody();
                    strict = previousStrict;
                    return classNode.finishClassDeclaration(id, superClass, classBody);
                }
                function parseClassExpression() {
                    var id = null, superClass = null, classNode = new Node(), classBody, previousStrict = strict;
                    strict = true;
                    expectKeyword('class');
                    if (lookahead.type === Token.Identifier) {
                        id = parseVariableIdentifier();
                    }
                    if (matchKeyword('extends')) {
                        lex();
                        superClass = isolateCoverGrammar(parseLeftHandSideExpressionAllowCall);
                    }
                    classBody = parseClassBody();
                    strict = previousStrict;
                    return classNode.finishClassExpression(id, superClass, classBody);
                }
                function parseModuleSpecifier() {
                    var node = new Node();
                    if (lookahead.type !== Token.StringLiteral) {
                        throwError(Messages.InvalidModuleSpecifier);
                    }
                    return node.finishLiteral(lex());
                }
                function parseExportSpecifier() {
                    var exported, local, node = new Node(), def;
                    if (matchKeyword('default')) {
                        def = new Node();
                        lex();
                        local = def.finishIdentifier('default');
                    } else {
                        local = parseVariableIdentifier();
                    }
                    if (matchContextualKeyword('as')) {
                        lex();
                        exported = parseNonComputedProperty();
                    }
                    return node.finishExportSpecifier(local, exported);
                }
                function parseExportNamedDeclaration(node) {
                    var declaration = null, isExportFromIdentifier, src = null, specifiers = [];
                    if (lookahead.type === Token.Keyword) {
                        switch (lookahead.value) {
                        case 'let':
                        case 'const':
                            declaration = parseLexicalDeclaration({ inFor: false });
                            return node.finishExportNamedDeclaration(declaration, specifiers, null);
                        case 'var':
                        case 'class':
                        case 'function':
                            declaration = parseStatementListItem();
                            return node.finishExportNamedDeclaration(declaration, specifiers, null);
                        }
                    }
                    expect('{');
                    while (!match('}')) {
                        isExportFromIdentifier = isExportFromIdentifier || matchKeyword('default');
                        specifiers.push(parseExportSpecifier());
                        if (!match('}')) {
                            expect(',');
                            if (match('}')) {
                                break;
                            }
                        }
                    }
                    expect('}');
                    if (matchContextualKeyword('from')) {
                        lex();
                        src = parseModuleSpecifier();
                        consumeSemicolon();
                    } else if (isExportFromIdentifier) {
                        throwError(lookahead.value ? Messages.UnexpectedToken : Messages.MissingFromClause, lookahead.value);
                    } else {
                        consumeSemicolon();
                    }
                    return node.finishExportNamedDeclaration(declaration, specifiers, src);
                }
                function parseExportDefaultDeclaration(node) {
                    var declaration = null, expression = null;
                    expectKeyword('default');
                    if (matchKeyword('function')) {
                        declaration = parseFunctionDeclaration(new Node(), true);
                        return node.finishExportDefaultDeclaration(declaration);
                    }
                    if (matchKeyword('class')) {
                        declaration = parseClassDeclaration(true);
                        return node.finishExportDefaultDeclaration(declaration);
                    }
                    if (matchContextualKeyword('from')) {
                        throwError(Messages.UnexpectedToken, lookahead.value);
                    }
                    if (match('{')) {
                        expression = parseObjectInitializer();
                    } else if (match('[')) {
                        expression = parseArrayInitializer();
                    } else {
                        expression = parseAssignmentExpression();
                    }
                    consumeSemicolon();
                    return node.finishExportDefaultDeclaration(expression);
                }
                function parseExportAllDeclaration(node) {
                    var src;
                    expect('*');
                    if (!matchContextualKeyword('from')) {
                        throwError(lookahead.value ? Messages.UnexpectedToken : Messages.MissingFromClause, lookahead.value);
                    }
                    lex();
                    src = parseModuleSpecifier();
                    consumeSemicolon();
                    return node.finishExportAllDeclaration(src);
                }
                function parseExportDeclaration() {
                    var node = new Node();
                    if (state.inFunctionBody) {
                        throwError(Messages.IllegalExportDeclaration);
                    }
                    expectKeyword('export');
                    if (matchKeyword('default')) {
                        return parseExportDefaultDeclaration(node);
                    }
                    if (match('*')) {
                        return parseExportAllDeclaration(node);
                    }
                    return parseExportNamedDeclaration(node);
                }
                function parseImportSpecifier() {
                    var local, imported, node = new Node();
                    imported = parseNonComputedProperty();
                    if (matchContextualKeyword('as')) {
                        lex();
                        local = parseVariableIdentifier();
                    }
                    return node.finishImportSpecifier(local, imported);
                }
                function parseNamedImports() {
                    var specifiers = [];
                    expect('{');
                    while (!match('}')) {
                        specifiers.push(parseImportSpecifier());
                        if (!match('}')) {
                            expect(',');
                            if (match('}')) {
                                break;
                            }
                        }
                    }
                    expect('}');
                    return specifiers;
                }
                function parseImportDefaultSpecifier() {
                    var local, node = new Node();
                    local = parseNonComputedProperty();
                    return node.finishImportDefaultSpecifier(local);
                }
                function parseImportNamespaceSpecifier() {
                    var local, node = new Node();
                    expect('*');
                    if (!matchContextualKeyword('as')) {
                        throwError(Messages.NoAsAfterImportNamespace);
                    }
                    lex();
                    local = parseNonComputedProperty();
                    return node.finishImportNamespaceSpecifier(local);
                }
                function parseImportDeclaration() {
                    var specifiers = [], src, node = new Node();
                    if (state.inFunctionBody) {
                        throwError(Messages.IllegalImportDeclaration);
                    }
                    expectKeyword('import');
                    if (lookahead.type === Token.StringLiteral) {
                        src = parseModuleSpecifier();
                    } else {
                        if (match('{')) {
                            specifiers = specifiers.concat(parseNamedImports());
                        } else if (match('*')) {
                            specifiers.push(parseImportNamespaceSpecifier());
                        } else if (isIdentifierName(lookahead) && !matchKeyword('default')) {
                            specifiers.push(parseImportDefaultSpecifier());
                            if (match(',')) {
                                lex();
                                if (match('*')) {
                                    specifiers.push(parseImportNamespaceSpecifier());
                                } else if (match('{')) {
                                    specifiers = specifiers.concat(parseNamedImports());
                                } else {
                                    throwUnexpectedToken(lookahead);
                                }
                            }
                        } else {
                            throwUnexpectedToken(lex());
                        }
                        if (!matchContextualKeyword('from')) {
                            throwError(lookahead.value ? Messages.UnexpectedToken : Messages.MissingFromClause, lookahead.value);
                        }
                        lex();
                        src = parseModuleSpecifier();
                    }
                    consumeSemicolon();
                    return node.finishImportDeclaration(specifiers, src);
                }
                function parseScriptBody() {
                    var statement, body = [], token, directive, firstRestricted;
                    while (startIndex < length) {
                        token = lookahead;
                        if (token.type !== Token.StringLiteral) {
                            break;
                        }
                        statement = parseStatementListItem();
                        body.push(statement);
                        if (statement.expression.type !== Syntax.Literal) {
                            break;
                        }
                        directive = source.slice(token.start + 1, token.end - 1);
                        if (directive === 'use strict') {
                            strict = true;
                            if (firstRestricted) {
                                tolerateUnexpectedToken(firstRestricted, Messages.StrictOctalLiteral);
                            }
                        } else {
                            if (!firstRestricted && token.octal) {
                                firstRestricted = token;
                            }
                        }
                    }
                    while (startIndex < length) {
                        statement = parseStatementListItem();
                        if (typeof statement === 'undefined') {
                            break;
                        }
                        body.push(statement);
                    }
                    return body;
                }
                function parseProgram() {
                    var body, node;
                    peek();
                    node = new Node();
                    body = parseScriptBody();
                    return node.finishProgram(body, state.sourceType);
                }
                function filterTokenLocation() {
                    var i, entry, token, tokens = [];
                    for (i = 0; i < extra.tokens.length; ++i) {
                        entry = extra.tokens[i];
                        token = {
                            type: entry.type,
                            value: entry.value
                        };
                        if (entry.regex) {
                            token.regex = {
                                pattern: entry.regex.pattern,
                                flags: entry.regex.flags
                            };
                        }
                        if (extra.range) {
                            token.range = entry.range;
                        }
                        if (extra.loc) {
                            token.loc = entry.loc;
                        }
                        tokens.push(token);
                    }
                    extra.tokens = tokens;
                }
                function tokenize(code, options, delegate) {
                    var toString, tokens;
                    toString = String;
                    if (typeof code !== 'string' && !(code instanceof String)) {
                        code = toString(code);
                    }
                    source = code;
                    index = 0;
                    lineNumber = source.length > 0 ? 1 : 0;
                    lineStart = 0;
                    startIndex = index;
                    startLineNumber = lineNumber;
                    startLineStart = lineStart;
                    length = source.length;
                    lookahead = null;
                    state = {
                        allowIn: true,
                        allowYield: true,
                        labelSet: {},
                        inFunctionBody: false,
                        inIteration: false,
                        inSwitch: false,
                        lastCommentStart: -1,
                        curlyStack: []
                    };
                    extra = {};
                    options = options || {};
                    options.tokens = true;
                    extra.tokens = [];
                    extra.tokenValues = [];
                    extra.tokenize = true;
                    extra.delegate = delegate;
                    extra.openParenToken = -1;
                    extra.openCurlyToken = -1;
                    extra.range = typeof options.range === 'boolean' && options.range;
                    extra.loc = typeof options.loc === 'boolean' && options.loc;
                    if (typeof options.comment === 'boolean' && options.comment) {
                        extra.comments = [];
                    }
                    if (typeof options.tolerant === 'boolean' && options.tolerant) {
                        extra.errors = [];
                    }
                    try {
                        peek();
                        if (lookahead.type === Token.EOF) {
                            return extra.tokens;
                        }
                        lex();
                        while (lookahead.type !== Token.EOF) {
                            try {
                                lex();
                            } catch (lexError) {
                                if (extra.errors) {
                                    recordError(lexError);
                                    break;
                                } else {
                                    throw lexError;
                                }
                            }
                        }
                        tokens = extra.tokens;
                        if (typeof extra.errors !== 'undefined') {
                            tokens.errors = extra.errors;
                        }
                    } catch (e) {
                        throw e;
                    } finally {
                        extra = {};
                    }
                    return tokens;
                }
                function parse(code, options) {
                    var program, toString;
                    toString = String;
                    if (typeof code !== 'string' && !(code instanceof String)) {
                        code = toString(code);
                    }
                    source = code;
                    index = 0;
                    lineNumber = source.length > 0 ? 1 : 0;
                    lineStart = 0;
                    startIndex = index;
                    startLineNumber = lineNumber;
                    startLineStart = lineStart;
                    length = source.length;
                    lookahead = null;
                    state = {
                        allowIn: true,
                        allowYield: true,
                        labelSet: {},
                        inFunctionBody: false,
                        inIteration: false,
                        inSwitch: false,
                        lastCommentStart: -1,
                        curlyStack: [],
                        sourceType: 'script'
                    };
                    strict = false;
                    extra = {};
                    if (typeof options !== 'undefined') {
                        extra.range = typeof options.range === 'boolean' && options.range;
                        extra.loc = typeof options.loc === 'boolean' && options.loc;
                        extra.attachComment = typeof options.attachComment === 'boolean' && options.attachComment;
                        if (extra.loc && options.source !== null && options.source !== undefined) {
                            extra.source = toString(options.source);
                        }
                        if (typeof options.tokens === 'boolean' && options.tokens) {
                            extra.tokens = [];
                        }
                        if (typeof options.comment === 'boolean' && options.comment) {
                            extra.comments = [];
                        }
                        if (typeof options.tolerant === 'boolean' && options.tolerant) {
                            extra.errors = [];
                        }
                        if (extra.attachComment) {
                            extra.range = true;
                            extra.comments = [];
                            extra.bottomRightStack = [];
                            extra.trailingComments = [];
                            extra.leadingComments = [];
                        }
                        if (options.sourceType === 'module') {
                            state.sourceType = options.sourceType;
                            strict = true;
                        }
                    }
                    try {
                        program = parseProgram();
                        if (typeof extra.comments !== 'undefined') {
                            program.comments = extra.comments;
                        }
                        if (typeof extra.tokens !== 'undefined') {
                            filterTokenLocation();
                            program.tokens = extra.tokens;
                        }
                        if (typeof extra.errors !== 'undefined') {
                            program.errors = extra.errors;
                        }
                    } catch (e) {
                        throw e;
                    } finally {
                        extra = {};
                    }
                    return program;
                }
                exports.version = '2.7.2';
                exports.tokenize = tokenize;
                exports.parse = parse;
                exports.Syntax = function () {
                    var name, types = {};
                    if (typeof Object.create === 'function') {
                        types = Object.create(null);
                    }
                    for (name in Syntax) {
                        if (Syntax.hasOwnProperty(name)) {
                            types[name] = Syntax[name];
                        }
                    }
                    if (typeof Object.freeze === 'function') {
                        Object.freeze(types);
                    }
                    return types;
                }();
            }));
        },
        {}
    ],
    316: [
        function (require, module, exports) {
            'use strict';
            var createWhitelist = require('./lib/create-whitelist');
            var cloneWithWhitelist = require('./lib/clone-ast');
            function createCloneFunction(options) {
                return cloneWithWhitelist(createWhitelist(options));
            }
            var espurify = createCloneFunction();
            espurify.customize = createCloneFunction;
            espurify.cloneWithWhitelist = cloneWithWhitelist;
            module.exports = espurify;
        },
        {
            './lib/clone-ast': 318,
            './lib/create-whitelist': 319
        }
    ],
    317: [
        function (require, module, exports) {
            module.exports = {
                ArrayExpression: [
                    'type',
                    'elements'
                ],
                ArrayPattern: [
                    'type',
                    'elements'
                ],
                ArrowFunctionExpression: [
                    'type',
                    'id',
                    'params',
                    'body',
                    'generator',
                    'expression'
                ],
                AssignmentExpression: [
                    'type',
                    'operator',
                    'left',
                    'right'
                ],
                AssignmentPattern: [
                    'type',
                    'left',
                    'right'
                ],
                BinaryExpression: [
                    'type',
                    'operator',
                    'left',
                    'right'
                ],
                BlockStatement: [
                    'type',
                    'body'
                ],
                BreakStatement: [
                    'type',
                    'label'
                ],
                CallExpression: [
                    'type',
                    'callee',
                    'arguments'
                ],
                CatchClause: [
                    'type',
                    'param',
                    'guard',
                    'body'
                ],
                ClassBody: [
                    'type',
                    'body'
                ],
                ClassDeclaration: [
                    'type',
                    'id',
                    'superClass',
                    'body'
                ],
                ClassExpression: [
                    'type',
                    'id',
                    'superClass',
                    'body'
                ],
                ConditionalExpression: [
                    'type',
                    'test',
                    'alternate',
                    'consequent'
                ],
                ContinueStatement: [
                    'type',
                    'label'
                ],
                DebuggerStatement: ['type'],
                DoWhileStatement: [
                    'type',
                    'body',
                    'test'
                ],
                EmptyStatement: ['type'],
                ExportAllDeclaration: [
                    'type',
                    'source'
                ],
                ExportDefaultDeclaration: [
                    'type',
                    'declaration'
                ],
                ExportNamedDeclaration: [
                    'type',
                    'declaration',
                    'specifiers',
                    'source'
                ],
                ExportSpecifier: [
                    'type',
                    'exported',
                    'local'
                ],
                ExpressionStatement: [
                    'type',
                    'expression'
                ],
                ForInStatement: [
                    'type',
                    'left',
                    'right',
                    'body'
                ],
                ForOfStatement: [
                    'type',
                    'left',
                    'right',
                    'body'
                ],
                ForStatement: [
                    'type',
                    'init',
                    'test',
                    'update',
                    'body'
                ],
                FunctionDeclaration: [
                    'type',
                    'id',
                    'params',
                    'body',
                    'generator'
                ],
                FunctionExpression: [
                    'type',
                    'id',
                    'params',
                    'body',
                    'generator'
                ],
                Identifier: [
                    'type',
                    'name'
                ],
                IfStatement: [
                    'type',
                    'test',
                    'consequent',
                    'alternate'
                ],
                ImportDeclaration: [
                    'type',
                    'specifiers',
                    'source'
                ],
                ImportDefaultSpecifier: [
                    'type',
                    'local'
                ],
                ImportNamespaceSpecifier: [
                    'type',
                    'local'
                ],
                ImportSpecifier: [
                    'type',
                    'imported',
                    'local'
                ],
                LabeledStatement: [
                    'type',
                    'label',
                    'body'
                ],
                Literal: [
                    'type',
                    'value',
                    'regex'
                ],
                LogicalExpression: [
                    'type',
                    'operator',
                    'left',
                    'right'
                ],
                MemberExpression: [
                    'type',
                    'object',
                    'property',
                    'computed'
                ],
                MetaProperty: [
                    'type',
                    'meta',
                    'property'
                ],
                MethodDefinition: [
                    'type',
                    'key',
                    'value',
                    'kind',
                    'computed',
                    'static'
                ],
                NewExpression: [
                    'type',
                    'callee',
                    'arguments'
                ],
                ObjectExpression: [
                    'type',
                    'properties'
                ],
                ObjectPattern: [
                    'type',
                    'properties'
                ],
                Program: [
                    'type',
                    'body',
                    'sourceType'
                ],
                Property: [
                    'type',
                    'key',
                    'value',
                    'kind',
                    'method',
                    'shorthand',
                    'computed'
                ],
                RestElement: [
                    'type',
                    'argument'
                ],
                ReturnStatement: [
                    'type',
                    'argument'
                ],
                SequenceExpression: [
                    'type',
                    'expressions'
                ],
                SpreadElement: [
                    'type',
                    'argument'
                ],
                Super: ['type'],
                SwitchCase: [
                    'type',
                    'test',
                    'consequent'
                ],
                SwitchStatement: [
                    'type',
                    'discriminant',
                    'cases',
                    'lexical'
                ],
                TaggedTemplateExpression: [
                    'type',
                    'tag',
                    'quasi'
                ],
                TemplateElement: [
                    'type',
                    'tail',
                    'value'
                ],
                TemplateLiteral: [
                    'type',
                    'quasis',
                    'expressions'
                ],
                ThisExpression: ['type'],
                ThrowStatement: [
                    'type',
                    'argument'
                ],
                TryStatement: [
                    'type',
                    'block',
                    'handler',
                    'finalizer'
                ],
                UnaryExpression: [
                    'type',
                    'operator',
                    'prefix',
                    'argument'
                ],
                UpdateExpression: [
                    'type',
                    'operator',
                    'argument',
                    'prefix'
                ],
                VariableDeclaration: [
                    'type',
                    'declarations',
                    'kind'
                ],
                VariableDeclarator: [
                    'type',
                    'id',
                    'init'
                ],
                WhileStatement: [
                    'type',
                    'test',
                    'body'
                ],
                WithStatement: [
                    'type',
                    'object',
                    'body'
                ],
                YieldExpression: [
                    'type',
                    'argument',
                    'delegate'
                ]
            };
        },
        {}
    ],
    318: [
        function (require, module, exports) {
            'use strict';
            var isArray = require('isarray');
            var objectKeys = Object.keys || require('object-keys');
            var indexOf = require('indexof');
            var reduce = require('array-reduce');
            module.exports = function cloneWithWhitelist(astWhiteList) {
                var whitelist = reduce(objectKeys(astWhiteList), function (props, key) {
                    var propNames = astWhiteList[key];
                    var prepend = indexOf(propNames, 'type') === -1 ? ['type'] : [];
                    props[key] = prepend.concat(propNames);
                    return props;
                }, {});
                function cloneNodeOrObject(obj) {
                    var props = obj.type ? whitelist[obj.type] : null;
                    if (props) {
                        return cloneNode(obj, props);
                    } else {
                        return cloneObject(obj);
                    }
                }
                function cloneArray(ary) {
                    var i = ary.length, clone = [];
                    while (i--) {
                        clone[i] = cloneOf(ary[i]);
                    }
                    return clone;
                }
                function cloneNode(node, props) {
                    var i, len, key, clone = {};
                    for (i = 0, len = props.length; i < len; i += 1) {
                        key = props[i];
                        if (node.hasOwnProperty(key)) {
                            clone[key] = cloneOf(node[key]);
                        }
                    }
                    return clone;
                }
                function cloneObject(obj) {
                    var props = objectKeys(obj);
                    var i, len, key, clone = {};
                    for (i = 0, len = props.length; i < len; i += 1) {
                        key = props[i];
                        clone[key] = cloneOf(obj[key]);
                    }
                    return clone;
                }
                function cloneOf(val) {
                    if (typeof val === 'object' && val !== null) {
                        if (val instanceof RegExp) {
                            return new RegExp(val);
                        } else if (isArray(val)) {
                            return cloneArray(val);
                        } else {
                            return cloneNodeOrObject(val);
                        }
                    } else {
                        return val;
                    }
                }
                return cloneNodeOrObject;
            };
        },
        {
            'array-reduce': 10,
            'indexof': 328,
            'isarray': 330,
            'object-keys': 334
        }
    ],
    319: [
        function (require, module, exports) {
            'use strict';
            var defaultProps = require('./ast-properties');
            var objectKeys = Object.keys || require('object-keys');
            var assign = require('object-assign');
            module.exports = function createWhitelist(options) {
                var opts = assign({}, options);
                var typeName, i, len;
                var keys = objectKeys(defaultProps);
                var result = {};
                for (i = 0, len = keys.length; i < len; i += 1) {
                    typeName = keys[i];
                    result[typeName] = defaultProps[typeName].concat(opts.extra);
                }
                return result;
            };
        },
        {
            './ast-properties': 317,
            'object-assign': 331,
            'object-keys': 334
        }
    ],
    320: [
        function (require, module, exports) {
            (function clone(exports) {
                'use strict';
                var Syntax, isArray, VisitorOption, VisitorKeys, objectCreate, objectKeys, BREAK, SKIP, REMOVE;
                function ignoreJSHintError() {
                }
                isArray = Array.isArray;
                if (!isArray) {
                    isArray = function isArray(array) {
                        return Object.prototype.toString.call(array) === '[object Array]';
                    };
                }
                function deepCopy(obj) {
                    var ret = {}, key, val;
                    for (key in obj) {
                        if (obj.hasOwnProperty(key)) {
                            val = obj[key];
                            if (typeof val === 'object' && val !== null) {
                                ret[key] = deepCopy(val);
                            } else {
                                ret[key] = val;
                            }
                        }
                    }
                    return ret;
                }
                function shallowCopy(obj) {
                    var ret = {}, key;
                    for (key in obj) {
                        if (obj.hasOwnProperty(key)) {
                            ret[key] = obj[key];
                        }
                    }
                    return ret;
                }
                ignoreJSHintError(shallowCopy);
                function upperBound(array, func) {
                    var diff, len, i, current;
                    len = array.length;
                    i = 0;
                    while (len) {
                        diff = len >>> 1;
                        current = i + diff;
                        if (func(array[current])) {
                            len = diff;
                        } else {
                            i = current + 1;
                            len -= diff + 1;
                        }
                    }
                    return i;
                }
                function lowerBound(array, func) {
                    var diff, len, i, current;
                    len = array.length;
                    i = 0;
                    while (len) {
                        diff = len >>> 1;
                        current = i + diff;
                        if (func(array[current])) {
                            i = current + 1;
                            len -= diff + 1;
                        } else {
                            len = diff;
                        }
                    }
                    return i;
                }
                ignoreJSHintError(lowerBound);
                objectCreate = Object.create || function () {
                    function F() {
                    }
                    return function (o) {
                        F.prototype = o;
                        return new F();
                    };
                }();
                objectKeys = Object.keys || function (o) {
                    var keys = [], key;
                    for (key in o) {
                        keys.push(key);
                    }
                    return keys;
                };
                function extend(to, from) {
                    var keys = objectKeys(from), key, i, len;
                    for (i = 0, len = keys.length; i < len; i += 1) {
                        key = keys[i];
                        to[key] = from[key];
                    }
                    return to;
                }
                Syntax = {
                    AssignmentExpression: 'AssignmentExpression',
                    AssignmentPattern: 'AssignmentPattern',
                    ArrayExpression: 'ArrayExpression',
                    ArrayPattern: 'ArrayPattern',
                    ArrowFunctionExpression: 'ArrowFunctionExpression',
                    AwaitExpression: 'AwaitExpression',
                    BlockStatement: 'BlockStatement',
                    BinaryExpression: 'BinaryExpression',
                    BreakStatement: 'BreakStatement',
                    CallExpression: 'CallExpression',
                    CatchClause: 'CatchClause',
                    ClassBody: 'ClassBody',
                    ClassDeclaration: 'ClassDeclaration',
                    ClassExpression: 'ClassExpression',
                    ComprehensionBlock: 'ComprehensionBlock',
                    ComprehensionExpression: 'ComprehensionExpression',
                    ConditionalExpression: 'ConditionalExpression',
                    ContinueStatement: 'ContinueStatement',
                    DebuggerStatement: 'DebuggerStatement',
                    DirectiveStatement: 'DirectiveStatement',
                    DoWhileStatement: 'DoWhileStatement',
                    EmptyStatement: 'EmptyStatement',
                    ExportAllDeclaration: 'ExportAllDeclaration',
                    ExportDefaultDeclaration: 'ExportDefaultDeclaration',
                    ExportNamedDeclaration: 'ExportNamedDeclaration',
                    ExportSpecifier: 'ExportSpecifier',
                    ExpressionStatement: 'ExpressionStatement',
                    ForStatement: 'ForStatement',
                    ForInStatement: 'ForInStatement',
                    ForOfStatement: 'ForOfStatement',
                    FunctionDeclaration: 'FunctionDeclaration',
                    FunctionExpression: 'FunctionExpression',
                    GeneratorExpression: 'GeneratorExpression',
                    Identifier: 'Identifier',
                    IfStatement: 'IfStatement',
                    ImportDeclaration: 'ImportDeclaration',
                    ImportDefaultSpecifier: 'ImportDefaultSpecifier',
                    ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',
                    ImportSpecifier: 'ImportSpecifier',
                    Literal: 'Literal',
                    LabeledStatement: 'LabeledStatement',
                    LogicalExpression: 'LogicalExpression',
                    MemberExpression: 'MemberExpression',
                    MetaProperty: 'MetaProperty',
                    MethodDefinition: 'MethodDefinition',
                    ModuleSpecifier: 'ModuleSpecifier',
                    NewExpression: 'NewExpression',
                    ObjectExpression: 'ObjectExpression',
                    ObjectPattern: 'ObjectPattern',
                    Program: 'Program',
                    Property: 'Property',
                    RestElement: 'RestElement',
                    ReturnStatement: 'ReturnStatement',
                    SequenceExpression: 'SequenceExpression',
                    SpreadElement: 'SpreadElement',
                    Super: 'Super',
                    SwitchStatement: 'SwitchStatement',
                    SwitchCase: 'SwitchCase',
                    TaggedTemplateExpression: 'TaggedTemplateExpression',
                    TemplateElement: 'TemplateElement',
                    TemplateLiteral: 'TemplateLiteral',
                    ThisExpression: 'ThisExpression',
                    ThrowStatement: 'ThrowStatement',
                    TryStatement: 'TryStatement',
                    UnaryExpression: 'UnaryExpression',
                    UpdateExpression: 'UpdateExpression',
                    VariableDeclaration: 'VariableDeclaration',
                    VariableDeclarator: 'VariableDeclarator',
                    WhileStatement: 'WhileStatement',
                    WithStatement: 'WithStatement',
                    YieldExpression: 'YieldExpression'
                };
                VisitorKeys = {
                    AssignmentExpression: [
                        'left',
                        'right'
                    ],
                    AssignmentPattern: [
                        'left',
                        'right'
                    ],
                    ArrayExpression: ['elements'],
                    ArrayPattern: ['elements'],
                    ArrowFunctionExpression: [
                        'params',
                        'body'
                    ],
                    AwaitExpression: ['argument'],
                    BlockStatement: ['body'],
                    BinaryExpression: [
                        'left',
                        'right'
                    ],
                    BreakStatement: ['label'],
                    CallExpression: [
                        'callee',
                        'arguments'
                    ],
                    CatchClause: [
                        'param',
                        'body'
                    ],
                    ClassBody: ['body'],
                    ClassDeclaration: [
                        'id',
                        'superClass',
                        'body'
                    ],
                    ClassExpression: [
                        'id',
                        'superClass',
                        'body'
                    ],
                    ComprehensionBlock: [
                        'left',
                        'right'
                    ],
                    ComprehensionExpression: [
                        'blocks',
                        'filter',
                        'body'
                    ],
                    ConditionalExpression: [
                        'test',
                        'consequent',
                        'alternate'
                    ],
                    ContinueStatement: ['label'],
                    DebuggerStatement: [],
                    DirectiveStatement: [],
                    DoWhileStatement: [
                        'body',
                        'test'
                    ],
                    EmptyStatement: [],
                    ExportAllDeclaration: ['source'],
                    ExportDefaultDeclaration: ['declaration'],
                    ExportNamedDeclaration: [
                        'declaration',
                        'specifiers',
                        'source'
                    ],
                    ExportSpecifier: [
                        'exported',
                        'local'
                    ],
                    ExpressionStatement: ['expression'],
                    ForStatement: [
                        'init',
                        'test',
                        'update',
                        'body'
                    ],
                    ForInStatement: [
                        'left',
                        'right',
                        'body'
                    ],
                    ForOfStatement: [
                        'left',
                        'right',
                        'body'
                    ],
                    FunctionDeclaration: [
                        'id',
                        'params',
                        'body'
                    ],
                    FunctionExpression: [
                        'id',
                        'params',
                        'body'
                    ],
                    GeneratorExpression: [
                        'blocks',
                        'filter',
                        'body'
                    ],
                    Identifier: [],
                    IfStatement: [
                        'test',
                        'consequent',
                        'alternate'
                    ],
                    ImportDeclaration: [
                        'specifiers',
                        'source'
                    ],
                    ImportDefaultSpecifier: ['local'],
                    ImportNamespaceSpecifier: ['local'],
                    ImportSpecifier: [
                        'imported',
                        'local'
                    ],
                    Literal: [],
                    LabeledStatement: [
                        'label',
                        'body'
                    ],
                    LogicalExpression: [
                        'left',
                        'right'
                    ],
                    MemberExpression: [
                        'object',
                        'property'
                    ],
                    MetaProperty: [
                        'meta',
                        'property'
                    ],
                    MethodDefinition: [
                        'key',
                        'value'
                    ],
                    ModuleSpecifier: [],
                    NewExpression: [
                        'callee',
                        'arguments'
                    ],
                    ObjectExpression: ['properties'],
                    ObjectPattern: ['properties'],
                    Program: ['body'],
                    Property: [
                        'key',
                        'value'
                    ],
                    RestElement: ['argument'],
                    ReturnStatement: ['argument'],
                    SequenceExpression: ['expressions'],
                    SpreadElement: ['argument'],
                    Super: [],
                    SwitchStatement: [
                        'discriminant',
                        'cases'
                    ],
                    SwitchCase: [
                        'test',
                        'consequent'
                    ],
                    TaggedTemplateExpression: [
                        'tag',
                        'quasi'
                    ],
                    TemplateElement: [],
                    TemplateLiteral: [
                        'quasis',
                        'expressions'
                    ],
                    ThisExpression: [],
                    ThrowStatement: ['argument'],
                    TryStatement: [
                        'block',
                        'handler',
                        'finalizer'
                    ],
                    UnaryExpression: ['argument'],
                    UpdateExpression: ['argument'],
                    VariableDeclaration: ['declarations'],
                    VariableDeclarator: [
                        'id',
                        'init'
                    ],
                    WhileStatement: [
                        'test',
                        'body'
                    ],
                    WithStatement: [
                        'object',
                        'body'
                    ],
                    YieldExpression: ['argument']
                };
                BREAK = {};
                SKIP = {};
                REMOVE = {};
                VisitorOption = {
                    Break: BREAK,
                    Skip: SKIP,
                    Remove: REMOVE
                };
                function Reference(parent, key) {
                    this.parent = parent;
                    this.key = key;
                }
                Reference.prototype.replace = function replace(node) {
                    this.parent[this.key] = node;
                };
                Reference.prototype.remove = function remove() {
                    if (isArray(this.parent)) {
                        this.parent.splice(this.key, 1);
                        return true;
                    } else {
                        this.replace(null);
                        return false;
                    }
                };
                function Element(node, path, wrap, ref) {
                    this.node = node;
                    this.path = path;
                    this.wrap = wrap;
                    this.ref = ref;
                }
                function Controller() {
                }
                Controller.prototype.path = function path() {
                    var i, iz, j, jz, result, element;
                    function addToPath(result, path) {
                        if (isArray(path)) {
                            for (j = 0, jz = path.length; j < jz; ++j) {
                                result.push(path[j]);
                            }
                        } else {
                            result.push(path);
                        }
                    }
                    if (!this.__current.path) {
                        return null;
                    }
                    result = [];
                    for (i = 2, iz = this.__leavelist.length; i < iz; ++i) {
                        element = this.__leavelist[i];
                        addToPath(result, element.path);
                    }
                    addToPath(result, this.__current.path);
                    return result;
                };
                Controller.prototype.type = function () {
                    var node = this.current();
                    return node.type || this.__current.wrap;
                };
                Controller.prototype.parents = function parents() {
                    var i, iz, result;
                    result = [];
                    for (i = 1, iz = this.__leavelist.length; i < iz; ++i) {
                        result.push(this.__leavelist[i].node);
                    }
                    return result;
                };
                Controller.prototype.current = function current() {
                    return this.__current.node;
                };
                Controller.prototype.__execute = function __execute(callback, element) {
                    var previous, result;
                    result = undefined;
                    previous = this.__current;
                    this.__current = element;
                    this.__state = null;
                    if (callback) {
                        result = callback.call(this, element.node, this.__leavelist[this.__leavelist.length - 1].node);
                    }
                    this.__current = previous;
                    return result;
                };
                Controller.prototype.notify = function notify(flag) {
                    this.__state = flag;
                };
                Controller.prototype.skip = function () {
                    this.notify(SKIP);
                };
                Controller.prototype['break'] = function () {
                    this.notify(BREAK);
                };
                Controller.prototype.remove = function () {
                    this.notify(REMOVE);
                };
                Controller.prototype.__initialize = function (root, visitor) {
                    this.visitor = visitor;
                    this.root = root;
                    this.__worklist = [];
                    this.__leavelist = [];
                    this.__current = null;
                    this.__state = null;
                    this.__fallback = null;
                    if (visitor.fallback === 'iteration') {
                        this.__fallback = objectKeys;
                    } else if (typeof visitor.fallback === 'function') {
                        this.__fallback = visitor.fallback;
                    }
                    this.__keys = VisitorKeys;
                    if (visitor.keys) {
                        this.__keys = extend(objectCreate(this.__keys), visitor.keys);
                    }
                };
                function isNode(node) {
                    if (node == null) {
                        return false;
                    }
                    return typeof node === 'object' && typeof node.type === 'string';
                }
                function isProperty(nodeType, key) {
                    return (nodeType === Syntax.ObjectExpression || nodeType === Syntax.ObjectPattern) && 'properties' === key;
                }
                Controller.prototype.traverse = function traverse(root, visitor) {
                    var worklist, leavelist, element, node, nodeType, ret, key, current, current2, candidates, candidate, sentinel;
                    this.__initialize(root, visitor);
                    sentinel = {};
                    worklist = this.__worklist;
                    leavelist = this.__leavelist;
                    worklist.push(new Element(root, null, null, null));
                    leavelist.push(new Element(null, null, null, null));
                    while (worklist.length) {
                        element = worklist.pop();
                        if (element === sentinel) {
                            element = leavelist.pop();
                            ret = this.__execute(visitor.leave, element);
                            if (this.__state === BREAK || ret === BREAK) {
                                return;
                            }
                            continue;
                        }
                        if (element.node) {
                            ret = this.__execute(visitor.enter, element);
                            if (this.__state === BREAK || ret === BREAK) {
                                return;
                            }
                            worklist.push(sentinel);
                            leavelist.push(element);
                            if (this.__state === SKIP || ret === SKIP) {
                                continue;
                            }
                            node = element.node;
                            nodeType = node.type || element.wrap;
                            candidates = this.__keys[nodeType];
                            if (!candidates) {
                                if (this.__fallback) {
                                    candidates = this.__fallback(node);
                                } else {
                                    throw new Error('Unknown node type ' + nodeType + '.');
                                }
                            }
                            current = candidates.length;
                            while ((current -= 1) >= 0) {
                                key = candidates[current];
                                candidate = node[key];
                                if (!candidate) {
                                    continue;
                                }
                                if (isArray(candidate)) {
                                    current2 = candidate.length;
                                    while ((current2 -= 1) >= 0) {
                                        if (!candidate[current2]) {
                                            continue;
                                        }
                                        if (isProperty(nodeType, candidates[current])) {
                                            element = new Element(candidate[current2], [
                                                key,
                                                current2
                                            ], 'Property', null);
                                        } else if (isNode(candidate[current2])) {
                                            element = new Element(candidate[current2], [
                                                key,
                                                current2
                                            ], null, null);
                                        } else {
                                            continue;
                                        }
                                        worklist.push(element);
                                    }
                                } else if (isNode(candidate)) {
                                    worklist.push(new Element(candidate, key, null, null));
                                }
                            }
                        }
                    }
                };
                Controller.prototype.replace = function replace(root, visitor) {
                    var worklist, leavelist, node, nodeType, target, element, current, current2, candidates, candidate, sentinel, outer, key;
                    function removeElem(element) {
                        var i, key, nextElem, parent;
                        if (element.ref.remove()) {
                            key = element.ref.key;
                            parent = element.ref.parent;
                            i = worklist.length;
                            while (i--) {
                                nextElem = worklist[i];
                                if (nextElem.ref && nextElem.ref.parent === parent) {
                                    if (nextElem.ref.key < key) {
                                        break;
                                    }
                                    --nextElem.ref.key;
                                }
                            }
                        }
                    }
                    this.__initialize(root, visitor);
                    sentinel = {};
                    worklist = this.__worklist;
                    leavelist = this.__leavelist;
                    outer = { root: root };
                    element = new Element(root, null, null, new Reference(outer, 'root'));
                    worklist.push(element);
                    leavelist.push(element);
                    while (worklist.length) {
                        element = worklist.pop();
                        if (element === sentinel) {
                            element = leavelist.pop();
                            target = this.__execute(visitor.leave, element);
                            if (target !== undefined && target !== BREAK && target !== SKIP && target !== REMOVE) {
                                element.ref.replace(target);
                            }
                            if (this.__state === REMOVE || target === REMOVE) {
                                removeElem(element);
                            }
                            if (this.__state === BREAK || target === BREAK) {
                                return outer.root;
                            }
                            continue;
                        }
                        target = this.__execute(visitor.enter, element);
                        if (target !== undefined && target !== BREAK && target !== SKIP && target !== REMOVE) {
                            element.ref.replace(target);
                            element.node = target;
                        }
                        if (this.__state === REMOVE || target === REMOVE) {
                            removeElem(element);
                            element.node = null;
                        }
                        if (this.__state === BREAK || target === BREAK) {
                            return outer.root;
                        }
                        node = element.node;
                        if (!node) {
                            continue;
                        }
                        worklist.push(sentinel);
                        leavelist.push(element);
                        if (this.__state === SKIP || target === SKIP) {
                            continue;
                        }
                        nodeType = node.type || element.wrap;
                        candidates = this.__keys[nodeType];
                        if (!candidates) {
                            if (this.__fallback) {
                                candidates = this.__fallback(node);
                            } else {
                                throw new Error('Unknown node type ' + nodeType + '.');
                            }
                        }
                        current = candidates.length;
                        while ((current -= 1) >= 0) {
                            key = candidates[current];
                            candidate = node[key];
                            if (!candidate) {
                                continue;
                            }
                            if (isArray(candidate)) {
                                current2 = candidate.length;
                                while ((current2 -= 1) >= 0) {
                                    if (!candidate[current2]) {
                                        continue;
                                    }
                                    if (isProperty(nodeType, candidates[current])) {
                                        element = new Element(candidate[current2], [
                                            key,
                                            current2
                                        ], 'Property', new Reference(candidate, current2));
                                    } else if (isNode(candidate[current2])) {
                                        element = new Element(candidate[current2], [
                                            key,
                                            current2
                                        ], null, new Reference(candidate, current2));
                                    } else {
                                        continue;
                                    }
                                    worklist.push(element);
                                }
                            } else if (isNode(candidate)) {
                                worklist.push(new Element(candidate, key, null, new Reference(node, key)));
                            }
                        }
                    }
                    return outer.root;
                };
                function traverse(root, visitor) {
                    var controller = new Controller();
                    return controller.traverse(root, visitor);
                }
                function replace(root, visitor) {
                    var controller = new Controller();
                    return controller.replace(root, visitor);
                }
                function extendCommentRange(comment, tokens) {
                    var target;
                    target = upperBound(tokens, function search(token) {
                        return token.range[0] > comment.range[0];
                    });
                    comment.extendedRange = [
                        comment.range[0],
                        comment.range[1]
                    ];
                    if (target !== tokens.length) {
                        comment.extendedRange[1] = tokens[target].range[0];
                    }
                    target -= 1;
                    if (target >= 0) {
                        comment.extendedRange[0] = tokens[target].range[1];
                    }
                    return comment;
                }
                function attachComments(tree, providedComments, tokens) {
                    var comments = [], comment, len, i, cursor;
                    if (!tree.range) {
                        throw new Error('attachComments needs range information');
                    }
                    if (!tokens.length) {
                        if (providedComments.length) {
                            for (i = 0, len = providedComments.length; i < len; i += 1) {
                                comment = deepCopy(providedComments[i]);
                                comment.extendedRange = [
                                    0,
                                    tree.range[0]
                                ];
                                comments.push(comment);
                            }
                            tree.leadingComments = comments;
                        }
                        return tree;
                    }
                    for (i = 0, len = providedComments.length; i < len; i += 1) {
                        comments.push(extendCommentRange(deepCopy(providedComments[i]), tokens));
                    }
                    cursor = 0;
                    traverse(tree, {
                        enter: function (node) {
                            var comment;
                            while (cursor < comments.length) {
                                comment = comments[cursor];
                                if (comment.extendedRange[1] > node.range[0]) {
                                    break;
                                }
                                if (comment.extendedRange[1] === node.range[0]) {
                                    if (!node.leadingComments) {
                                        node.leadingComments = [];
                                    }
                                    node.leadingComments.push(comment);
                                    comments.splice(cursor, 1);
                                } else {
                                    cursor += 1;
                                }
                            }
                            if (cursor === comments.length) {
                                return VisitorOption.Break;
                            }
                            if (comments[cursor].extendedRange[0] > node.range[1]) {
                                return VisitorOption.Skip;
                            }
                        }
                    });
                    cursor = 0;
                    traverse(tree, {
                        leave: function (node) {
                            var comment;
                            while (cursor < comments.length) {
                                comment = comments[cursor];
                                if (node.range[1] < comment.extendedRange[0]) {
                                    break;
                                }
                                if (node.range[1] === comment.extendedRange[0]) {
                                    if (!node.trailingComments) {
                                        node.trailingComments = [];
                                    }
                                    node.trailingComments.push(comment);
                                    comments.splice(cursor, 1);
                                } else {
                                    cursor += 1;
                                }
                            }
                            if (cursor === comments.length) {
                                return VisitorOption.Break;
                            }
                            if (comments[cursor].extendedRange[0] > node.range[1]) {
                                return VisitorOption.Skip;
                            }
                        }
                    });
                    return tree;
                }
                exports.version = require('./package.json').version;
                exports.Syntax = Syntax;
                exports.traverse = traverse;
                exports.replace = replace;
                exports.attachComments = attachComments;
                exports.VisitorKeys = VisitorKeys;
                exports.VisitorOption = VisitorOption;
                exports.Controller = Controller;
                exports.cloneEnvironment = function () {
                    return clone({});
                };
                return exports;
            }(exports));
        },
        { './package.json': 321 }
    ],
    321: [
        function (require, module, exports) {
            module.exports = {
                '_args': [[
                        'estraverse@^4.0.0',
                        '/Users/ken/work/typescript-example/node_modules/escallmatch'
                    ]],
                '_from': 'estraverse@>=4.0.0 <5.0.0',
                '_id': 'estraverse@4.2.0',
                '_inCache': true,
                '_installable': true,
                '_location': '/estraverse',
                '_nodeVersion': '0.12.9',
                '_npmOperationalInternal': {
                    'host': 'packages-12-west.internal.npmjs.com',
                    'tmp': 'tmp/estraverse-4.2.0.tgz_1457646738925_0.7118953282479197'
                },
                '_npmUser': {
                    'email': 'nicholas@nczconsulting.com',
                    'name': 'nzakas'
                },
                '_npmVersion': '2.14.9',
                '_phantomChildren': {},
                '_requested': {
                    'name': 'estraverse',
                    'raw': 'estraverse@^4.0.0',
                    'rawSpec': '^4.0.0',
                    'scope': null,
                    'spec': '>=4.0.0 <5.0.0',
                    'type': 'range'
                },
                '_requiredBy': [
                    '/escallmatch',
                    '/power-assert-formatter'
                ],
                '_resolved': 'https://registry.npmjs.org/estraverse/-/estraverse-4.2.0.tgz',
                '_shasum': '0dee3fed31fcd469618ce7342099fc1afa0bdb13',
                '_shrinkwrap': null,
                '_spec': 'estraverse@^4.0.0',
                '_where': '/Users/ken/work/typescript-example/node_modules/escallmatch',
                'bugs': { 'url': 'https://github.com/estools/estraverse/issues' },
                'dependencies': {},
                'description': 'ECMAScript JS AST traversal functions',
                'devDependencies': {
                    'babel-preset-es2015': '^6.3.13',
                    'babel-register': '^6.3.13',
                    'chai': '^2.1.1',
                    'espree': '^1.11.0',
                    'gulp': '^3.8.10',
                    'gulp-bump': '^0.2.2',
                    'gulp-filter': '^2.0.0',
                    'gulp-git': '^1.0.1',
                    'gulp-tag-version': '^1.2.1',
                    'jshint': '^2.5.6',
                    'mocha': '^2.1.0'
                },
                'directories': {},
                'dist': {
                    'shasum': '0dee3fed31fcd469618ce7342099fc1afa0bdb13',
                    'tarball': 'http://registry.npmjs.org/estraverse/-/estraverse-4.2.0.tgz'
                },
                'engines': { 'node': '>=0.10.0' },
                'gitHead': '6f6a4e99653908e859c7c10d04d9518bf4844ede',
                'homepage': 'https://github.com/estools/estraverse',
                'license': 'BSD-2-Clause',
                'main': 'estraverse.js',
                'maintainers': [
                    {
                        'email': 'utatane.tea@gmail.com',
                        'name': 'constellation'
                    },
                    {
                        'email': 'npm@michael.ficarra.me',
                        'name': 'michaelficarra'
                    },
                    {
                        'email': 'nicholas@nczconsulting.com',
                        'name': 'nzakas'
                    }
                ],
                'name': 'estraverse',
                'optionalDependencies': {},
                'readme': 'ERROR: No README data found!',
                'repository': {
                    'type': 'git',
                    'url': 'git+ssh://git@github.com/estools/estraverse.git'
                },
                'scripts': {
                    'lint': 'jshint estraverse.js',
                    'test': 'npm run-script lint && npm run-script unit-test',
                    'unit-test': 'mocha --compilers js:babel-register'
                },
                'version': '4.2.0'
            };
        },
        {}
    ],
    322: [
        function (require, module, exports) {
            function EventEmitter() {
                this._events = this._events || {};
                this._maxListeners = this._maxListeners || undefined;
            }
            module.exports = EventEmitter;
            EventEmitter.EventEmitter = EventEmitter;
            EventEmitter.prototype._events = undefined;
            EventEmitter.prototype._maxListeners = undefined;
            EventEmitter.defaultMaxListeners = 10;
            EventEmitter.prototype.setMaxListeners = function (n) {
                if (!isNumber(n) || n < 0 || isNaN(n))
                    throw TypeError('n must be a positive number');
                this._maxListeners = n;
                return this;
            };
            EventEmitter.prototype.emit = function (type) {
                var er, handler, len, args, i, listeners;
                if (!this._events)
                    this._events = {};
                if (type === 'error') {
                    if (!this._events.error || isObject(this._events.error) && !this._events.error.length) {
                        er = arguments[1];
                        if (er instanceof Error) {
                            throw er;
                        }
                        throw TypeError('Uncaught, unspecified "error" event.');
                    }
                }
                handler = this._events[type];
                if (isUndefined(handler))
                    return false;
                if (isFunction(handler)) {
                    switch (arguments.length) {
                    case 1:
                        handler.call(this);
                        break;
                    case 2:
                        handler.call(this, arguments[1]);
                        break;
                    case 3:
                        handler.call(this, arguments[1], arguments[2]);
                        break;
                    default:
                        args = Array.prototype.slice.call(arguments, 1);
                        handler.apply(this, args);
                    }
                } else if (isObject(handler)) {
                    args = Array.prototype.slice.call(arguments, 1);
                    listeners = handler.slice();
                    len = listeners.length;
                    for (i = 0; i < len; i++)
                        listeners[i].apply(this, args);
                }
                return true;
            };
            EventEmitter.prototype.addListener = function (type, listener) {
                var m;
                if (!isFunction(listener))
                    throw TypeError('listener must be a function');
                if (!this._events)
                    this._events = {};
                if (this._events.newListener)
                    this.emit('newListener', type, isFunction(listener.listener) ? listener.listener : listener);
                if (!this._events[type])
                    this._events[type] = listener;
                else if (isObject(this._events[type]))
                    this._events[type].push(listener);
                else
                    this._events[type] = [
                        this._events[type],
                        listener
                    ];
                if (isObject(this._events[type]) && !this._events[type].warned) {
                    if (!isUndefined(this._maxListeners)) {
                        m = this._maxListeners;
                    } else {
                        m = EventEmitter.defaultMaxListeners;
                    }
                    if (m && m > 0 && this._events[type].length > m) {
                        this._events[type].warned = true;
                        console.error('(node) warning: possible EventEmitter memory ' + 'leak detected. %d listeners added. ' + 'Use emitter.setMaxListeners() to increase limit.', this._events[type].length);
                        if (typeof console.trace === 'function') {
                            console.trace();
                        }
                    }
                }
                return this;
            };
            EventEmitter.prototype.on = EventEmitter.prototype.addListener;
            EventEmitter.prototype.once = function (type, listener) {
                if (!isFunction(listener))
                    throw TypeError('listener must be a function');
                var fired = false;
                function g() {
                    this.removeListener(type, g);
                    if (!fired) {
                        fired = true;
                        listener.apply(this, arguments);
                    }
                }
                g.listener = listener;
                this.on(type, g);
                return this;
            };
            EventEmitter.prototype.removeListener = function (type, listener) {
                var list, position, length, i;
                if (!isFunction(listener))
                    throw TypeError('listener must be a function');
                if (!this._events || !this._events[type])
                    return this;
                list = this._events[type];
                length = list.length;
                position = -1;
                if (list === listener || isFunction(list.listener) && list.listener === listener) {
                    delete this._events[type];
                    if (this._events.removeListener)
                        this.emit('removeListener', type, listener);
                } else if (isObject(list)) {
                    for (i = length; i-- > 0;) {
                        if (list[i] === listener || list[i].listener && list[i].listener === listener) {
                            position = i;
                            break;
                        }
                    }
                    if (position < 0)
                        return this;
                    if (list.length === 1) {
                        list.length = 0;
                        delete this._events[type];
                    } else {
                        list.splice(position, 1);
                    }
                    if (this._events.removeListener)
                        this.emit('removeListener', type, listener);
                }
                return this;
            };
            EventEmitter.prototype.removeAllListeners = function (type) {
                var key, listeners;
                if (!this._events)
                    return this;
                if (!this._events.removeListener) {
                    if (arguments.length === 0)
                        this._events = {};
                    else if (this._events[type])
                        delete this._events[type];
                    return this;
                }
                if (arguments.length === 0) {
                    for (key in this._events) {
                        if (key === 'removeListener')
                            continue;
                        this.removeAllListeners(key);
                    }
                    this.removeAllListeners('removeListener');
                    this._events = {};
                    return this;
                }
                listeners = this._events[type];
                if (isFunction(listeners)) {
                    this.removeListener(type, listeners);
                } else if (listeners) {
                    while (listeners.length)
                        this.removeListener(type, listeners[listeners.length - 1]);
                }
                delete this._events[type];
                return this;
            };
            EventEmitter.prototype.listeners = function (type) {
                var ret;
                if (!this._events || !this._events[type])
                    ret = [];
                else if (isFunction(this._events[type]))
                    ret = [this._events[type]];
                else
                    ret = this._events[type].slice();
                return ret;
            };
            EventEmitter.prototype.listenerCount = function (type) {
                if (this._events) {
                    var evlistener = this._events[type];
                    if (isFunction(evlistener))
                        return 1;
                    else if (evlistener)
                        return evlistener.length;
                }
                return 0;
            };
            EventEmitter.listenerCount = function (emitter, type) {
                return emitter.listenerCount(type);
            };
            function isFunction(arg) {
                return typeof arg === 'function';
            }
            function isNumber(arg) {
                return typeof arg === 'number';
            }
            function isObject(arg) {
                return typeof arg === 'object' && arg !== null;
            }
            function isUndefined(arg) {
                return arg === void 0;
            }
        },
        {}
    ],
    323: [
        function (require, module, exports) {
            var hasOwn = Object.prototype.hasOwnProperty;
            var toString = Object.prototype.toString;
            module.exports = function forEach(obj, fn, ctx) {
                if (toString.call(fn) !== '[object Function]') {
                    throw new TypeError('iterator must be a function');
                }
                var l = obj.length;
                if (l === +l) {
                    for (var i = 0; i < l; i++) {
                        fn.call(ctx, obj[i], i, obj);
                    }
                } else {
                    for (var k in obj) {
                        if (hasOwn.call(obj, k)) {
                            fn.call(ctx, obj[k], k, obj);
                        }
                    }
                }
            };
        },
        {}
    ],
    324: [
        function (require, module, exports) {
            var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
            var slice = Array.prototype.slice;
            module.exports = bind;
            function bind(that) {
                var target = this;
                if (typeof target !== 'function') {
                    throw new TypeError(ERROR_MESSAGE + target);
                }
                var args = slice.call(arguments, 1);
                return function bound() {
                    if (this instanceof bound) {
                        var F = function () {
                        };
                        F.prototype = target.prototype;
                        var self = new F();
                        var result = target.apply(self, args.concat(slice.call(arguments)));
                        if (Object(result) === result) {
                            return result;
                        }
                        return self;
                    } else {
                        return target.apply(that, args.concat(slice.call(arguments)));
                    }
                };
            }
        },
        {}
    ],
    325: [
        function (require, module, exports) {
            module.exports = require('./javascript/diff_match_patch_uncompressed.js').diff_match_patch;
        },
        { './javascript/diff_match_patch_uncompressed.js': 326 }
    ],
    326: [
        function (require, module, exports) {
            function diff_match_patch() {
                this.Diff_Timeout = 1;
                this.Diff_EditCost = 4;
                this.Match_Threshold = 0.5;
                this.Match_Distance = 1000;
                this.Patch_DeleteThreshold = 0.5;
                this.Patch_Margin = 4;
                this.Match_MaxBits = 32;
            }
            var DIFF_DELETE = -1;
            var DIFF_INSERT = 1;
            var DIFF_EQUAL = 0;
            diff_match_patch.Diff;
            diff_match_patch.prototype.diff_main = function (text1, text2, opt_checklines, opt_deadline) {
                if (typeof opt_deadline == 'undefined') {
                    if (this.Diff_Timeout <= 0) {
                        opt_deadline = Number.MAX_VALUE;
                    } else {
                        opt_deadline = new Date().getTime() + this.Diff_Timeout * 1000;
                    }
                }
                var deadline = opt_deadline;
                if (text1 == null || text2 == null) {
                    throw new Error('Null input. (diff_main)');
                }
                if (text1 == text2) {
                    if (text1) {
                        return [[
                                DIFF_EQUAL,
                                text1
                            ]];
                    }
                    return [];
                }
                if (typeof opt_checklines == 'undefined') {
                    opt_checklines = true;
                }
                var checklines = opt_checklines;
                var commonlength = this.diff_commonPrefix(text1, text2);
                var commonprefix = text1.substring(0, commonlength);
                text1 = text1.substring(commonlength);
                text2 = text2.substring(commonlength);
                commonlength = this.diff_commonSuffix(text1, text2);
                var commonsuffix = text1.substring(text1.length - commonlength);
                text1 = text1.substring(0, text1.length - commonlength);
                text2 = text2.substring(0, text2.length - commonlength);
                var diffs = this.diff_compute_(text1, text2, checklines, deadline);
                if (commonprefix) {
                    diffs.unshift([
                        DIFF_EQUAL,
                        commonprefix
                    ]);
                }
                if (commonsuffix) {
                    diffs.push([
                        DIFF_EQUAL,
                        commonsuffix
                    ]);
                }
                this.diff_cleanupMerge(diffs);
                return diffs;
            };
            diff_match_patch.prototype.diff_compute_ = function (text1, text2, checklines, deadline) {
                var diffs;
                if (!text1) {
                    return [[
                            DIFF_INSERT,
                            text2
                        ]];
                }
                if (!text2) {
                    return [[
                            DIFF_DELETE,
                            text1
                        ]];
                }
                var longtext = text1.length > text2.length ? text1 : text2;
                var shorttext = text1.length > text2.length ? text2 : text1;
                var i = longtext.indexOf(shorttext);
                if (i != -1) {
                    diffs = [
                        [
                            DIFF_INSERT,
                            longtext.substring(0, i)
                        ],
                        [
                            DIFF_EQUAL,
                            shorttext
                        ],
                        [
                            DIFF_INSERT,
                            longtext.substring(i + shorttext.length)
                        ]
                    ];
                    if (text1.length > text2.length) {
                        diffs[0][0] = diffs[2][0] = DIFF_DELETE;
                    }
                    return diffs;
                }
                if (shorttext.length == 1) {
                    return [
                        [
                            DIFF_DELETE,
                            text1
                        ],
                        [
                            DIFF_INSERT,
                            text2
                        ]
                    ];
                }
                var hm = this.diff_halfMatch_(text1, text2);
                if (hm) {
                    var text1_a = hm[0];
                    var text1_b = hm[1];
                    var text2_a = hm[2];
                    var text2_b = hm[3];
                    var mid_common = hm[4];
                    var diffs_a = this.diff_main(text1_a, text2_a, checklines, deadline);
                    var diffs_b = this.diff_main(text1_b, text2_b, checklines, deadline);
                    return diffs_a.concat([[
                            DIFF_EQUAL,
                            mid_common
                        ]], diffs_b);
                }
                if (checklines && text1.length > 100 && text2.length > 100) {
                    return this.diff_lineMode_(text1, text2, deadline);
                }
                return this.diff_bisect_(text1, text2, deadline);
            };
            diff_match_patch.prototype.diff_lineMode_ = function (text1, text2, deadline) {
                var a = this.diff_linesToChars_(text1, text2);
                text1 = a.chars1;
                text2 = a.chars2;
                var linearray = a.lineArray;
                var diffs = this.diff_main(text1, text2, false, deadline);
                this.diff_charsToLines_(diffs, linearray);
                this.diff_cleanupSemantic(diffs);
                diffs.push([
                    DIFF_EQUAL,
                    ''
                ]);
                var pointer = 0;
                var count_delete = 0;
                var count_insert = 0;
                var text_delete = '';
                var text_insert = '';
                while (pointer < diffs.length) {
                    switch (diffs[pointer][0]) {
                    case DIFF_INSERT:
                        count_insert++;
                        text_insert += diffs[pointer][1];
                        break;
                    case DIFF_DELETE:
                        count_delete++;
                        text_delete += diffs[pointer][1];
                        break;
                    case DIFF_EQUAL:
                        if (count_delete >= 1 && count_insert >= 1) {
                            diffs.splice(pointer - count_delete - count_insert, count_delete + count_insert);
                            pointer = pointer - count_delete - count_insert;
                            var a = this.diff_main(text_delete, text_insert, false, deadline);
                            for (var j = a.length - 1; j >= 0; j--) {
                                diffs.splice(pointer, 0, a[j]);
                            }
                            pointer = pointer + a.length;
                        }
                        count_insert = 0;
                        count_delete = 0;
                        text_delete = '';
                        text_insert = '';
                        break;
                    }
                    pointer++;
                }
                diffs.pop();
                return diffs;
            };
            diff_match_patch.prototype.diff_bisect_ = function (text1, text2, deadline) {
                var text1_length = text1.length;
                var text2_length = text2.length;
                var max_d = Math.ceil((text1_length + text2_length) / 2);
                var v_offset = max_d;
                var v_length = 2 * max_d;
                var v1 = new Array(v_length);
                var v2 = new Array(v_length);
                for (var x = 0; x < v_length; x++) {
                    v1[x] = -1;
                    v2[x] = -1;
                }
                v1[v_offset + 1] = 0;
                v2[v_offset + 1] = 0;
                var delta = text1_length - text2_length;
                var front = delta % 2 != 0;
                var k1start = 0;
                var k1end = 0;
                var k2start = 0;
                var k2end = 0;
                for (var d = 0; d < max_d; d++) {
                    if (new Date().getTime() > deadline) {
                        break;
                    }
                    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {
                        var k1_offset = v_offset + k1;
                        var x1;
                        if (k1 == -d || k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1]) {
                            x1 = v1[k1_offset + 1];
                        } else {
                            x1 = v1[k1_offset - 1] + 1;
                        }
                        var y1 = x1 - k1;
                        while (x1 < text1_length && y1 < text2_length && text1.charAt(x1) == text2.charAt(y1)) {
                            x1++;
                            y1++;
                        }
                        v1[k1_offset] = x1;
                        if (x1 > text1_length) {
                            k1end += 2;
                        } else if (y1 > text2_length) {
                            k1start += 2;
                        } else if (front) {
                            var k2_offset = v_offset + delta - k1;
                            if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {
                                var x2 = text1_length - v2[k2_offset];
                                if (x1 >= x2) {
                                    return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);
                                }
                            }
                        }
                    }
                    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {
                        var k2_offset = v_offset + k2;
                        var x2;
                        if (k2 == -d || k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1]) {
                            x2 = v2[k2_offset + 1];
                        } else {
                            x2 = v2[k2_offset - 1] + 1;
                        }
                        var y2 = x2 - k2;
                        while (x2 < text1_length && y2 < text2_length && text1.charAt(text1_length - x2 - 1) == text2.charAt(text2_length - y2 - 1)) {
                            x2++;
                            y2++;
                        }
                        v2[k2_offset] = x2;
                        if (x2 > text1_length) {
                            k2end += 2;
                        } else if (y2 > text2_length) {
                            k2start += 2;
                        } else if (!front) {
                            var k1_offset = v_offset + delta - k2;
                            if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {
                                var x1 = v1[k1_offset];
                                var y1 = v_offset + x1 - k1_offset;
                                x2 = text1_length - x2;
                                if (x1 >= x2) {
                                    return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);
                                }
                            }
                        }
                    }
                }
                return [
                    [
                        DIFF_DELETE,
                        text1
                    ],
                    [
                        DIFF_INSERT,
                        text2
                    ]
                ];
            };
            diff_match_patch.prototype.diff_bisectSplit_ = function (text1, text2, x, y, deadline) {
                var text1a = text1.substring(0, x);
                var text2a = text2.substring(0, y);
                var text1b = text1.substring(x);
                var text2b = text2.substring(y);
                var diffs = this.diff_main(text1a, text2a, false, deadline);
                var diffsb = this.diff_main(text1b, text2b, false, deadline);
                return diffs.concat(diffsb);
            };
            diff_match_patch.prototype.diff_linesToChars_ = function (text1, text2) {
                var lineArray = [];
                var lineHash = {};
                lineArray[0] = '';
                function diff_linesToCharsMunge_(text) {
                    var chars = '';
                    var lineStart = 0;
                    var lineEnd = -1;
                    var lineArrayLength = lineArray.length;
                    while (lineEnd < text.length - 1) {
                        lineEnd = text.indexOf('\n', lineStart);
                        if (lineEnd == -1) {
                            lineEnd = text.length - 1;
                        }
                        var line = text.substring(lineStart, lineEnd + 1);
                        lineStart = lineEnd + 1;
                        if (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) : lineHash[line] !== undefined) {
                            chars += String.fromCharCode(lineHash[line]);
                        } else {
                            chars += String.fromCharCode(lineArrayLength);
                            lineHash[line] = lineArrayLength;
                            lineArray[lineArrayLength++] = line;
                        }
                    }
                    return chars;
                }
                var chars1 = diff_linesToCharsMunge_(text1);
                var chars2 = diff_linesToCharsMunge_(text2);
                return {
                    chars1: chars1,
                    chars2: chars2,
                    lineArray: lineArray
                };
            };
            diff_match_patch.prototype.diff_charsToLines_ = function (diffs, lineArray) {
                for (var x = 0; x < diffs.length; x++) {
                    var chars = diffs[x][1];
                    var text = [];
                    for (var y = 0; y < chars.length; y++) {
                        text[y] = lineArray[chars.charCodeAt(y)];
                    }
                    diffs[x][1] = text.join('');
                }
            };
            diff_match_patch.prototype.diff_commonPrefix = function (text1, text2) {
                if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {
                    return 0;
                }
                var pointermin = 0;
                var pointermax = Math.min(text1.length, text2.length);
                var pointermid = pointermax;
                var pointerstart = 0;
                while (pointermin < pointermid) {
                    if (text1.substring(pointerstart, pointermid) == text2.substring(pointerstart, pointermid)) {
                        pointermin = pointermid;
                        pointerstart = pointermin;
                    } else {
                        pointermax = pointermid;
                    }
                    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
                }
                return pointermid;
            };
            diff_match_patch.prototype.diff_commonSuffix = function (text1, text2) {
                if (!text1 || !text2 || text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {
                    return 0;
                }
                var pointermin = 0;
                var pointermax = Math.min(text1.length, text2.length);
                var pointermid = pointermax;
                var pointerend = 0;
                while (pointermin < pointermid) {
                    if (text1.substring(text1.length - pointermid, text1.length - pointerend) == text2.substring(text2.length - pointermid, text2.length - pointerend)) {
                        pointermin = pointermid;
                        pointerend = pointermin;
                    } else {
                        pointermax = pointermid;
                    }
                    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
                }
                return pointermid;
            };
            diff_match_patch.prototype.diff_commonOverlap_ = function (text1, text2) {
                var text1_length = text1.length;
                var text2_length = text2.length;
                if (text1_length == 0 || text2_length == 0) {
                    return 0;
                }
                if (text1_length > text2_length) {
                    text1 = text1.substring(text1_length - text2_length);
                } else if (text1_length < text2_length) {
                    text2 = text2.substring(0, text1_length);
                }
                var text_length = Math.min(text1_length, text2_length);
                if (text1 == text2) {
                    return text_length;
                }
                var best = 0;
                var length = 1;
                while (true) {
                    var pattern = text1.substring(text_length - length);
                    var found = text2.indexOf(pattern);
                    if (found == -1) {
                        return best;
                    }
                    length += found;
                    if (found == 0 || text1.substring(text_length - length) == text2.substring(0, length)) {
                        best = length;
                        length++;
                    }
                }
            };
            diff_match_patch.prototype.diff_halfMatch_ = function (text1, text2) {
                if (this.Diff_Timeout <= 0) {
                    return null;
                }
                var longtext = text1.length > text2.length ? text1 : text2;
                var shorttext = text1.length > text2.length ? text2 : text1;
                if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {
                    return null;
                }
                var dmp = this;
                function diff_halfMatchI_(longtext, shorttext, i) {
                    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));
                    var j = -1;
                    var best_common = '';
                    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;
                    while ((j = shorttext.indexOf(seed, j + 1)) != -1) {
                        var prefixLength = dmp.diff_commonPrefix(longtext.substring(i), shorttext.substring(j));
                        var suffixLength = dmp.diff_commonSuffix(longtext.substring(0, i), shorttext.substring(0, j));
                        if (best_common.length < suffixLength + prefixLength) {
                            best_common = shorttext.substring(j - suffixLength, j) + shorttext.substring(j, j + prefixLength);
                            best_longtext_a = longtext.substring(0, i - suffixLength);
                            best_longtext_b = longtext.substring(i + prefixLength);
                            best_shorttext_a = shorttext.substring(0, j - suffixLength);
                            best_shorttext_b = shorttext.substring(j + prefixLength);
                        }
                    }
                    if (best_common.length * 2 >= longtext.length) {
                        return [
                            best_longtext_a,
                            best_longtext_b,
                            best_shorttext_a,
                            best_shorttext_b,
                            best_common
                        ];
                    } else {
                        return null;
                    }
                }
                var hm1 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 4));
                var hm2 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 2));
                var hm;
                if (!hm1 && !hm2) {
                    return null;
                } else if (!hm2) {
                    hm = hm1;
                } else if (!hm1) {
                    hm = hm2;
                } else {
                    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;
                }
                var text1_a, text1_b, text2_a, text2_b;
                if (text1.length > text2.length) {
                    text1_a = hm[0];
                    text1_b = hm[1];
                    text2_a = hm[2];
                    text2_b = hm[3];
                } else {
                    text2_a = hm[0];
                    text2_b = hm[1];
                    text1_a = hm[2];
                    text1_b = hm[3];
                }
                var mid_common = hm[4];
                return [
                    text1_a,
                    text1_b,
                    text2_a,
                    text2_b,
                    mid_common
                ];
            };
            diff_match_patch.prototype.diff_cleanupSemantic = function (diffs) {
                var changes = false;
                var equalities = [];
                var equalitiesLength = 0;
                var lastequality = null;
                var pointer = 0;
                var length_insertions1 = 0;
                var length_deletions1 = 0;
                var length_insertions2 = 0;
                var length_deletions2 = 0;
                while (pointer < diffs.length) {
                    if (diffs[pointer][0] == DIFF_EQUAL) {
                        equalities[equalitiesLength++] = pointer;
                        length_insertions1 = length_insertions2;
                        length_deletions1 = length_deletions2;
                        length_insertions2 = 0;
                        length_deletions2 = 0;
                        lastequality = diffs[pointer][1];
                    } else {
                        if (diffs[pointer][0] == DIFF_INSERT) {
                            length_insertions2 += diffs[pointer][1].length;
                        } else {
                            length_deletions2 += diffs[pointer][1].length;
                        }
                        if (lastequality && lastequality.length <= Math.max(length_insertions1, length_deletions1) && lastequality.length <= Math.max(length_insertions2, length_deletions2)) {
                            diffs.splice(equalities[equalitiesLength - 1], 0, [
                                DIFF_DELETE,
                                lastequality
                            ]);
                            diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;
                            equalitiesLength--;
                            equalitiesLength--;
                            pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;
                            length_insertions1 = 0;
                            length_deletions1 = 0;
                            length_insertions2 = 0;
                            length_deletions2 = 0;
                            lastequality = null;
                            changes = true;
                        }
                    }
                    pointer++;
                }
                if (changes) {
                    this.diff_cleanupMerge(diffs);
                }
                this.diff_cleanupSemanticLossless(diffs);
                pointer = 1;
                while (pointer < diffs.length) {
                    if (diffs[pointer - 1][0] == DIFF_DELETE && diffs[pointer][0] == DIFF_INSERT) {
                        var deletion = diffs[pointer - 1][1];
                        var insertion = diffs[pointer][1];
                        var overlap_length1 = this.diff_commonOverlap_(deletion, insertion);
                        var overlap_length2 = this.diff_commonOverlap_(insertion, deletion);
                        if (overlap_length1 >= overlap_length2) {
                            if (overlap_length1 >= deletion.length / 2 || overlap_length1 >= insertion.length / 2) {
                                diffs.splice(pointer, 0, [
                                    DIFF_EQUAL,
                                    insertion.substring(0, overlap_length1)
                                ]);
                                diffs[pointer - 1][1] = deletion.substring(0, deletion.length - overlap_length1);
                                diffs[pointer + 1][1] = insertion.substring(overlap_length1);
                                pointer++;
                            }
                        } else {
                            if (overlap_length2 >= deletion.length / 2 || overlap_length2 >= insertion.length / 2) {
                                diffs.splice(pointer, 0, [
                                    DIFF_EQUAL,
                                    deletion.substring(0, overlap_length2)
                                ]);
                                diffs[pointer - 1][0] = DIFF_INSERT;
                                diffs[pointer - 1][1] = insertion.substring(0, insertion.length - overlap_length2);
                                diffs[pointer + 1][0] = DIFF_DELETE;
                                diffs[pointer + 1][1] = deletion.substring(overlap_length2);
                                pointer++;
                            }
                        }
                        pointer++;
                    }
                    pointer++;
                }
            };
            diff_match_patch.prototype.diff_cleanupSemanticLossless = function (diffs) {
                function diff_cleanupSemanticScore_(one, two) {
                    if (!one || !two) {
                        return 6;
                    }
                    var char1 = one.charAt(one.length - 1);
                    var char2 = two.charAt(0);
                    var nonAlphaNumeric1 = char1.match(diff_match_patch.nonAlphaNumericRegex_);
                    var nonAlphaNumeric2 = char2.match(diff_match_patch.nonAlphaNumericRegex_);
                    var whitespace1 = nonAlphaNumeric1 && char1.match(diff_match_patch.whitespaceRegex_);
                    var whitespace2 = nonAlphaNumeric2 && char2.match(diff_match_patch.whitespaceRegex_);
                    var lineBreak1 = whitespace1 && char1.match(diff_match_patch.linebreakRegex_);
                    var lineBreak2 = whitespace2 && char2.match(diff_match_patch.linebreakRegex_);
                    var blankLine1 = lineBreak1 && one.match(diff_match_patch.blanklineEndRegex_);
                    var blankLine2 = lineBreak2 && two.match(diff_match_patch.blanklineStartRegex_);
                    if (blankLine1 || blankLine2) {
                        return 5;
                    } else if (lineBreak1 || lineBreak2) {
                        return 4;
                    } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {
                        return 3;
                    } else if (whitespace1 || whitespace2) {
                        return 2;
                    } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {
                        return 1;
                    }
                    return 0;
                }
                var pointer = 1;
                while (pointer < diffs.length - 1) {
                    if (diffs[pointer - 1][0] == DIFF_EQUAL && diffs[pointer + 1][0] == DIFF_EQUAL) {
                        var equality1 = diffs[pointer - 1][1];
                        var edit = diffs[pointer][1];
                        var equality2 = diffs[pointer + 1][1];
                        var commonOffset = this.diff_commonSuffix(equality1, edit);
                        if (commonOffset) {
                            var commonString = edit.substring(edit.length - commonOffset);
                            equality1 = equality1.substring(0, equality1.length - commonOffset);
                            edit = commonString + edit.substring(0, edit.length - commonOffset);
                            equality2 = commonString + equality2;
                        }
                        var bestEquality1 = equality1;
                        var bestEdit = edit;
                        var bestEquality2 = equality2;
                        var bestScore = diff_cleanupSemanticScore_(equality1, edit) + diff_cleanupSemanticScore_(edit, equality2);
                        while (edit.charAt(0) === equality2.charAt(0)) {
                            equality1 += edit.charAt(0);
                            edit = edit.substring(1) + equality2.charAt(0);
                            equality2 = equality2.substring(1);
                            var score = diff_cleanupSemanticScore_(equality1, edit) + diff_cleanupSemanticScore_(edit, equality2);
                            if (score >= bestScore) {
                                bestScore = score;
                                bestEquality1 = equality1;
                                bestEdit = edit;
                                bestEquality2 = equality2;
                            }
                        }
                        if (diffs[pointer - 1][1] != bestEquality1) {
                            if (bestEquality1) {
                                diffs[pointer - 1][1] = bestEquality1;
                            } else {
                                diffs.splice(pointer - 1, 1);
                                pointer--;
                            }
                            diffs[pointer][1] = bestEdit;
                            if (bestEquality2) {
                                diffs[pointer + 1][1] = bestEquality2;
                            } else {
                                diffs.splice(pointer + 1, 1);
                                pointer--;
                            }
                        }
                    }
                    pointer++;
                }
            };
            diff_match_patch.nonAlphaNumericRegex_ = /[^a-zA-Z0-9]/;
            diff_match_patch.whitespaceRegex_ = /\s/;
            diff_match_patch.linebreakRegex_ = /[\r\n]/;
            diff_match_patch.blanklineEndRegex_ = /\n\r?\n$/;
            diff_match_patch.blanklineStartRegex_ = /^\r?\n\r?\n/;
            diff_match_patch.prototype.diff_cleanupEfficiency = function (diffs) {
                var changes = false;
                var equalities = [];
                var equalitiesLength = 0;
                var lastequality = null;
                var pointer = 0;
                var pre_ins = false;
                var pre_del = false;
                var post_ins = false;
                var post_del = false;
                while (pointer < diffs.length) {
                    if (diffs[pointer][0] == DIFF_EQUAL) {
                        if (diffs[pointer][1].length < this.Diff_EditCost && (post_ins || post_del)) {
                            equalities[equalitiesLength++] = pointer;
                            pre_ins = post_ins;
                            pre_del = post_del;
                            lastequality = diffs[pointer][1];
                        } else {
                            equalitiesLength = 0;
                            lastequality = null;
                        }
                        post_ins = post_del = false;
                    } else {
                        if (diffs[pointer][0] == DIFF_DELETE) {
                            post_del = true;
                        } else {
                            post_ins = true;
                        }
                        if (lastequality && (pre_ins && pre_del && post_ins && post_del || lastequality.length < this.Diff_EditCost / 2 && pre_ins + pre_del + post_ins + post_del == 3)) {
                            diffs.splice(equalities[equalitiesLength - 1], 0, [
                                DIFF_DELETE,
                                lastequality
                            ]);
                            diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;
                            equalitiesLength--;
                            lastequality = null;
                            if (pre_ins && pre_del) {
                                post_ins = post_del = true;
                                equalitiesLength = 0;
                            } else {
                                equalitiesLength--;
                                pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;
                                post_ins = post_del = false;
                            }
                            changes = true;
                        }
                    }
                    pointer++;
                }
                if (changes) {
                    this.diff_cleanupMerge(diffs);
                }
            };
            diff_match_patch.prototype.diff_cleanupMerge = function (diffs) {
                diffs.push([
                    DIFF_EQUAL,
                    ''
                ]);
                var pointer = 0;
                var count_delete = 0;
                var count_insert = 0;
                var text_delete = '';
                var text_insert = '';
                var commonlength;
                while (pointer < diffs.length) {
                    switch (diffs[pointer][0]) {
                    case DIFF_INSERT:
                        count_insert++;
                        text_insert += diffs[pointer][1];
                        pointer++;
                        break;
                    case DIFF_DELETE:
                        count_delete++;
                        text_delete += diffs[pointer][1];
                        pointer++;
                        break;
                    case DIFF_EQUAL:
                        if (count_delete + count_insert > 1) {
                            if (count_delete !== 0 && count_insert !== 0) {
                                commonlength = this.diff_commonPrefix(text_insert, text_delete);
                                if (commonlength !== 0) {
                                    if (pointer - count_delete - count_insert > 0 && diffs[pointer - count_delete - count_insert - 1][0] == DIFF_EQUAL) {
                                        diffs[pointer - count_delete - count_insert - 1][1] += text_insert.substring(0, commonlength);
                                    } else {
                                        diffs.splice(0, 0, [
                                            DIFF_EQUAL,
                                            text_insert.substring(0, commonlength)
                                        ]);
                                        pointer++;
                                    }
                                    text_insert = text_insert.substring(commonlength);
                                    text_delete = text_delete.substring(commonlength);
                                }
                                commonlength = this.diff_commonSuffix(text_insert, text_delete);
                                if (commonlength !== 0) {
                                    diffs[pointer][1] = text_insert.substring(text_insert.length - commonlength) + diffs[pointer][1];
                                    text_insert = text_insert.substring(0, text_insert.length - commonlength);
                                    text_delete = text_delete.substring(0, text_delete.length - commonlength);
                                }
                            }
                            if (count_delete === 0) {
                                diffs.splice(pointer - count_insert, count_delete + count_insert, [
                                    DIFF_INSERT,
                                    text_insert
                                ]);
                            } else if (count_insert === 0) {
                                diffs.splice(pointer - count_delete, count_delete + count_insert, [
                                    DIFF_DELETE,
                                    text_delete
                                ]);
                            } else {
                                diffs.splice(pointer - count_delete - count_insert, count_delete + count_insert, [
                                    DIFF_DELETE,
                                    text_delete
                                ], [
                                    DIFF_INSERT,
                                    text_insert
                                ]);
                            }
                            pointer = pointer - count_delete - count_insert + (count_delete ? 1 : 0) + (count_insert ? 1 : 0) + 1;
                        } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {
                            diffs[pointer - 1][1] += diffs[pointer][1];
                            diffs.splice(pointer, 1);
                        } else {
                            pointer++;
                        }
                        count_insert = 0;
                        count_delete = 0;
                        text_delete = '';
                        text_insert = '';
                        break;
                    }
                }
                if (diffs[diffs.length - 1][1] === '') {
                    diffs.pop();
                }
                var changes = false;
                pointer = 1;
                while (pointer < diffs.length - 1) {
                    if (diffs[pointer - 1][0] == DIFF_EQUAL && diffs[pointer + 1][0] == DIFF_EQUAL) {
                        if (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {
                            diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length);
                            diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];
                            diffs.splice(pointer - 1, 1);
                            changes = true;
                        } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) == diffs[pointer + 1][1]) {
                            diffs[pointer - 1][1] += diffs[pointer + 1][1];
                            diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1];
                            diffs.splice(pointer + 1, 1);
                            changes = true;
                        }
                    }
                    pointer++;
                }
                if (changes) {
                    this.diff_cleanupMerge(diffs);
                }
            };
            diff_match_patch.prototype.diff_xIndex = function (diffs, loc) {
                var chars1 = 0;
                var chars2 = 0;
                var last_chars1 = 0;
                var last_chars2 = 0;
                var x;
                for (x = 0; x < diffs.length; x++) {
                    if (diffs[x][0] !== DIFF_INSERT) {
                        chars1 += diffs[x][1].length;
                    }
                    if (diffs[x][0] !== DIFF_DELETE) {
                        chars2 += diffs[x][1].length;
                    }
                    if (chars1 > loc) {
                        break;
                    }
                    last_chars1 = chars1;
                    last_chars2 = chars2;
                }
                if (diffs.length != x && diffs[x][0] === DIFF_DELETE) {
                    return last_chars2;
                }
                return last_chars2 + (loc - last_chars1);
            };
            diff_match_patch.prototype.diff_prettyHtml = function (diffs) {
                var html = [];
                var pattern_amp = /&/g;
                var pattern_lt = /</g;
                var pattern_gt = />/g;
                var pattern_para = /\n/g;
                for (var x = 0; x < diffs.length; x++) {
                    var op = diffs[x][0];
                    var data = diffs[x][1];
                    var text = data.replace(pattern_amp, '&amp;').replace(pattern_lt, '&lt;').replace(pattern_gt, '&gt;').replace(pattern_para, '&para;<br>');
                    switch (op) {
                    case DIFF_INSERT:
                        html[x] = '<ins style="background:#e6ffe6;">' + text + '</ins>';
                        break;
                    case DIFF_DELETE:
                        html[x] = '<del style="background:#ffe6e6;">' + text + '</del>';
                        break;
                    case DIFF_EQUAL:
                        html[x] = '<span>' + text + '</span>';
                        break;
                    }
                }
                return html.join('');
            };
            diff_match_patch.prototype.diff_text1 = function (diffs) {
                var text = [];
                for (var x = 0; x < diffs.length; x++) {
                    if (diffs[x][0] !== DIFF_INSERT) {
                        text[x] = diffs[x][1];
                    }
                }
                return text.join('');
            };
            diff_match_patch.prototype.diff_text2 = function (diffs) {
                var text = [];
                for (var x = 0; x < diffs.length; x++) {
                    if (diffs[x][0] !== DIFF_DELETE) {
                        text[x] = diffs[x][1];
                    }
                }
                return text.join('');
            };
            diff_match_patch.prototype.diff_levenshtein = function (diffs) {
                var levenshtein = 0;
                var insertions = 0;
                var deletions = 0;
                for (var x = 0; x < diffs.length; x++) {
                    var op = diffs[x][0];
                    var data = diffs[x][1];
                    switch (op) {
                    case DIFF_INSERT:
                        insertions += data.length;
                        break;
                    case DIFF_DELETE:
                        deletions += data.length;
                        break;
                    case DIFF_EQUAL:
                        levenshtein += Math.max(insertions, deletions);
                        insertions = 0;
                        deletions = 0;
                        break;
                    }
                }
                levenshtein += Math.max(insertions, deletions);
                return levenshtein;
            };
            diff_match_patch.prototype.diff_toDelta = function (diffs) {
                var text = [];
                for (var x = 0; x < diffs.length; x++) {
                    switch (diffs[x][0]) {
                    case DIFF_INSERT:
                        text[x] = '+' + encodeURI(diffs[x][1]);
                        break;
                    case DIFF_DELETE:
                        text[x] = '-' + diffs[x][1].length;
                        break;
                    case DIFF_EQUAL:
                        text[x] = '=' + diffs[x][1].length;
                        break;
                    }
                }
                return text.join('\t').replace(/%20/g, ' ');
            };
            diff_match_patch.prototype.diff_fromDelta = function (text1, delta) {
                var diffs = [];
                var diffsLength = 0;
                var pointer = 0;
                var tokens = delta.split(/\t/g);
                for (var x = 0; x < tokens.length; x++) {
                    var param = tokens[x].substring(1);
                    switch (tokens[x].charAt(0)) {
                    case '+':
                        try {
                            diffs[diffsLength++] = [
                                DIFF_INSERT,
                                decodeURI(param)
                            ];
                        } catch (ex) {
                            throw new Error('Illegal escape in diff_fromDelta: ' + param);
                        }
                        break;
                    case '-':
                    case '=':
                        var n = parseInt(param, 10);
                        if (isNaN(n) || n < 0) {
                            throw new Error('Invalid number in diff_fromDelta: ' + param);
                        }
                        var text = text1.substring(pointer, pointer += n);
                        if (tokens[x].charAt(0) == '=') {
                            diffs[diffsLength++] = [
                                DIFF_EQUAL,
                                text
                            ];
                        } else {
                            diffs[diffsLength++] = [
                                DIFF_DELETE,
                                text
                            ];
                        }
                        break;
                    default:
                        if (tokens[x]) {
                            throw new Error('Invalid diff operation in diff_fromDelta: ' + tokens[x]);
                        }
                    }
                }
                if (pointer != text1.length) {
                    throw new Error('Delta length (' + pointer + ') does not equal source text length (' + text1.length + ').');
                }
                return diffs;
            };
            diff_match_patch.prototype.match_main = function (text, pattern, loc) {
                if (text == null || pattern == null || loc == null) {
                    throw new Error('Null input. (match_main)');
                }
                loc = Math.max(0, Math.min(loc, text.length));
                if (text == pattern) {
                    return 0;
                } else if (!text.length) {
                    return -1;
                } else if (text.substring(loc, loc + pattern.length) == pattern) {
                    return loc;
                } else {
                    return this.match_bitap_(text, pattern, loc);
                }
            };
            diff_match_patch.prototype.match_bitap_ = function (text, pattern, loc) {
                if (pattern.length > this.Match_MaxBits) {
                    throw new Error('Pattern too long for this browser.');
                }
                var s = this.match_alphabet_(pattern);
                var dmp = this;
                function match_bitapScore_(e, x) {
                    var accuracy = e / pattern.length;
                    var proximity = Math.abs(loc - x);
                    if (!dmp.Match_Distance) {
                        return proximity ? 1 : accuracy;
                    }
                    return accuracy + proximity / dmp.Match_Distance;
                }
                var score_threshold = this.Match_Threshold;
                var best_loc = text.indexOf(pattern, loc);
                if (best_loc != -1) {
                    score_threshold = Math.min(match_bitapScore_(0, best_loc), score_threshold);
                    best_loc = text.lastIndexOf(pattern, loc + pattern.length);
                    if (best_loc != -1) {
                        score_threshold = Math.min(match_bitapScore_(0, best_loc), score_threshold);
                    }
                }
                var matchmask = 1 << pattern.length - 1;
                best_loc = -1;
                var bin_min, bin_mid;
                var bin_max = pattern.length + text.length;
                var last_rd;
                for (var d = 0; d < pattern.length; d++) {
                    bin_min = 0;
                    bin_mid = bin_max;
                    while (bin_min < bin_mid) {
                        if (match_bitapScore_(d, loc + bin_mid) <= score_threshold) {
                            bin_min = bin_mid;
                        } else {
                            bin_max = bin_mid;
                        }
                        bin_mid = Math.floor((bin_max - bin_min) / 2 + bin_min);
                    }
                    bin_max = bin_mid;
                    var start = Math.max(1, loc - bin_mid + 1);
                    var finish = Math.min(loc + bin_mid, text.length) + pattern.length;
                    var rd = Array(finish + 2);
                    rd[finish + 1] = (1 << d) - 1;
                    for (var j = finish; j >= start; j--) {
                        var charMatch = s[text.charAt(j - 1)];
                        if (d === 0) {
                            rd[j] = (rd[j + 1] << 1 | 1) & charMatch;
                        } else {
                            rd[j] = (rd[j + 1] << 1 | 1) & charMatch | ((last_rd[j + 1] | last_rd[j]) << 1 | 1) | last_rd[j + 1];
                        }
                        if (rd[j] & matchmask) {
                            var score = match_bitapScore_(d, j - 1);
                            if (score <= score_threshold) {
                                score_threshold = score;
                                best_loc = j - 1;
                                if (best_loc > loc) {
                                    start = Math.max(1, 2 * loc - best_loc);
                                } else {
                                    break;
                                }
                            }
                        }
                    }
                    if (match_bitapScore_(d + 1, loc) > score_threshold) {
                        break;
                    }
                    last_rd = rd;
                }
                return best_loc;
            };
            diff_match_patch.prototype.match_alphabet_ = function (pattern) {
                var s = {};
                for (var i = 0; i < pattern.length; i++) {
                    s[pattern.charAt(i)] = 0;
                }
                for (var i = 0; i < pattern.length; i++) {
                    s[pattern.charAt(i)] |= 1 << pattern.length - i - 1;
                }
                return s;
            };
            diff_match_patch.prototype.patch_addContext_ = function (patch, text) {
                if (text.length == 0) {
                    return;
                }
                var pattern = text.substring(patch.start2, patch.start2 + patch.length1);
                var padding = 0;
                while (text.indexOf(pattern) != text.lastIndexOf(pattern) && pattern.length < this.Match_MaxBits - this.Patch_Margin - this.Patch_Margin) {
                    padding += this.Patch_Margin;
                    pattern = text.substring(patch.start2 - padding, patch.start2 + patch.length1 + padding);
                }
                padding += this.Patch_Margin;
                var prefix = text.substring(patch.start2 - padding, patch.start2);
                if (prefix) {
                    patch.diffs.unshift([
                        DIFF_EQUAL,
                        prefix
                    ]);
                }
                var suffix = text.substring(patch.start2 + patch.length1, patch.start2 + patch.length1 + padding);
                if (suffix) {
                    patch.diffs.push([
                        DIFF_EQUAL,
                        suffix
                    ]);
                }
                patch.start1 -= prefix.length;
                patch.start2 -= prefix.length;
                patch.length1 += prefix.length + suffix.length;
                patch.length2 += prefix.length + suffix.length;
            };
            diff_match_patch.prototype.patch_make = function (a, opt_b, opt_c) {
                var text1, diffs;
                if (typeof a == 'string' && typeof opt_b == 'string' && typeof opt_c == 'undefined') {
                    text1 = a;
                    diffs = this.diff_main(text1, opt_b, true);
                    if (diffs.length > 2) {
                        this.diff_cleanupSemantic(diffs);
                        this.diff_cleanupEfficiency(diffs);
                    }
                } else if (a && typeof a == 'object' && typeof opt_b == 'undefined' && typeof opt_c == 'undefined') {
                    diffs = a;
                    text1 = this.diff_text1(diffs);
                } else if (typeof a == 'string' && opt_b && typeof opt_b == 'object' && typeof opt_c == 'undefined') {
                    text1 = a;
                    diffs = opt_b;
                } else if (typeof a == 'string' && typeof opt_b == 'string' && opt_c && typeof opt_c == 'object') {
                    text1 = a;
                    diffs = opt_c;
                } else {
                    throw new Error('Unknown call format to patch_make.');
                }
                if (diffs.length === 0) {
                    return [];
                }
                var patches = [];
                var patch = new diff_match_patch.patch_obj();
                var patchDiffLength = 0;
                var char_count1 = 0;
                var char_count2 = 0;
                var prepatch_text = text1;
                var postpatch_text = text1;
                for (var x = 0; x < diffs.length; x++) {
                    var diff_type = diffs[x][0];
                    var diff_text = diffs[x][1];
                    if (!patchDiffLength && diff_type !== DIFF_EQUAL) {
                        patch.start1 = char_count1;
                        patch.start2 = char_count2;
                    }
                    switch (diff_type) {
                    case DIFF_INSERT:
                        patch.diffs[patchDiffLength++] = diffs[x];
                        patch.length2 += diff_text.length;
                        postpatch_text = postpatch_text.substring(0, char_count2) + diff_text + postpatch_text.substring(char_count2);
                        break;
                    case DIFF_DELETE:
                        patch.length1 += diff_text.length;
                        patch.diffs[patchDiffLength++] = diffs[x];
                        postpatch_text = postpatch_text.substring(0, char_count2) + postpatch_text.substring(char_count2 + diff_text.length);
                        break;
                    case DIFF_EQUAL:
                        if (diff_text.length <= 2 * this.Patch_Margin && patchDiffLength && diffs.length != x + 1) {
                            patch.diffs[patchDiffLength++] = diffs[x];
                            patch.length1 += diff_text.length;
                            patch.length2 += diff_text.length;
                        } else if (diff_text.length >= 2 * this.Patch_Margin) {
                            if (patchDiffLength) {
                                this.patch_addContext_(patch, prepatch_text);
                                patches.push(patch);
                                patch = new diff_match_patch.patch_obj();
                                patchDiffLength = 0;
                                prepatch_text = postpatch_text;
                                char_count1 = char_count2;
                            }
                        }
                        break;
                    }
                    if (diff_type !== DIFF_INSERT) {
                        char_count1 += diff_text.length;
                    }
                    if (diff_type !== DIFF_DELETE) {
                        char_count2 += diff_text.length;
                    }
                }
                if (patchDiffLength) {
                    this.patch_addContext_(patch, prepatch_text);
                    patches.push(patch);
                }
                return patches;
            };
            diff_match_patch.prototype.patch_deepCopy = function (patches) {
                var patchesCopy = [];
                for (var x = 0; x < patches.length; x++) {
                    var patch = patches[x];
                    var patchCopy = new diff_match_patch.patch_obj();
                    patchCopy.diffs = [];
                    for (var y = 0; y < patch.diffs.length; y++) {
                        patchCopy.diffs[y] = patch.diffs[y].slice();
                    }
                    patchCopy.start1 = patch.start1;
                    patchCopy.start2 = patch.start2;
                    patchCopy.length1 = patch.length1;
                    patchCopy.length2 = patch.length2;
                    patchesCopy[x] = patchCopy;
                }
                return patchesCopy;
            };
            diff_match_patch.prototype.patch_apply = function (patches, text) {
                if (patches.length == 0) {
                    return [
                        text,
                        []
                    ];
                }
                patches = this.patch_deepCopy(patches);
                var nullPadding = this.patch_addPadding(patches);
                text = nullPadding + text + nullPadding;
                this.patch_splitMax(patches);
                var delta = 0;
                var results = [];
                for (var x = 0; x < patches.length; x++) {
                    var expected_loc = patches[x].start2 + delta;
                    var text1 = this.diff_text1(patches[x].diffs);
                    var start_loc;
                    var end_loc = -1;
                    if (text1.length > this.Match_MaxBits) {
                        start_loc = this.match_main(text, text1.substring(0, this.Match_MaxBits), expected_loc);
                        if (start_loc != -1) {
                            end_loc = this.match_main(text, text1.substring(text1.length - this.Match_MaxBits), expected_loc + text1.length - this.Match_MaxBits);
                            if (end_loc == -1 || start_loc >= end_loc) {
                                start_loc = -1;
                            }
                        }
                    } else {
                        start_loc = this.match_main(text, text1, expected_loc);
                    }
                    if (start_loc == -1) {
                        results[x] = false;
                        delta -= patches[x].length2 - patches[x].length1;
                    } else {
                        results[x] = true;
                        delta = start_loc - expected_loc;
                        var text2;
                        if (end_loc == -1) {
                            text2 = text.substring(start_loc, start_loc + text1.length);
                        } else {
                            text2 = text.substring(start_loc, end_loc + this.Match_MaxBits);
                        }
                        if (text1 == text2) {
                            text = text.substring(0, start_loc) + this.diff_text2(patches[x].diffs) + text.substring(start_loc + text1.length);
                        } else {
                            var diffs = this.diff_main(text1, text2, false);
                            if (text1.length > this.Match_MaxBits && this.diff_levenshtein(diffs) / text1.length > this.Patch_DeleteThreshold) {
                                results[x] = false;
                            } else {
                                this.diff_cleanupSemanticLossless(diffs);
                                var index1 = 0;
                                var index2;
                                for (var y = 0; y < patches[x].diffs.length; y++) {
                                    var mod = patches[x].diffs[y];
                                    if (mod[0] !== DIFF_EQUAL) {
                                        index2 = this.diff_xIndex(diffs, index1);
                                    }
                                    if (mod[0] === DIFF_INSERT) {
                                        text = text.substring(0, start_loc + index2) + mod[1] + text.substring(start_loc + index2);
                                    } else if (mod[0] === DIFF_DELETE) {
                                        text = text.substring(0, start_loc + index2) + text.substring(start_loc + this.diff_xIndex(diffs, index1 + mod[1].length));
                                    }
                                    if (mod[0] !== DIFF_DELETE) {
                                        index1 += mod[1].length;
                                    }
                                }
                            }
                        }
                    }
                }
                text = text.substring(nullPadding.length, text.length - nullPadding.length);
                return [
                    text,
                    results
                ];
            };
            diff_match_patch.prototype.patch_addPadding = function (patches) {
                var paddingLength = this.Patch_Margin;
                var nullPadding = '';
                for (var x = 1; x <= paddingLength; x++) {
                    nullPadding += String.fromCharCode(x);
                }
                for (var x = 0; x < patches.length; x++) {
                    patches[x].start1 += paddingLength;
                    patches[x].start2 += paddingLength;
                }
                var patch = patches[0];
                var diffs = patch.diffs;
                if (diffs.length == 0 || diffs[0][0] != DIFF_EQUAL) {
                    diffs.unshift([
                        DIFF_EQUAL,
                        nullPadding
                    ]);
                    patch.start1 -= paddingLength;
                    patch.start2 -= paddingLength;
                    patch.length1 += paddingLength;
                    patch.length2 += paddingLength;
                } else if (paddingLength > diffs[0][1].length) {
                    var extraLength = paddingLength - diffs[0][1].length;
                    diffs[0][1] = nullPadding.substring(diffs[0][1].length) + diffs[0][1];
                    patch.start1 -= extraLength;
                    patch.start2 -= extraLength;
                    patch.length1 += extraLength;
                    patch.length2 += extraLength;
                }
                patch = patches[patches.length - 1];
                diffs = patch.diffs;
                if (diffs.length == 0 || diffs[diffs.length - 1][0] != DIFF_EQUAL) {
                    diffs.push([
                        DIFF_EQUAL,
                        nullPadding
                    ]);
                    patch.length1 += paddingLength;
                    patch.length2 += paddingLength;
                } else if (paddingLength > diffs[diffs.length - 1][1].length) {
                    var extraLength = paddingLength - diffs[diffs.length - 1][1].length;
                    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength);
                    patch.length1 += extraLength;
                    patch.length2 += extraLength;
                }
                return nullPadding;
            };
            diff_match_patch.prototype.patch_splitMax = function (patches) {
                var patch_size = this.Match_MaxBits;
                for (var x = 0; x < patches.length; x++) {
                    if (patches[x].length1 <= patch_size) {
                        continue;
                    }
                    var bigpatch = patches[x];
                    patches.splice(x--, 1);
                    var start1 = bigpatch.start1;
                    var start2 = bigpatch.start2;
                    var precontext = '';
                    while (bigpatch.diffs.length !== 0) {
                        var patch = new diff_match_patch.patch_obj();
                        var empty = true;
                        patch.start1 = start1 - precontext.length;
                        patch.start2 = start2 - precontext.length;
                        if (precontext !== '') {
                            patch.length1 = patch.length2 = precontext.length;
                            patch.diffs.push([
                                DIFF_EQUAL,
                                precontext
                            ]);
                        }
                        while (bigpatch.diffs.length !== 0 && patch.length1 < patch_size - this.Patch_Margin) {
                            var diff_type = bigpatch.diffs[0][0];
                            var diff_text = bigpatch.diffs[0][1];
                            if (diff_type === DIFF_INSERT) {
                                patch.length2 += diff_text.length;
                                start2 += diff_text.length;
                                patch.diffs.push(bigpatch.diffs.shift());
                                empty = false;
                            } else if (diff_type === DIFF_DELETE && patch.diffs.length == 1 && patch.diffs[0][0] == DIFF_EQUAL && diff_text.length > 2 * patch_size) {
                                patch.length1 += diff_text.length;
                                start1 += diff_text.length;
                                empty = false;
                                patch.diffs.push([
                                    diff_type,
                                    diff_text
                                ]);
                                bigpatch.diffs.shift();
                            } else {
                                diff_text = diff_text.substring(0, patch_size - patch.length1 - this.Patch_Margin);
                                patch.length1 += diff_text.length;
                                start1 += diff_text.length;
                                if (diff_type === DIFF_EQUAL) {
                                    patch.length2 += diff_text.length;
                                    start2 += diff_text.length;
                                } else {
                                    empty = false;
                                }
                                patch.diffs.push([
                                    diff_type,
                                    diff_text
                                ]);
                                if (diff_text == bigpatch.diffs[0][1]) {
                                    bigpatch.diffs.shift();
                                } else {
                                    bigpatch.diffs[0][1] = bigpatch.diffs[0][1].substring(diff_text.length);
                                }
                            }
                        }
                        precontext = this.diff_text2(patch.diffs);
                        precontext = precontext.substring(precontext.length - this.Patch_Margin);
                        var postcontext = this.diff_text1(bigpatch.diffs).substring(0, this.Patch_Margin);
                        if (postcontext !== '') {
                            patch.length1 += postcontext.length;
                            patch.length2 += postcontext.length;
                            if (patch.diffs.length !== 0 && patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL) {
                                patch.diffs[patch.diffs.length - 1][1] += postcontext;
                            } else {
                                patch.diffs.push([
                                    DIFF_EQUAL,
                                    postcontext
                                ]);
                            }
                        }
                        if (!empty) {
                            patches.splice(++x, 0, patch);
                        }
                    }
                }
            };
            diff_match_patch.prototype.patch_toText = function (patches) {
                var text = [];
                for (var x = 0; x < patches.length; x++) {
                    text[x] = patches[x];
                }
                return text.join('');
            };
            diff_match_patch.prototype.patch_fromText = function (textline) {
                var patches = [];
                if (!textline) {
                    return patches;
                }
                var text = textline.split('\n');
                var textPointer = 0;
                var patchHeader = /^@@ -(\d+),?(\d*) \+(\d+),?(\d*) @@$/;
                while (textPointer < text.length) {
                    var m = text[textPointer].match(patchHeader);
                    if (!m) {
                        throw new Error('Invalid patch string: ' + text[textPointer]);
                    }
                    var patch = new diff_match_patch.patch_obj();
                    patches.push(patch);
                    patch.start1 = parseInt(m[1], 10);
                    if (m[2] === '') {
                        patch.start1--;
                        patch.length1 = 1;
                    } else if (m[2] == '0') {
                        patch.length1 = 0;
                    } else {
                        patch.start1--;
                        patch.length1 = parseInt(m[2], 10);
                    }
                    patch.start2 = parseInt(m[3], 10);
                    if (m[4] === '') {
                        patch.start2--;
                        patch.length2 = 1;
                    } else if (m[4] == '0') {
                        patch.length2 = 0;
                    } else {
                        patch.start2--;
                        patch.length2 = parseInt(m[4], 10);
                    }
                    textPointer++;
                    while (textPointer < text.length) {
                        var sign = text[textPointer].charAt(0);
                        try {
                            var line = decodeURI(text[textPointer].substring(1));
                        } catch (ex) {
                            throw new Error('Illegal escape in patch_fromText: ' + line);
                        }
                        if (sign == '-') {
                            patch.diffs.push([
                                DIFF_DELETE,
                                line
                            ]);
                        } else if (sign == '+') {
                            patch.diffs.push([
                                DIFF_INSERT,
                                line
                            ]);
                        } else if (sign == ' ') {
                            patch.diffs.push([
                                DIFF_EQUAL,
                                line
                            ]);
                        } else if (sign == '@') {
                            break;
                        } else if (sign === '') {
                        } else {
                            throw new Error('Invalid patch mode "' + sign + '" in: ' + line);
                        }
                        textPointer++;
                    }
                }
                return patches;
            };
            diff_match_patch.patch_obj = function () {
                this.diffs = [];
                this.start1 = null;
                this.start2 = null;
                this.length1 = 0;
                this.length2 = 0;
            };
            diff_match_patch.patch_obj.prototype.toString = function () {
                var coords1, coords2;
                if (this.length1 === 0) {
                    coords1 = this.start1 + ',0';
                } else if (this.length1 == 1) {
                    coords1 = this.start1 + 1;
                } else {
                    coords1 = this.start1 + 1 + ',' + this.length1;
                }
                if (this.length2 === 0) {
                    coords2 = this.start2 + ',0';
                } else if (this.length2 == 1) {
                    coords2 = this.start2 + 1;
                } else {
                    coords2 = this.start2 + 1 + ',' + this.length2;
                }
                var text = ['@@ -' + coords1 + ' +' + coords2 + ' @@\n'];
                var op;
                for (var x = 0; x < this.diffs.length; x++) {
                    switch (this.diffs[x][0]) {
                    case DIFF_INSERT:
                        op = '+';
                        break;
                    case DIFF_DELETE:
                        op = '-';
                        break;
                    case DIFF_EQUAL:
                        op = ' ';
                        break;
                    }
                    text[x + 1] = op + encodeURI(this.diffs[x][1]) + '\n';
                }
                return text.join('').replace(/%20/g, ' ');
            };
            this['diff_match_patch'] = diff_match_patch;
            this['DIFF_DELETE'] = DIFF_DELETE;
            this['DIFF_INSERT'] = DIFF_INSERT;
            this['DIFF_EQUAL'] = DIFF_EQUAL;
        },
        {}
    ],
    327: [
        function (require, module, exports) {
            var hasOwn = Object.prototype.hasOwnProperty;
            module.exports = function has(obj, property) {
                return hasOwn.call(obj, property);
            };
        },
        {}
    ],
    328: [
        function (require, module, exports) {
            var indexOf = [].indexOf;
            module.exports = function (arr, obj) {
                if (indexOf)
                    return arr.indexOf(obj);
                for (var i = 0; i < arr.length; ++i) {
                    if (arr[i] === obj)
                        return i;
                }
                return -1;
            };
        },
        {}
    ],
    329: [
        function (require, module, exports) {
            if (typeof Object.create === 'function') {
                module.exports = function inherits(ctor, superCtor) {
                    ctor.super_ = superCtor;
                    ctor.prototype = Object.create(superCtor.prototype, {
                        constructor: {
                            value: ctor,
                            enumerable: false,
                            writable: true,
                            configurable: true
                        }
                    });
                };
            } else {
                module.exports = function inherits(ctor, superCtor) {
                    ctor.super_ = superCtor;
                    var TempCtor = function () {
                    };
                    TempCtor.prototype = superCtor.prototype;
                    ctor.prototype = new TempCtor();
                    ctor.prototype.constructor = ctor;
                };
            }
        },
        {}
    ],
    330: [
        function (require, module, exports) {
            var toString = {}.toString;
            module.exports = Array.isArray || function (arr) {
                return toString.call(arr) == '[object Array]';
            };
        },
        {}
    ],
    331: [
        function (require, module, exports) {
            'use strict';
            var hasOwnProperty = Object.prototype.hasOwnProperty;
            var propIsEnumerable = Object.prototype.propertyIsEnumerable;
            function toObject(val) {
                if (val === null || val === undefined) {
                    throw new TypeError('Object.assign cannot be called with null or undefined');
                }
                return Object(val);
            }
            module.exports = Object.assign || function (target, source) {
                var from;
                var to = toObject(target);
                var symbols;
                for (var s = 1; s < arguments.length; s++) {
                    from = Object(arguments[s]);
                    for (var key in from) {
                        if (hasOwnProperty.call(from, key)) {
                            to[key] = from[key];
                        }
                    }
                    if (Object.getOwnPropertySymbols) {
                        symbols = Object.getOwnPropertySymbols(from);
                        for (var i = 0; i < symbols.length; i++) {
                            if (propIsEnumerable.call(from, symbols[i])) {
                                to[symbols[i]] = from[symbols[i]];
                            }
                        }
                    }
                }
                return to;
            };
        },
        {}
    ],
    332: [
        function (require, module, exports) {
            var objectCreate = Object.create;
            var defineProperties = require('object-define-property').defineProperties;
            var createEmpty;
            var supportsProto = Object.prototype.__proto__ === null;
            if (supportsProto || typeof document === 'undefined') {
                createEmpty = function () {
                    return { '__proto__': null };
                };
            } else {
                createEmpty = function () {
                    var iframe = document.createElement('iframe');
                    var parent = document.body || document.documentElement;
                    iframe.style.display = 'none';
                    parent.appendChild(iframe);
                    iframe.src = 'javascript:';
                    var empty = iframe.contentWindow.Object.prototype;
                    parent.removeChild(iframe);
                    iframe = null;
                    delete empty.constructor;
                    delete empty.hasOwnProperty;
                    delete empty.propertyIsEnumerable;
                    delete empty.isPrototypeOf;
                    delete empty.toLocaleString;
                    delete empty.toString;
                    delete empty.valueOf;
                    empty.__proto__ = null;
                    function Empty() {
                    }
                    Empty.prototype = empty;
                    createEmpty = function () {
                        return new Empty();
                    };
                    return new Empty();
                };
            }
            function create(prototype, properties) {
                var object;
                function Type() {
                }
                if (prototype === null) {
                    object = createEmpty();
                } else {
                    if (typeof prototype !== 'object' && typeof prototype !== 'function') {
                        throw new TypeError('Object prototype may only be an Object or null');
                    }
                    Type.prototype = prototype;
                    object = new Type();
                    object.__proto__ = prototype;
                }
                if (properties !== void 0) {
                    defineProperties(object, properties);
                }
                return object;
            }
            if (!objectCreate) {
                module.exports = create;
            } else {
                module.exports = require('./index');
            }
        },
        {
            './index': 332,
            'object-define-property': 333
        }
    ],
    333: [
        function (require, module, exports) {
            var has = require('has');
            var bind = require('function-bind');
            var ERR_NON_OBJECT_DESCRIPTOR = 'Property description must be an object: ';
            var ERR_NON_OBJECT_TARGET = 'Object.defineProperty called on non-object: ';
            var ERR_ACCESSORS_NOT_SUPPORTED = 'getters & setters can not be defined ' + 'on this javascript engine';
            var defProp = Object.defineProperty, defProps = Object.defineProperties;
            var call = Function.prototype.call;
            var prototypeOfObject = Object.prototype;
            var defineGetter;
            var defineSetter;
            var lookupGetter;
            var lookupSetter;
            var supportsAccessors;
            if (supportsAccessors = has(prototypeOfObject, '__defineGetter__')) {
                defineGetter = bind.call(call, prototypeOfObject.__defineGetter__);
                defineSetter = bind.call(call, prototypeOfObject.__defineSetter__);
                lookupGetter = bind.call(call, prototypeOfObject.__lookupGetter__);
                lookupSetter = bind.call(call, prototypeOfObject.__lookupSetter__);
            }
            function doesDefinePropertyWork(object) {
                try {
                    defProp.call(Object, object, 'sentinel', {});
                    return 'sentinel' in object;
                } catch (exception) {
                }
            }
            if (defProp) {
                var definePropertyWorksOnObject = doesDefinePropertyWork({});
                var definePropertyWorksOnDom = typeof document === 'undefined' || doesDefinePropertyWork(document.createElement('div'));
                if (!definePropertyWorksOnObject || !definePropertyWorksOnDom) {
                    var definePropertyFallback = defProp, definePropertiesFallback = defProps;
                }
            }
            function defineProperty(object, property, descriptor) {
                if (typeof object !== 'object' && typeof object !== 'function' || object === null) {
                    throw new TypeError(ERR_NON_OBJECT_TARGET + object);
                }
                if (typeof descriptor !== 'object' && typeof descriptor !== 'function' || descriptor === null) {
                    throw new TypeError(ERR_NON_OBJECT_DESCRIPTOR + descriptor);
                }
                if (definePropertyFallback) {
                    try {
                        return definePropertyFallback.call(Object, object, property, descriptor);
                    } catch (exception) {
                    }
                }
                if (has(descriptor, 'value')) {
                    if (supportsAccessors && (lookupGetter(object, property) || lookupSetter(object, property))) {
                        var prototype = object.__proto__;
                        object.__proto__ = prototypeOfObject;
                        delete object[property];
                        object[property] = descriptor.value;
                        object.__proto__ = prototype;
                    } else {
                        object[property] = descriptor.value;
                    }
                } else {
                    if (!supportsAccessors) {
                        throw new TypeError(ERR_ACCESSORS_NOT_SUPPORTED);
                    }
                    if (has(descriptor, 'get')) {
                        defineGetter(object, property, descriptor.get);
                    }
                    if (has(descriptor, 'set')) {
                        defineSetter(object, property, descriptor.set);
                    }
                }
                return object;
            }
            function defineProperties(object, properties) {
                if (definePropertiesFallback) {
                    try {
                        return definePropertiesFallback.call(Object, object, properties);
                    } catch (exception) {
                    }
                }
                for (var property in properties) {
                    if (has(properties, property) && property !== '__proto__') {
                        defineProperty(object, property, properties[property]);
                    }
                }
                return object;
            }
            if (!defProp || definePropertyFallback) {
                module.exports = {
                    defineProperty: defineProperty,
                    defineProperties: defineProperties
                };
            } else {
                module.exports = require('./index');
            }
        },
        {
            './index': 333,
            'function-bind': 324,
            'has': 327
        }
    ],
    334: [
        function (require, module, exports) {
            'use strict';
            var has = Object.prototype.hasOwnProperty;
            var toStr = Object.prototype.toString;
            var slice = Array.prototype.slice;
            var isArgs = require('./isArguments');
            var hasDontEnumBug = !{ toString: null }.propertyIsEnumerable('toString');
            var hasProtoEnumBug = function () {
            }.propertyIsEnumerable('prototype');
            var dontEnums = [
                'toString',
                'toLocaleString',
                'valueOf',
                'hasOwnProperty',
                'isPrototypeOf',
                'propertyIsEnumerable',
                'constructor'
            ];
            var equalsConstructorPrototype = function (o) {
                var ctor = o.constructor;
                return ctor && ctor.prototype === o;
            };
            var blacklistedKeys = {
                $console: true,
                $frame: true,
                $frameElement: true,
                $frames: true,
                $parent: true,
                $self: true,
                $webkitIndexedDB: true,
                $webkitStorageInfo: true,
                $window: true
            };
            var hasAutomationEqualityBug = function () {
                if (typeof window === 'undefined') {
                    return false;
                }
                for (var k in window) {
                    try {
                        if (!blacklistedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
                            try {
                                equalsConstructorPrototype(window[k]);
                            } catch (e) {
                                return true;
                            }
                        }
                    } catch (e) {
                        return true;
                    }
                }
                return false;
            }();
            var equalsConstructorPrototypeIfNotBuggy = function (o) {
                if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
                    return equalsConstructorPrototype(o);
                }
                try {
                    return equalsConstructorPrototype(o);
                } catch (e) {
                    return false;
                }
            };
            var keysShim = function keys(object) {
                var isObject = object !== null && typeof object === 'object';
                var isFunction = toStr.call(object) === '[object Function]';
                var isArguments = isArgs(object);
                var isString = isObject && toStr.call(object) === '[object String]';
                var theKeys = [];
                if (!isObject && !isFunction && !isArguments) {
                    throw new TypeError('Object.keys called on a non-object');
                }
                var skipProto = hasProtoEnumBug && isFunction;
                if (isString && object.length > 0 && !has.call(object, 0)) {
                    for (var i = 0; i < object.length; ++i) {
                        theKeys.push(String(i));
                    }
                }
                if (isArguments && object.length > 0) {
                    for (var j = 0; j < object.length; ++j) {
                        theKeys.push(String(j));
                    }
                } else {
                    for (var name in object) {
                        if (!(skipProto && name === 'prototype') && has.call(object, name)) {
                            theKeys.push(String(name));
                        }
                    }
                }
                if (hasDontEnumBug) {
                    var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);
                    for (var k = 0; k < dontEnums.length; ++k) {
                        if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
                            theKeys.push(dontEnums[k]);
                        }
                    }
                }
                return theKeys;
            };
            keysShim.shim = function shimObjectKeys() {
                if (Object.keys) {
                    var keysWorksWithArguments = function () {
                        return (Object.keys(arguments) || '').length === 2;
                    }(1, 2);
                    if (!keysWorksWithArguments) {
                        var originalKeys = Object.keys;
                        Object.keys = function keys(object) {
                            if (isArgs(object)) {
                                return originalKeys(slice.call(object));
                            } else {
                                return originalKeys(object);
                            }
                        };
                    }
                } else {
                    Object.keys = keysShim;
                }
                return Object.keys || keysShim;
            };
            module.exports = keysShim;
        },
        { './isArguments': 335 }
    ],
    335: [
        function (require, module, exports) {
            'use strict';
            var toStr = Object.prototype.toString;
            module.exports = function isArguments(value) {
                var str = toStr.call(value);
                var isArgs = str === '[object Arguments]';
                if (!isArgs) {
                    isArgs = str !== '[object Array]' && value !== null && typeof value === 'object' && typeof value.length === 'number' && value.length >= 0 && toStr.call(value.callee) === '[object Function]';
                }
                return isArgs;
            };
        },
        {}
    ],
    336: [
        function (require, module, exports) {
            'use strict';
            module.exports = require('./lib/create');
        },
        { './lib/create': 341 }
    ],
    337: [
        function (require, module, exports) {
            'use strict';
            function AssertionRenderer(config) {
            }
            AssertionRenderer.prototype.init = function (traversal) {
                var assertionLine;
                traversal.on('start', function (context) {
                    assertionLine = context.source.content;
                });
                traversal.on('render', function (writer) {
                    writer.write('');
                    writer.write(assertionLine);
                });
            };
            module.exports = AssertionRenderer;
        },
        {}
    ],
    338: [
        function (require, module, exports) {
            'use strict';
            var typeName = require('type-name');
            var keys = Object.keys || require('object-keys');
            var syntax = require('estraverse').Syntax;
            var forEach = require('array-foreach');
            function BinaryExpressionRenderer(config) {
                this.config = config;
                this.stringify = config.stringify;
                this.diff = config.diff;
                this.espathToPair = {};
            }
            BinaryExpressionRenderer.prototype.init = function (traversal) {
                var _this = this;
                traversal.on('esnode', function (esNode) {
                    var pair;
                    if (!esNode.isCaptured()) {
                        if (isTargetBinaryExpression(esNode.getParent()) && esNode.currentNode.type === syntax.Literal) {
                            _this.espathToPair[esNode.parentEspath][esNode.currentProp] = {
                                code: esNode.code(),
                                value: esNode.value()
                            };
                        }
                        return;
                    }
                    if (isTargetBinaryExpression(esNode.getParent())) {
                        _this.espathToPair[esNode.parentEspath][esNode.currentProp] = {
                            code: esNode.code(),
                            value: esNode.value()
                        };
                    }
                    if (isTargetBinaryExpression(esNode)) {
                        pair = {
                            operator: esNode.currentNode.operator,
                            value: esNode.value()
                        };
                        _this.espathToPair[esNode.espath] = pair;
                    }
                });
                traversal.on('render', function (writer) {
                    var pairs = [];
                    forEach(keys(_this.espathToPair), function (espath) {
                        var pair = _this.espathToPair[espath];
                        if (pair.left && pair.right) {
                            pairs.push(pair);
                        }
                    });
                    forEach(pairs, function (pair) {
                        _this.compare(pair, writer);
                    });
                });
            };
            BinaryExpressionRenderer.prototype.compare = function (pair, writer) {
                if (isStringDiffTarget(pair)) {
                    this.showStringDiff(pair, writer);
                } else {
                    this.showExpectedAndActual(pair, writer);
                }
            };
            BinaryExpressionRenderer.prototype.showExpectedAndActual = function (pair, writer) {
                writer.write('');
                writer.write('[' + typeName(pair.right.value) + '] ' + pair.right.code);
                writer.write('=> ' + this.stringify(pair.right.value));
                writer.write('[' + typeName(pair.left.value) + '] ' + pair.left.code);
                writer.write('=> ' + this.stringify(pair.left.value));
            };
            BinaryExpressionRenderer.prototype.showStringDiff = function (pair, writer) {
                writer.write('');
                writer.write('--- [string] ' + pair.right.code);
                writer.write('+++ [string] ' + pair.left.code);
                writer.write(this.diff(pair.right.value, pair.left.value, this.config));
            };
            function isTargetBinaryExpression(esNode) {
                return esNode && esNode.currentNode.type === syntax.BinaryExpression && (esNode.currentNode.operator === '===' || esNode.currentNode.operator === '==') && esNode.isCaptured() && !esNode.value();
            }
            function isStringDiffTarget(pair) {
                return typeof pair.left.value === 'string' && typeof pair.right.value === 'string';
            }
            module.exports = BinaryExpressionRenderer;
        },
        {
            'array-foreach': 7,
            'estraverse': 320,
            'object-keys': 334,
            'type-name': 354
        }
    ],
    339: [
        function (require, module, exports) {
            'use strict';
            var forEach = require('array-foreach');
            function DiagramRenderer(config) {
                this.config = config;
                this.events = [];
                this.stringify = config.stringify;
                this.widthOf = config.widthOf;
                this.initialVertivalBarLength = 1;
            }
            DiagramRenderer.prototype.init = function (traversal) {
                var _this = this;
                traversal.on('start', function (context) {
                    _this.context = context;
                    _this.assertionLine = context.source.content;
                    _this.initializeRows();
                });
                traversal.on('esnode', function (esNode) {
                    if (!esNode.isCaptured()) {
                        return;
                    }
                    _this.events.push({
                        value: esNode.value(),
                        loc: esNode.location()
                    });
                });
                traversal.on('render', function (writer) {
                    _this.events.sort(rightToLeft);
                    _this.constructRows(_this.events);
                    forEach(_this.rows, function (columns) {
                        writer.write(columns.join(''));
                    });
                });
            };
            DiagramRenderer.prototype.initializeRows = function () {
                this.rows = [];
                for (var i = 0; i <= this.initialVertivalBarLength; i += 1) {
                    this.addOneMoreRow();
                }
            };
            DiagramRenderer.prototype.newRowFor = function (assertionLine) {
                return createRow(this.widthOf(assertionLine), ' ');
            };
            DiagramRenderer.prototype.addOneMoreRow = function () {
                this.rows.push(this.newRowFor(this.assertionLine));
            };
            DiagramRenderer.prototype.lastRow = function () {
                return this.rows[this.rows.length - 1];
            };
            DiagramRenderer.prototype.renderVerticalBarAt = function (columnIndex) {
                var i, lastRowIndex = this.rows.length - 1;
                for (i = 0; i < lastRowIndex; i += 1) {
                    this.rows[i].splice(columnIndex, 1, '|');
                }
            };
            DiagramRenderer.prototype.renderValueAt = function (columnIndex, dumpedValue) {
                var i, width = this.widthOf(dumpedValue);
                for (i = 0; i < width; i += 1) {
                    this.lastRow().splice(columnIndex + i, 1, dumpedValue.charAt(i));
                }
            };
            DiagramRenderer.prototype.isOverlapped = function (prevCapturing, nextCaputuring, dumpedValue) {
                return typeof prevCapturing !== 'undefined' && this.startColumnFor(prevCapturing) <= this.startColumnFor(nextCaputuring) + this.widthOf(dumpedValue);
            };
            DiagramRenderer.prototype.constructRows = function (capturedEvents) {
                var that = this;
                var prevCaptured;
                forEach(capturedEvents, function (captured) {
                    var dumpedValue = that.stringify(captured.value);
                    if (that.isOverlapped(prevCaptured, captured, dumpedValue)) {
                        that.addOneMoreRow();
                    }
                    that.renderVerticalBarAt(that.startColumnFor(captured));
                    that.renderValueAt(that.startColumnFor(captured), dumpedValue);
                    prevCaptured = captured;
                });
            };
            DiagramRenderer.prototype.startColumnFor = function (captured) {
                return this.widthOf(this.assertionLine.slice(0, captured.loc.start.column));
            };
            function createRow(numCols, initial) {
                var row = [], i;
                for (i = 0; i < numCols; i += 1) {
                    row[i] = initial;
                }
                return row;
            }
            function rightToLeft(a, b) {
                return b.loc.start.column - a.loc.start.column;
            }
            module.exports = DiagramRenderer;
        },
        { 'array-foreach': 7 }
    ],
    340: [
        function (require, module, exports) {
            'use strict';
            function FileRenderer(config) {
            }
            FileRenderer.prototype.init = function (traversal) {
                var filepath, lineNumber;
                traversal.on('start', function (context) {
                    filepath = context.source.filepath;
                    lineNumber = context.source.line;
                });
                traversal.on('render', function (writer) {
                    if (filepath) {
                        writer.write('# ' + [
                            filepath,
                            lineNumber
                        ].join(':'));
                    } else {
                        writer.write('# at line: ' + lineNumber);
                    }
                });
            };
            module.exports = FileRenderer;
        },
        {}
    ],
    341: [
        function (require, module, exports) {
            'use strict';
            var stringifier = require('stringifier');
            var stringWidth = require('./string-width');
            var StringWriter = require('./string-writer');
            var ContextTraversal = require('./traverse');
            var udiff = require('./udiff');
            var defaultOptions = require('./default-options');
            var typeName = require('type-name');
            var extend = require('xtend');
            var map = require('array-map');
            var AssertionRenderer = require('./built-in/assertion');
            var FileRenderer = require('./built-in/file');
            var DiagramRenderer = require('./built-in/diagram');
            var BinaryExpressionRenderer = require('./built-in/binary-expression');
            var defaultRendererClasses = {
                './built-in/file': FileRenderer,
                './built-in/assertion': AssertionRenderer,
                './built-in/diagram': DiagramRenderer,
                './built-in/binary-expression': BinaryExpressionRenderer
            };
            function toRendererClass(rendererName) {
                var RendererClass;
                if (typeName(rendererName) === 'function') {
                    RendererClass = rendererName;
                } else if (typeName(rendererName) === 'string') {
                    if (defaultRendererClasses[rendererName]) {
                        RendererClass = defaultRendererClasses[rendererName];
                    } else {
                        RendererClass = require(rendererName);
                    }
                }
                return RendererClass;
            }
            function configure(options) {
                var config = extend(defaultOptions(), options);
                if (typeof config.widthOf !== 'function') {
                    config.widthOf = stringWidth(extend(config));
                }
                if (typeof config.stringify !== 'function') {
                    config.stringify = stringifier(extend(config));
                }
                if (typeof config.diff !== 'function') {
                    config.diff = udiff(extend(config));
                }
                if (!config.writerClass) {
                    config.writerClass = StringWriter;
                }
                return config;
            }
            function create(options) {
                var config = configure(options);
                var rendererClasses = map(config.renderers, toRendererClass);
                return function (context) {
                    var traversal = new ContextTraversal(context);
                    var writer = new config.writerClass(extend(config));
                    var renderers = map(rendererClasses, function (RendererClass) {
                        var renderer;
                        if (RendererClass.length === 2) {
                            renderer = new RendererClass(traversal, extend(config));
                        } else {
                            renderer = new RendererClass(extend(config));
                            renderer.init(traversal);
                        }
                        return renderer;
                    });
                    traversal.emit('start', context);
                    traversal.traverse();
                    traversal.emit('render', writer);
                    writer.write('');
                    renderers.length = 0;
                    return writer.flush();
                };
            }
            create.renderers = {
                AssertionRenderer: AssertionRenderer,
                FileRenderer: FileRenderer,
                DiagramRenderer: DiagramRenderer,
                BinaryExpressionRenderer: BinaryExpressionRenderer
            };
            create.defaultOptions = defaultOptions;
            create.stringWidth = stringWidth;
            module.exports = create;
        },
        {
            './built-in/assertion': 337,
            './built-in/binary-expression': 338,
            './built-in/diagram': 339,
            './built-in/file': 340,
            './default-options': 342,
            './string-width': 345,
            './string-writer': 346,
            './traverse': 347,
            './udiff': 348,
            'array-map': 8,
            'stringifier': 351,
            'type-name': 354,
            'xtend': 357
        }
    ],
    342: [
        function (require, module, exports) {
            'use strict';
            module.exports = function defaultOptions() {
                return {
                    lineDiffThreshold: 5,
                    maxDepth: 1,
                    outputOffset: 2,
                    anonymous: 'Object',
                    circular: '#@Circular#',
                    lineSeparator: '\n',
                    ambiguousEastAsianCharWidth: 2,
                    renderers: [
                        './built-in/file',
                        './built-in/assertion',
                        './built-in/diagram',
                        './built-in/binary-expression'
                    ]
                };
            };
        },
        {}
    ],
    343: [
        function (require, module, exports) {
            'use strict';
            var syntax = require('estraverse').Syntax;
            var locationOf = require('./location');
            function EsNode(path, currentNode, parentNode, espathToValue, jsCode, tokens) {
                if (path) {
                    this.espath = path.join('/');
                    this.parentEspath = path.slice(0, path.length - 1).join('/');
                    this.currentProp = path[path.length - 1];
                } else {
                    this.espath = '';
                    this.parentEspath = '';
                    this.currentProp = null;
                }
                this.currentNode = currentNode;
                this.parentNode = parentNode;
                this.parentEsNode = null;
                this.espathToValue = espathToValue;
                this.jsCode = jsCode;
                this.tokens = tokens;
            }
            EsNode.prototype.setParent = function (parentEsNode) {
                this.parentEsNode = parentEsNode;
            };
            EsNode.prototype.getParent = function () {
                return this.parentEsNode;
            };
            EsNode.prototype.code = function () {
                return this.jsCode.slice(this.currentNode.loc.start.column, this.currentNode.loc.end.column);
            };
            EsNode.prototype.value = function () {
                if (this.currentNode.type === syntax.Literal) {
                    return this.currentNode.value;
                }
                return this.espathToValue[this.espath];
            };
            EsNode.prototype.isCaptured = function () {
                return this.espathToValue.hasOwnProperty(this.espath);
            };
            EsNode.prototype.location = function () {
                return locationOf(this.currentNode, this.tokens);
            };
            module.exports = EsNode;
        },
        {
            './location': 344,
            'estraverse': 320
        }
    ],
    344: [
        function (require, module, exports) {
            'use strict';
            var syntax = require('estraverse').Syntax;
            function locationOf(currentNode, tokens) {
                switch (currentNode.type) {
                case syntax.MemberExpression:
                    return propertyLocationOf(currentNode, tokens);
                case syntax.CallExpression:
                    if (currentNode.callee.type === syntax.MemberExpression) {
                        return propertyLocationOf(currentNode.callee, tokens);
                    }
                    break;
                case syntax.BinaryExpression:
                case syntax.LogicalExpression:
                case syntax.AssignmentExpression:
                    return infixOperatorLocationOf(currentNode, tokens);
                default:
                    break;
                }
                return currentNode.loc;
            }
            function propertyLocationOf(memberExpression, tokens) {
                var prop = memberExpression.property;
                var token;
                if (!memberExpression.computed) {
                    return prop.loc;
                }
                token = findLeftBracketTokenOf(memberExpression, tokens);
                return token ? token.loc : prop.loc;
            }
            function infixOperatorLocationOf(expression, tokens) {
                var token = findOperatorTokenOf(expression, tokens);
                return token ? token.loc : expression.left.loc;
            }
            function findLeftBracketTokenOf(expression, tokens) {
                var fromLine = expression.loc.start.line;
                var toLine = expression.property.loc.start.line;
                var fromColumn = expression.property.loc.start.column;
                return searchToken(tokens, fromLine, toLine, function (token, index) {
                    var prevToken;
                    if (token.loc.start.column === fromColumn) {
                        prevToken = tokens[index - 1];
                        if (prevToken.type.label === '[') {
                            return prevToken;
                        }
                    }
                    return undefined;
                });
            }
            function findOperatorTokenOf(expression, tokens) {
                var fromLine = expression.left.loc.end.line;
                var toLine = expression.right.loc.start.line;
                var fromColumn = expression.left.loc.end.column;
                var toColumn = expression.right.loc.start.column;
                return searchToken(tokens, fromLine, toLine, function (token, index) {
                    if (fromColumn < token.loc.start.column && token.loc.end.column < toColumn && token.value === expression.operator) {
                        return token;
                    }
                    return undefined;
                });
            }
            function searchToken(tokens, fromLine, toLine, predicate) {
                var i, token, found;
                for (i = 0; i < tokens.length; i += 1) {
                    token = tokens[i];
                    if (token.loc.start.line < fromLine) {
                        continue;
                    }
                    if (toLine < token.loc.end.line) {
                        break;
                    }
                    found = predicate(token, i);
                    if (found) {
                        return found;
                    }
                }
                return undefined;
            }
            module.exports = locationOf;
        },
        { 'estraverse': 320 }
    ],
    345: [
        function (require, module, exports) {
            'use strict';
            var eaw = require('eastasianwidth');
            function stringWidth(config) {
                var ambiguousCharWidth = config && config.ambiguousEastAsianCharWidth || 1;
                return function widthOf(str) {
                    var i, code, width = 0;
                    for (i = 0; i < str.length; i += 1) {
                        code = eaw.eastAsianWidth(str.charAt(i));
                        switch (code) {
                        case 'F':
                        case 'W':
                            width += 2;
                            break;
                        case 'H':
                        case 'Na':
                        case 'N':
                            width += 1;
                            break;
                        case 'A':
                            width += ambiguousCharWidth;
                            break;
                        }
                    }
                    return width;
                };
            }
            module.exports = stringWidth;
        },
        { 'eastasianwidth': 308 }
    ],
    346: [
        function (require, module, exports) {
            'use strict';
            function spacerStr(len) {
                var str = '';
                for (var i = 0; i < len; i += 1) {
                    str += ' ';
                }
                return str;
            }
            function StringWriter(config) {
                this.lines = [];
                this.lineSeparator = config.lineSeparator;
                this.regex = new RegExp(this.lineSeparator, 'g');
                this.spacer = spacerStr(config.outputOffset);
            }
            StringWriter.prototype.write = function (str) {
                this.lines.push(this.spacer + str.replace(this.regex, this.lineSeparator + this.spacer));
            };
            StringWriter.prototype.flush = function () {
                var str = this.lines.join(this.lineSeparator);
                this.lines.length = 0;
                return str;
            };
            module.exports = StringWriter;
        },
        {}
    ],
    347: [
        function (require, module, exports) {
            'use strict';
            var estraverse = require('estraverse');
            var parser = require('acorn');
            require('acorn-es7-plugin')(parser);
            var EventEmitter = require('events').EventEmitter;
            var inherits = require('util').inherits;
            var EsNode = require('./esnode');
            var forEach = require('array-foreach');
            var reduce = require('array-reduce');
            function ContextTraversal(context) {
                this.context = context;
                EventEmitter.call(this);
            }
            inherits(ContextTraversal, EventEmitter);
            ContextTraversal.prototype.traverse = function () {
                var _this = this;
                forEach(this.context.args, function (arg) {
                    onEachEsNode(arg, _this.context.source, function (esNode) {
                        _this.emit('esnode', esNode);
                    });
                });
            };
            function onEachEsNode(arg, source, callback) {
                var parseResult = parse(source);
                var tokens = parseResult.tokens;
                var espathToValue = reduce(arg.events, function (accum, ev) {
                    accum[ev.espath] = ev.value;
                    return accum;
                }, {});
                var nodeStack = [];
                estraverse.traverse(parseResult.expression, {
                    enter: function (currentNode, parentNode) {
                        var esNode = new EsNode(this.path(), currentNode, parentNode, espathToValue, source.content, tokens);
                        if (1 < nodeStack.length) {
                            esNode.setParent(nodeStack[nodeStack.length - 1]);
                        }
                        nodeStack.push(esNode);
                        callback(esNode);
                    },
                    leave: function (currentNode, parentNode) {
                        nodeStack.pop();
                    }
                });
            }
            function parserOptions(tokens) {
                return {
                    sourceType: 'module',
                    ecmaVersion: 7,
                    locations: true,
                    ranges: true,
                    onToken: tokens,
                    plugins: { asyncawait: true }
                };
            }
            function wrappedInGenerator(jsCode) {
                return 'function *wrapper() {\n' + jsCode + '\n}';
            }
            function wrappedInAsync(jsCode) {
                return 'async function wrapper() {\n' + jsCode + '\n}';
            }
            function parse(source) {
                var ast;
                var tokens = [];
                function doParse(wrapper) {
                    var content = wrapper ? wrapper(source.content) : source.content;
                    ast = parser.parse(content, parserOptions(tokens));
                    if (wrapper) {
                        ast = ast.body[0].body;
                    }
                }
                if (source.async) {
                    doParse(wrappedInAsync);
                } else if (source.generator) {
                    doParse(wrappedInGenerator);
                } else {
                    doParse();
                }
                return {
                    tokens: tokens,
                    expression: ast.body[0].expression
                };
            }
            module.exports = ContextTraversal;
        },
        {
            './esnode': 343,
            'acorn': 5,
            'acorn-es7-plugin': 4,
            'array-foreach': 7,
            'array-reduce': 10,
            'estraverse': 320,
            'events': 322,
            'util': 356
        }
    ],
    348: [
        function (require, module, exports) {
            'use strict';
            var DiffMatchPatch = require('googlediff');
            var dmp = new DiffMatchPatch();
            function udiff(config) {
                return function diff(text1, text2) {
                    var patch;
                    if (config && shouldUseLineLevelDiff(text1, config)) {
                        patch = udiffLines(text1, text2);
                    } else {
                        patch = udiffChars(text1, text2);
                    }
                    return decodeURIComponent(patch);
                };
            }
            function shouldUseLineLevelDiff(text, config) {
                return config.lineDiffThreshold < text.split(/\r\n|\r|\n/).length;
            }
            function udiffLines(text1, text2) {
                var a = dmp.diff_linesToChars_(text1, text2);
                var diffs = dmp.diff_main(a.chars1, a.chars2, false);
                dmp.diff_charsToLines_(diffs, a.lineArray);
                dmp.diff_cleanupSemantic(diffs);
                return dmp.patch_toText(dmp.patch_make(text1, diffs));
            }
            function udiffChars(text1, text2) {
                var diffs = dmp.diff_main(text1, text2, false);
                dmp.diff_cleanupSemantic(diffs);
                return dmp.patch_toText(dmp.patch_make(text1, diffs));
            }
            module.exports = udiff;
        },
        { 'googlediff': 325 }
    ],
    349: [
        function (require, module, exports) {
            'use strict';
            var baseAssert = require('assert');
            var empower = require('empower');
            var formatter = require('power-assert-formatter');
            var extend = require('xtend');
            var define = require('define-properties');
            var empowerOptions = {
                modifyMessageOnRethrow: true,
                saveContextOnRethrow: true
            };
            function customize(customOptions) {
                var options = customOptions || {};
                var poweredAssert = empower(baseAssert, formatter(options.output), extend(empowerOptions, options.assertion));
                poweredAssert.customize = customize;
                return poweredAssert;
            }
            var defaultAssert = customize();
            define(defaultAssert, { '__esModule': true });
            defaultAssert['default'] = defaultAssert;
            module.exports = defaultAssert;
        },
        {
            'assert': 12,
            'define-properties': 307,
            'empower': 309,
            'power-assert-formatter': 336,
            'xtend': 357
        }
    ],
    350: [
        function (require, module, exports) {
            var process = module.exports = {};
            var queue = [];
            var draining = false;
            var currentQueue;
            var queueIndex = -1;
            function cleanUpNextTick() {
                draining = false;
                if (currentQueue.length) {
                    queue = currentQueue.concat(queue);
                } else {
                    queueIndex = -1;
                }
                if (queue.length) {
                    drainQueue();
                }
            }
            function drainQueue() {
                if (draining) {
                    return;
                }
                var timeout = setTimeout(cleanUpNextTick);
                draining = true;
                var len = queue.length;
                while (len) {
                    currentQueue = queue;
                    queue = [];
                    while (++queueIndex < len) {
                        if (currentQueue) {
                            currentQueue[queueIndex].run();
                        }
                    }
                    queueIndex = -1;
                    len = queue.length;
                }
                currentQueue = null;
                draining = false;
                clearTimeout(timeout);
            }
            process.nextTick = function (fun) {
                var args = new Array(arguments.length - 1);
                if (arguments.length > 1) {
                    for (var i = 1; i < arguments.length; i++) {
                        args[i - 1] = arguments[i];
                    }
                }
                queue.push(new Item(fun, args));
                if (queue.length === 1 && !draining) {
                    setTimeout(drainQueue, 0);
                }
            };
            function Item(fun, array) {
                this.fun = fun;
                this.array = array;
            }
            Item.prototype.run = function () {
                this.fun.apply(null, this.array);
            };
            process.title = 'browser';
            process.browser = true;
            process.env = {};
            process.argv = [];
            process.version = '';
            process.versions = {};
            function noop() {
            }
            process.on = noop;
            process.addListener = noop;
            process.once = noop;
            process.off = noop;
            process.removeListener = noop;
            process.removeAllListeners = noop;
            process.emit = noop;
            process.binding = function (name) {
                throw new Error('process.binding is not supported');
            };
            process.cwd = function () {
                return '/';
            };
            process.chdir = function (dir) {
                throw new Error('process.chdir is not supported');
            };
            process.umask = function () {
                return 0;
            };
        },
        {}
    ],
    351: [
        function (require, module, exports) {
            'use strict';
            var traverse = require('traverse');
            var typeName = require('type-name');
            var extend = require('xtend');
            var s = require('./strategies');
            function defaultHandlers() {
                return {
                    'null': s.always('null'),
                    'undefined': s.always('undefined'),
                    'function': s.prune(),
                    'string': s.json(),
                    'boolean': s.json(),
                    'number': s.number(),
                    'symbol': s.toStr(),
                    'RegExp': s.toStr(),
                    'String': s.newLike(),
                    'Boolean': s.newLike(),
                    'Number': s.newLike(),
                    'Date': s.newLike(),
                    'Array': s.array(),
                    'Object': s.object(),
                    '@default': s.object()
                };
            }
            function defaultOptions() {
                return {
                    maxDepth: null,
                    indent: null,
                    anonymous: '@Anonymous',
                    circular: '#@Circular#',
                    snip: '..(snip)',
                    lineSeparator: '\n',
                    typeFun: typeName
                };
            }
            function createStringifier(customOptions) {
                var options = extend(defaultOptions(), customOptions);
                var handlers = extend(defaultHandlers(), options.handlers);
                return function stringifyAny(push, x) {
                    var context = this;
                    var handler = handlerFor(context.node, options, handlers);
                    var currentPath = '/' + context.path.join('/');
                    var customization = handlers[currentPath];
                    var acc = {
                        context: context,
                        options: options,
                        handlers: handlers,
                        push: push
                    };
                    if (typeName(customization) === 'function') {
                        handler = customization;
                    } else if (typeName(customization) === 'number') {
                        handler = s.flow.compose(s.filters.truncate(customization), handler);
                    } else if (context.parent && typeName(context.parent.node) === 'Array' && !(context.key in context.parent.node)) {
                        handler = s.always('');
                    }
                    handler(acc, x);
                    return push;
                };
            }
            function handlerFor(val, options, handlers) {
                var tname = options.typeFun(val);
                if (typeName(handlers[tname]) === 'function') {
                    return handlers[tname];
                }
                return handlers['@default'];
            }
            function walk(val, reducer) {
                var buffer = [];
                var push = function (str) {
                    buffer.push(str);
                };
                traverse(val).reduce(reducer, push);
                return buffer.join('');
            }
            function stringify(val, options) {
                return walk(val, createStringifier(options));
            }
            function stringifier(options) {
                return function (val) {
                    return walk(val, createStringifier(options));
                };
            }
            stringifier.stringify = stringify;
            stringifier.strategies = s;
            stringifier.defaultOptions = defaultOptions;
            stringifier.defaultHandlers = defaultHandlers;
            module.exports = stringifier;
        },
        {
            './strategies': 352,
            'traverse': 353,
            'type-name': 354,
            'xtend': 357
        }
    ],
    352: [
        function (require, module, exports) {
            'use strict';
            var typeName = require('type-name');
            var forEach = require('array-foreach');
            var arrayFilter = require('array-filter');
            var reduceRight = require('array-reduce-right');
            var indexOf = require('indexof');
            var slice = Array.prototype.slice;
            var END = {};
            var ITERATE = {};
            function compose() {
                var filters = slice.apply(arguments);
                return reduceRight(filters, function (right, left) {
                    return left(right);
                });
            }
            function end() {
                return function (acc, x) {
                    acc.context.keys = [];
                    return END;
                };
            }
            function iterate() {
                return function (acc, x) {
                    return ITERATE;
                };
            }
            function filter(predicate) {
                return function (next) {
                    return function (acc, x) {
                        var toBeIterated;
                        var isIteratingArray = typeName(x) === 'Array';
                        if (typeName(predicate) === 'function') {
                            toBeIterated = [];
                            forEach(acc.context.keys, function (key) {
                                var indexOrKey = isIteratingArray ? parseInt(key, 10) : key;
                                var kvp = {
                                    key: indexOrKey,
                                    value: x[key]
                                };
                                var decision = predicate(kvp);
                                if (decision) {
                                    toBeIterated.push(key);
                                }
                                if (typeName(decision) === 'number') {
                                    truncateByKey(decision, key, acc);
                                }
                                if (typeName(decision) === 'function') {
                                    customizeStrategyForKey(decision, key, acc);
                                }
                            });
                            acc.context.keys = toBeIterated;
                        }
                        return next(acc, x);
                    };
                };
            }
            function customizeStrategyForKey(strategy, key, acc) {
                acc.handlers[currentPath(key, acc)] = strategy;
            }
            function truncateByKey(size, key, acc) {
                acc.handlers[currentPath(key, acc)] = size;
            }
            function currentPath(key, acc) {
                var pathToCurrentNode = [''].concat(acc.context.path);
                if (typeName(key) !== 'undefined') {
                    pathToCurrentNode.push(key);
                }
                return pathToCurrentNode.join('/');
            }
            function allowedKeys(orderedWhiteList) {
                return function (next) {
                    return function (acc, x) {
                        var isIteratingArray = typeName(x) === 'Array';
                        if (!isIteratingArray && typeName(orderedWhiteList) === 'Array') {
                            acc.context.keys = arrayFilter(orderedWhiteList, function (propKey) {
                                return indexOf(acc.context.keys, propKey) !== -1;
                            });
                        }
                        return next(acc, x);
                    };
                };
            }
            function safeKeys() {
                return function (next) {
                    return function (acc, x) {
                        if (typeName(x) !== 'Array') {
                            acc.context.keys = arrayFilter(acc.context.keys, function (propKey) {
                                try {
                                    var val = x[propKey];
                                    return true;
                                } catch (e) {
                                    return false;
                                }
                            });
                        }
                        return next(acc, x);
                    };
                };
            }
            function arrayIndicesToKeys() {
                return function (next) {
                    return function (acc, x) {
                        if (typeName(x) === 'Array' && 0 < x.length) {
                            var indices = Array(x.length);
                            for (var i = 0; i < x.length; i += 1) {
                                indices[i] = String(i);
                            }
                            acc.context.keys = indices;
                        }
                        return next(acc, x);
                    };
                };
            }
            function when(guard, then) {
                return function (next) {
                    return function (acc, x) {
                        var kvp = {
                            key: acc.context.key,
                            value: x
                        };
                        if (guard(kvp, acc)) {
                            return then(acc, x);
                        }
                        return next(acc, x);
                    };
                };
            }
            function truncate(size) {
                return function (next) {
                    return function (acc, x) {
                        var orig = acc.push;
                        var ret;
                        acc.push = function (str) {
                            var savings = str.length - size;
                            var truncated;
                            if (savings <= size) {
                                orig.call(acc, str);
                            } else {
                                truncated = str.substring(0, size);
                                orig.call(acc, truncated + acc.options.snip);
                            }
                        };
                        ret = next(acc, x);
                        acc.push = orig;
                        return ret;
                    };
                };
            }
            function constructorName() {
                return function (next) {
                    return function (acc, x) {
                        var name = acc.options.typeFun(x);
                        if (name === '') {
                            name = acc.options.anonymous;
                        }
                        acc.push(name);
                        return next(acc, x);
                    };
                };
            }
            function always(str) {
                return function (next) {
                    return function (acc, x) {
                        acc.push(str);
                        return next(acc, x);
                    };
                };
            }
            function optionValue(key) {
                return function (next) {
                    return function (acc, x) {
                        acc.push(acc.options[key]);
                        return next(acc, x);
                    };
                };
            }
            function json(replacer) {
                return function (next) {
                    return function (acc, x) {
                        acc.push(JSON.stringify(x, replacer));
                        return next(acc, x);
                    };
                };
            }
            function toStr() {
                return function (next) {
                    return function (acc, x) {
                        acc.push(x.toString());
                        return next(acc, x);
                    };
                };
            }
            function decorateArray() {
                return function (next) {
                    return function (acc, x) {
                        acc.context.before(function (node) {
                            acc.push('[');
                        });
                        acc.context.after(function (node) {
                            afterAllChildren(this, acc.push, acc.options);
                            acc.push(']');
                        });
                        acc.context.pre(function (val, key) {
                            beforeEachChild(this, acc.push, acc.options);
                        });
                        acc.context.post(function (childContext) {
                            afterEachChild(childContext, acc.push);
                        });
                        return next(acc, x);
                    };
                };
            }
            function decorateObject() {
                return function (next) {
                    return function (acc, x) {
                        acc.context.before(function (node) {
                            acc.push('{');
                        });
                        acc.context.after(function (node) {
                            afterAllChildren(this, acc.push, acc.options);
                            acc.push('}');
                        });
                        acc.context.pre(function (val, key) {
                            beforeEachChild(this, acc.push, acc.options);
                            acc.push(sanitizeKey(key) + (acc.options.indent ? ': ' : ':'));
                        });
                        acc.context.post(function (childContext) {
                            afterEachChild(childContext, acc.push);
                        });
                        return next(acc, x);
                    };
                };
            }
            function sanitizeKey(key) {
                return /^[A-Za-z_]+$/.test(key) ? key : JSON.stringify(key);
            }
            function afterAllChildren(context, push, options) {
                if (options.indent && 0 < context.keys.length) {
                    push(options.lineSeparator);
                    for (var i = 0; i < context.level; i += 1) {
                        push(options.indent);
                    }
                }
            }
            function beforeEachChild(context, push, options) {
                if (options.indent) {
                    push(options.lineSeparator);
                    for (var i = 0; i <= context.level; i += 1) {
                        push(options.indent);
                    }
                }
            }
            function afterEachChild(childContext, push) {
                if (!childContext.isLast) {
                    push(',');
                }
            }
            function nan(kvp, acc) {
                return kvp.value !== kvp.value;
            }
            function positiveInfinity(kvp, acc) {
                return !isFinite(kvp.value) && kvp.value === Infinity;
            }
            function negativeInfinity(kvp, acc) {
                return !isFinite(kvp.value) && kvp.value !== Infinity;
            }
            function circular(kvp, acc) {
                return acc.context.circular;
            }
            function maxDepth(kvp, acc) {
                return acc.options.maxDepth && acc.options.maxDepth <= acc.context.level;
            }
            var prune = compose(always('#'), constructorName(), always('#'), end());
            var omitNaN = when(nan, compose(always('NaN'), end()));
            var omitPositiveInfinity = when(positiveInfinity, compose(always('Infinity'), end()));
            var omitNegativeInfinity = when(negativeInfinity, compose(always('-Infinity'), end()));
            var omitCircular = when(circular, compose(optionValue('circular'), end()));
            var omitMaxDepth = when(maxDepth, prune);
            module.exports = {
                filters: {
                    always: always,
                    constructorName: constructorName,
                    json: json,
                    toStr: toStr,
                    prune: prune,
                    truncate: truncate,
                    decorateArray: decorateArray,
                    decorateObject: decorateObject
                },
                flow: {
                    compose: compose,
                    when: when,
                    allowedKeys: allowedKeys,
                    safeKeys: safeKeys,
                    filter: filter,
                    iterate: iterate,
                    end: end
                },
                symbols: {
                    END: END,
                    ITERATE: ITERATE
                },
                always: function (str) {
                    return compose(always(str), end());
                },
                json: function () {
                    return compose(json(), end());
                },
                toStr: function () {
                    return compose(toStr(), end());
                },
                prune: function () {
                    return prune;
                },
                number: function () {
                    return compose(omitNaN, omitPositiveInfinity, omitNegativeInfinity, json(), end());
                },
                newLike: function () {
                    return compose(always('new '), constructorName(), always('('), json(), always(')'), end());
                },
                array: function (predicate) {
                    return compose(omitCircular, omitMaxDepth, decorateArray(), arrayIndicesToKeys(), filter(predicate), iterate());
                },
                object: function (predicate, orderedWhiteList) {
                    return compose(omitCircular, omitMaxDepth, constructorName(), decorateObject(), allowedKeys(orderedWhiteList), safeKeys(), filter(predicate), iterate());
                }
            };
        },
        {
            'array-filter': 6,
            'array-foreach': 7,
            'array-reduce-right': 9,
            'indexof': 328,
            'type-name': 354
        }
    ],
    353: [
        function (require, module, exports) {
            var traverse = module.exports = function (obj) {
                return new Traverse(obj);
            };
            function Traverse(obj) {
                this.value = obj;
            }
            Traverse.prototype.get = function (ps) {
                var node = this.value;
                for (var i = 0; i < ps.length; i++) {
                    var key = ps[i];
                    if (!node || !hasOwnProperty.call(node, key)) {
                        node = undefined;
                        break;
                    }
                    node = node[key];
                }
                return node;
            };
            Traverse.prototype.has = function (ps) {
                var node = this.value;
                for (var i = 0; i < ps.length; i++) {
                    var key = ps[i];
                    if (!node || !hasOwnProperty.call(node, key)) {
                        return false;
                    }
                    node = node[key];
                }
                return true;
            };
            Traverse.prototype.set = function (ps, value) {
                var node = this.value;
                for (var i = 0; i < ps.length - 1; i++) {
                    var key = ps[i];
                    if (!hasOwnProperty.call(node, key))
                        node[key] = {};
                    node = node[key];
                }
                node[ps[i]] = value;
                return value;
            };
            Traverse.prototype.map = function (cb) {
                return walk(this.value, cb, true);
            };
            Traverse.prototype.forEach = function (cb) {
                this.value = walk(this.value, cb, false);
                return this.value;
            };
            Traverse.prototype.reduce = function (cb, init) {
                var skip = arguments.length === 1;
                var acc = skip ? this.value : init;
                this.forEach(function (x) {
                    if (!this.isRoot || !skip) {
                        acc = cb.call(this, acc, x);
                    }
                });
                return acc;
            };
            Traverse.prototype.paths = function () {
                var acc = [];
                this.forEach(function (x) {
                    acc.push(this.path);
                });
                return acc;
            };
            Traverse.prototype.nodes = function () {
                var acc = [];
                this.forEach(function (x) {
                    acc.push(this.node);
                });
                return acc;
            };
            Traverse.prototype.clone = function () {
                var parents = [], nodes = [];
                return function clone(src) {
                    for (var i = 0; i < parents.length; i++) {
                        if (parents[i] === src) {
                            return nodes[i];
                        }
                    }
                    if (typeof src === 'object' && src !== null) {
                        var dst = copy(src);
                        parents.push(src);
                        nodes.push(dst);
                        forEach(objectKeys(src), function (key) {
                            dst[key] = clone(src[key]);
                        });
                        parents.pop();
                        nodes.pop();
                        return dst;
                    } else {
                        return src;
                    }
                }(this.value);
            };
            function walk(root, cb, immutable) {
                var path = [];
                var parents = [];
                var alive = true;
                return function walker(node_) {
                    var node = immutable ? copy(node_) : node_;
                    var modifiers = {};
                    var keepGoing = true;
                    var state = {
                        node: node,
                        node_: node_,
                        path: [].concat(path),
                        parent: parents[parents.length - 1],
                        parents: parents,
                        key: path.slice(-1)[0],
                        isRoot: path.length === 0,
                        level: path.length,
                        circular: null,
                        update: function (x, stopHere) {
                            if (!state.isRoot) {
                                state.parent.node[state.key] = x;
                            }
                            state.node = x;
                            if (stopHere)
                                keepGoing = false;
                        },
                        'delete': function (stopHere) {
                            delete state.parent.node[state.key];
                            if (stopHere)
                                keepGoing = false;
                        },
                        remove: function (stopHere) {
                            if (isArray(state.parent.node)) {
                                state.parent.node.splice(state.key, 1);
                            } else {
                                delete state.parent.node[state.key];
                            }
                            if (stopHere)
                                keepGoing = false;
                        },
                        keys: null,
                        before: function (f) {
                            modifiers.before = f;
                        },
                        after: function (f) {
                            modifiers.after = f;
                        },
                        pre: function (f) {
                            modifiers.pre = f;
                        },
                        post: function (f) {
                            modifiers.post = f;
                        },
                        stop: function () {
                            alive = false;
                        },
                        block: function () {
                            keepGoing = false;
                        }
                    };
                    if (!alive)
                        return state;
                    function updateState() {
                        if (typeof state.node === 'object' && state.node !== null) {
                            if (!state.keys || state.node_ !== state.node) {
                                state.keys = objectKeys(state.node);
                            }
                            state.isLeaf = state.keys.length == 0;
                            for (var i = 0; i < parents.length; i++) {
                                if (parents[i].node_ === node_) {
                                    state.circular = parents[i];
                                    break;
                                }
                            }
                        } else {
                            state.isLeaf = true;
                            state.keys = null;
                        }
                        state.notLeaf = !state.isLeaf;
                        state.notRoot = !state.isRoot;
                    }
                    updateState();
                    var ret = cb.call(state, state.node);
                    if (ret !== undefined && state.update)
                        state.update(ret);
                    if (modifiers.before)
                        modifiers.before.call(state, state.node);
                    if (!keepGoing)
                        return state;
                    if (typeof state.node == 'object' && state.node !== null && !state.circular) {
                        parents.push(state);
                        updateState();
                        forEach(state.keys, function (key, i) {
                            path.push(key);
                            if (modifiers.pre)
                                modifiers.pre.call(state, state.node[key], key);
                            var child = walker(state.node[key]);
                            if (immutable && hasOwnProperty.call(state.node, key)) {
                                state.node[key] = child.node;
                            }
                            child.isLast = i == state.keys.length - 1;
                            child.isFirst = i == 0;
                            if (modifiers.post)
                                modifiers.post.call(state, child);
                            path.pop();
                        });
                        parents.pop();
                    }
                    if (modifiers.after)
                        modifiers.after.call(state, state.node);
                    return state;
                }(root).node;
            }
            function copy(src) {
                if (typeof src === 'object' && src !== null) {
                    var dst;
                    if (isArray(src)) {
                        dst = [];
                    } else if (isDate(src)) {
                        dst = new Date(src.getTime ? src.getTime() : src);
                    } else if (isRegExp(src)) {
                        dst = new RegExp(src);
                    } else if (isError(src)) {
                        dst = { message: src.message };
                    } else if (isBoolean(src)) {
                        dst = new Boolean(src);
                    } else if (isNumber(src)) {
                        dst = new Number(src);
                    } else if (isString(src)) {
                        dst = new String(src);
                    } else if (Object.create && Object.getPrototypeOf) {
                        dst = Object.create(Object.getPrototypeOf(src));
                    } else if (src.constructor === Object) {
                        dst = {};
                    } else {
                        var proto = src.constructor && src.constructor.prototype || src.__proto__ || {};
                        var T = function () {
                        };
                        T.prototype = proto;
                        dst = new T();
                    }
                    forEach(objectKeys(src), function (key) {
                        dst[key] = src[key];
                    });
                    return dst;
                } else
                    return src;
            }
            var objectKeys = Object.keys || function keys(obj) {
                var res = [];
                for (var key in obj)
                    res.push(key);
                return res;
            };
            function toS(obj) {
                return Object.prototype.toString.call(obj);
            }
            function isDate(obj) {
                return toS(obj) === '[object Date]';
            }
            function isRegExp(obj) {
                return toS(obj) === '[object RegExp]';
            }
            function isError(obj) {
                return toS(obj) === '[object Error]';
            }
            function isBoolean(obj) {
                return toS(obj) === '[object Boolean]';
            }
            function isNumber(obj) {
                return toS(obj) === '[object Number]';
            }
            function isString(obj) {
                return toS(obj) === '[object String]';
            }
            var isArray = Array.isArray || function isArray(xs) {
                return Object.prototype.toString.call(xs) === '[object Array]';
            };
            var forEach = function (xs, fn) {
                if (xs.forEach)
                    return xs.forEach(fn);
                else
                    for (var i = 0; i < xs.length; i++) {
                        fn(xs[i], i, xs);
                    }
            };
            forEach(objectKeys(Traverse.prototype), function (key) {
                traverse[key] = function (obj) {
                    var args = [].slice.call(arguments, 1);
                    var t = new Traverse(obj);
                    return t[key].apply(t, args);
                };
            });
            var hasOwnProperty = Object.hasOwnProperty || function (obj, key) {
                return key in obj;
            };
        },
        {}
    ],
    354: [
        function (require, module, exports) {
            'use strict';
            var toStr = Object.prototype.toString;
            function funcName(f) {
                return f.name ? f.name : /^\s*function\s*([^\(]*)/im.exec(f.toString())[1];
            }
            function ctorName(obj) {
                var strName = toStr.call(obj).slice(8, -1);
                if (strName === 'Object' && obj.constructor) {
                    return funcName(obj.constructor);
                }
                return strName;
            }
            function typeName(val) {
                var type;
                if (val === null) {
                    return 'null';
                }
                type = typeof val;
                if (type === 'object') {
                    return ctorName(val);
                }
                return type;
            }
            module.exports = typeName;
        },
        {}
    ],
    355: [
        function (require, module, exports) {
            module.exports = function isBuffer(arg) {
                return arg && typeof arg === 'object' && typeof arg.copy === 'function' && typeof arg.fill === 'function' && typeof arg.readUInt8 === 'function';
            };
        },
        {}
    ],
    356: [
        function (require, module, exports) {
            (function (process, global) {
                var formatRegExp = /%[sdj%]/g;
                exports.format = function (f) {
                    if (!isString(f)) {
                        var objects = [];
                        for (var i = 0; i < arguments.length; i++) {
                            objects.push(inspect(arguments[i]));
                        }
                        return objects.join(' ');
                    }
                    var i = 1;
                    var args = arguments;
                    var len = args.length;
                    var str = String(f).replace(formatRegExp, function (x) {
                        if (x === '%%')
                            return '%';
                        if (i >= len)
                            return x;
                        switch (x) {
                        case '%s':
                            return String(args[i++]);
                        case '%d':
                            return Number(args[i++]);
                        case '%j':
                            try {
                                return JSON.stringify(args[i++]);
                            } catch (_) {
                                return '[Circular]';
                            }
                        default:
                            return x;
                        }
                    });
                    for (var x = args[i]; i < len; x = args[++i]) {
                        if (isNull(x) || !isObject(x)) {
                            str += ' ' + x;
                        } else {
                            str += ' ' + inspect(x);
                        }
                    }
                    return str;
                };
                exports.deprecate = function (fn, msg) {
                    if (isUndefined(global.process)) {
                        return function () {
                            return exports.deprecate(fn, msg).apply(this, arguments);
                        };
                    }
                    if (process.noDeprecation === true) {
                        return fn;
                    }
                    var warned = false;
                    function deprecated() {
                        if (!warned) {
                            if (process.throwDeprecation) {
                                throw new Error(msg);
                            } else if (process.traceDeprecation) {
                                console.trace(msg);
                            } else {
                                console.error(msg);
                            }
                            warned = true;
                        }
                        return fn.apply(this, arguments);
                    }
                    return deprecated;
                };
                var debugs = {};
                var debugEnviron;
                exports.debuglog = function (set) {
                    if (isUndefined(debugEnviron))
                        debugEnviron = process.env.NODE_DEBUG || '';
                    set = set.toUpperCase();
                    if (!debugs[set]) {
                        if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
                            var pid = process.pid;
                            debugs[set] = function () {
                                var msg = exports.format.apply(exports, arguments);
                                console.error('%s %d: %s', set, pid, msg);
                            };
                        } else {
                            debugs[set] = function () {
                            };
                        }
                    }
                    return debugs[set];
                };
                function inspect(obj, opts) {
                    var ctx = {
                        seen: [],
                        stylize: stylizeNoColor
                    };
                    if (arguments.length >= 3)
                        ctx.depth = arguments[2];
                    if (arguments.length >= 4)
                        ctx.colors = arguments[3];
                    if (isBoolean(opts)) {
                        ctx.showHidden = opts;
                    } else if (opts) {
                        exports._extend(ctx, opts);
                    }
                    if (isUndefined(ctx.showHidden))
                        ctx.showHidden = false;
                    if (isUndefined(ctx.depth))
                        ctx.depth = 2;
                    if (isUndefined(ctx.colors))
                        ctx.colors = false;
                    if (isUndefined(ctx.customInspect))
                        ctx.customInspect = true;
                    if (ctx.colors)
                        ctx.stylize = stylizeWithColor;
                    return formatValue(ctx, obj, ctx.depth);
                }
                exports.inspect = inspect;
                inspect.colors = {
                    'bold': [
                        1,
                        22
                    ],
                    'italic': [
                        3,
                        23
                    ],
                    'underline': [
                        4,
                        24
                    ],
                    'inverse': [
                        7,
                        27
                    ],
                    'white': [
                        37,
                        39
                    ],
                    'grey': [
                        90,
                        39
                    ],
                    'black': [
                        30,
                        39
                    ],
                    'blue': [
                        34,
                        39
                    ],
                    'cyan': [
                        36,
                        39
                    ],
                    'green': [
                        32,
                        39
                    ],
                    'magenta': [
                        35,
                        39
                    ],
                    'red': [
                        31,
                        39
                    ],
                    'yellow': [
                        33,
                        39
                    ]
                };
                inspect.styles = {
                    'special': 'cyan',
                    'number': 'yellow',
                    'boolean': 'yellow',
                    'undefined': 'grey',
                    'null': 'bold',
                    'string': 'green',
                    'date': 'magenta',
                    'regexp': 'red'
                };
                function stylizeWithColor(str, styleType) {
                    var style = inspect.styles[styleType];
                    if (style) {
                        return '\x1B[' + inspect.colors[style][0] + 'm' + str + '\x1B[' + inspect.colors[style][1] + 'm';
                    } else {
                        return str;
                    }
                }
                function stylizeNoColor(str, styleType) {
                    return str;
                }
                function arrayToHash(array) {
                    var hash = {};
                    array.forEach(function (val, idx) {
                        hash[val] = true;
                    });
                    return hash;
                }
                function formatValue(ctx, value, recurseTimes) {
                    if (ctx.customInspect && value && isFunction(value.inspect) && value.inspect !== exports.inspect && !(value.constructor && value.constructor.prototype === value)) {
                        var ret = value.inspect(recurseTimes, ctx);
                        if (!isString(ret)) {
                            ret = formatValue(ctx, ret, recurseTimes);
                        }
                        return ret;
                    }
                    var primitive = formatPrimitive(ctx, value);
                    if (primitive) {
                        return primitive;
                    }
                    var keys = Object.keys(value);
                    var visibleKeys = arrayToHash(keys);
                    if (ctx.showHidden) {
                        keys = Object.getOwnPropertyNames(value);
                    }
                    if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
                        return formatError(value);
                    }
                    if (keys.length === 0) {
                        if (isFunction(value)) {
                            var name = value.name ? ': ' + value.name : '';
                            return ctx.stylize('[Function' + name + ']', 'special');
                        }
                        if (isRegExp(value)) {
                            return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
                        }
                        if (isDate(value)) {
                            return ctx.stylize(Date.prototype.toString.call(value), 'date');
                        }
                        if (isError(value)) {
                            return formatError(value);
                        }
                    }
                    var base = '', array = false, braces = [
                            '{',
                            '}'
                        ];
                    if (isArray(value)) {
                        array = true;
                        braces = [
                            '[',
                            ']'
                        ];
                    }
                    if (isFunction(value)) {
                        var n = value.name ? ': ' + value.name : '';
                        base = ' [Function' + n + ']';
                    }
                    if (isRegExp(value)) {
                        base = ' ' + RegExp.prototype.toString.call(value);
                    }
                    if (isDate(value)) {
                        base = ' ' + Date.prototype.toUTCString.call(value);
                    }
                    if (isError(value)) {
                        base = ' ' + formatError(value);
                    }
                    if (keys.length === 0 && (!array || value.length == 0)) {
                        return braces[0] + base + braces[1];
                    }
                    if (recurseTimes < 0) {
                        if (isRegExp(value)) {
                            return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
                        } else {
                            return ctx.stylize('[Object]', 'special');
                        }
                    }
                    ctx.seen.push(value);
                    var output;
                    if (array) {
                        output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
                    } else {
                        output = keys.map(function (key) {
                            return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
                        });
                    }
                    ctx.seen.pop();
                    return reduceToSingleString(output, base, braces);
                }
                function formatPrimitive(ctx, value) {
                    if (isUndefined(value))
                        return ctx.stylize('undefined', 'undefined');
                    if (isString(value)) {
                        var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, '\\\'').replace(/\\"/g, '"') + '\'';
                        return ctx.stylize(simple, 'string');
                    }
                    if (isNumber(value))
                        return ctx.stylize('' + value, 'number');
                    if (isBoolean(value))
                        return ctx.stylize('' + value, 'boolean');
                    if (isNull(value))
                        return ctx.stylize('null', 'null');
                }
                function formatError(value) {
                    return '[' + Error.prototype.toString.call(value) + ']';
                }
                function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
                    var output = [];
                    for (var i = 0, l = value.length; i < l; ++i) {
                        if (hasOwnProperty(value, String(i))) {
                            output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
                        } else {
                            output.push('');
                        }
                    }
                    keys.forEach(function (key) {
                        if (!key.match(/^\d+$/)) {
                            output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
                        }
                    });
                    return output;
                }
                function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
                    var name, str, desc;
                    desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
                    if (desc.get) {
                        if (desc.set) {
                            str = ctx.stylize('[Getter/Setter]', 'special');
                        } else {
                            str = ctx.stylize('[Getter]', 'special');
                        }
                    } else {
                        if (desc.set) {
                            str = ctx.stylize('[Setter]', 'special');
                        }
                    }
                    if (!hasOwnProperty(visibleKeys, key)) {
                        name = '[' + key + ']';
                    }
                    if (!str) {
                        if (ctx.seen.indexOf(desc.value) < 0) {
                            if (isNull(recurseTimes)) {
                                str = formatValue(ctx, desc.value, null);
                            } else {
                                str = formatValue(ctx, desc.value, recurseTimes - 1);
                            }
                            if (str.indexOf('\n') > -1) {
                                if (array) {
                                    str = str.split('\n').map(function (line) {
                                        return '  ' + line;
                                    }).join('\n').substr(2);
                                } else {
                                    str = '\n' + str.split('\n').map(function (line) {
                                        return '   ' + line;
                                    }).join('\n');
                                }
                            }
                        } else {
                            str = ctx.stylize('[Circular]', 'special');
                        }
                    }
                    if (isUndefined(name)) {
                        if (array && key.match(/^\d+$/)) {
                            return str;
                        }
                        name = JSON.stringify('' + key);
                        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
                            name = name.substr(1, name.length - 2);
                            name = ctx.stylize(name, 'name');
                        } else {
                            name = name.replace(/'/g, '\\\'').replace(/\\"/g, '"').replace(/(^"|"$)/g, '\'');
                            name = ctx.stylize(name, 'string');
                        }
                    }
                    return name + ': ' + str;
                }
                function reduceToSingleString(output, base, braces) {
                    var numLinesEst = 0;
                    var length = output.reduce(function (prev, cur) {
                        numLinesEst++;
                        if (cur.indexOf('\n') >= 0)
                            numLinesEst++;
                        return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
                    }, 0);
                    if (length > 60) {
                        return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
                    }
                    return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
                }
                function isArray(ar) {
                    return Array.isArray(ar);
                }
                exports.isArray = isArray;
                function isBoolean(arg) {
                    return typeof arg === 'boolean';
                }
                exports.isBoolean = isBoolean;
                function isNull(arg) {
                    return arg === null;
                }
                exports.isNull = isNull;
                function isNullOrUndefined(arg) {
                    return arg == null;
                }
                exports.isNullOrUndefined = isNullOrUndefined;
                function isNumber(arg) {
                    return typeof arg === 'number';
                }
                exports.isNumber = isNumber;
                function isString(arg) {
                    return typeof arg === 'string';
                }
                exports.isString = isString;
                function isSymbol(arg) {
                    return typeof arg === 'symbol';
                }
                exports.isSymbol = isSymbol;
                function isUndefined(arg) {
                    return arg === void 0;
                }
                exports.isUndefined = isUndefined;
                function isRegExp(re) {
                    return isObject(re) && objectToString(re) === '[object RegExp]';
                }
                exports.isRegExp = isRegExp;
                function isObject(arg) {
                    return typeof arg === 'object' && arg !== null;
                }
                exports.isObject = isObject;
                function isDate(d) {
                    return isObject(d) && objectToString(d) === '[object Date]';
                }
                exports.isDate = isDate;
                function isError(e) {
                    return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
                }
                exports.isError = isError;
                function isFunction(arg) {
                    return typeof arg === 'function';
                }
                exports.isFunction = isFunction;
                function isPrimitive(arg) {
                    return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' || typeof arg === 'undefined';
                }
                exports.isPrimitive = isPrimitive;
                exports.isBuffer = require('./support/isBuffer');
                function objectToString(o) {
                    return Object.prototype.toString.call(o);
                }
                function pad(n) {
                    return n < 10 ? '0' + n.toString(10) : n.toString(10);
                }
                var months = [
                    'Jan',
                    'Feb',
                    'Mar',
                    'Apr',
                    'May',
                    'Jun',
                    'Jul',
                    'Aug',
                    'Sep',
                    'Oct',
                    'Nov',
                    'Dec'
                ];
                function timestamp() {
                    var d = new Date();
                    var time = [
                        pad(d.getHours()),
                        pad(d.getMinutes()),
                        pad(d.getSeconds())
                    ].join(':');
                    return [
                        d.getDate(),
                        months[d.getMonth()],
                        time
                    ].join(' ');
                }
                exports.log = function () {
                    console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
                };
                exports.inherits = require('inherits');
                exports._extend = function (origin, add) {
                    if (!add || !isObject(add))
                        return origin;
                    var keys = Object.keys(add);
                    var i = keys.length;
                    while (i--) {
                        origin[keys[i]] = add[keys[i]];
                    }
                    return origin;
                };
                function hasOwnProperty(obj, prop) {
                    return Object.prototype.hasOwnProperty.call(obj, prop);
                }
            }.call(this, require('_process'), typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : {}));
        },
        {
            './support/isBuffer': 355,
            '_process': 350,
            'inherits': 329
        }
    ],
    357: [
        function (require, module, exports) {
            module.exports = extend;
            var hasOwnProperty = Object.prototype.hasOwnProperty;
            function extend() {
                var target = {};
                for (var i = 0; i < arguments.length; i++) {
                    var source = arguments[i];
                    for (var key in source) {
                        if (hasOwnProperty.call(source, key)) {
                            target[key] = source[key];
                        }
                    }
                }
                return target;
            }
        },
        {}
    ],
    358: [
        function (require, module, exports) {
            module.exports = extend;
            var hasOwnProperty = Object.prototype.hasOwnProperty;
            function extend(target) {
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i];
                    for (var key in source) {
                        if (hasOwnProperty.call(source, key)) {
                            target[key] = source[key];
                        }
                    }
                }
                return target;
            }
        },
        {}
    ]
}, {}, [3]));
//# sourceMappingURL=data:application/json;base64,

